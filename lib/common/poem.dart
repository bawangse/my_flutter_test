/* 
poem 美/ˈpoʊəm/ pou-men n.诗;韵文
 */
import 'dart:math';
import 'package:i_konw/basic.dart';

final List<String> poem = [...pili, ...software];

showDialogForPoem(context) {
  String poemStr = poem[Random().nextInt(poem.length)];
  basic.alert(context, '你来啦', poemStr);
}

/* 
获取霹雳数据：
https://zh.wikipedia.org/zh-cn/%E9%9C%B9%E9%9D%82%E5%B8%83%E8%A2%8B%E6%88%B2%E4%BA%BA%E7%89%A9%E5%88%97%E8%A1%A8
在加载完成后执行下面的js：

var trs = document.querySelectorAll('.wikitable tr')
var str = ''
for(let i=0;i<trs.length;i++){
  var text = trs[i].innerText
  // "角色名\t登场\t退场\t诗号\t能力\t\n展开\n备注", 6列
  // var text = "\n阿修罗\n\n《霹雳震寰宇之龙战八荒》第31集\n\n\n\n\n\n\n武学\n暗之爆\n暗之漩\n暗之岚\n神之哭\n天之爆\n冰火双极\n神之怒\n天之涡\n天地毁\n阎之爆\n魔之狂\n神之杀\n咒术\n地之火·九天灭绝\n山河凝元·天地共引\n\n死国魖族最强者，在历经多场战役统一死国，直接挑战天者权威，不服其领导，要求让三族和平共处，因此被天者以增加资源为名，前往打通连接火宅佛狱、死国及苦境的莫汗走廊，未料在工程半途被枫岫主人所乘驾的陨石撞毁，阿修罗在天者刻意算计下意外身亡，身葬苦境与死国间的异次元。\n"
text = text.replaceAll('\n','bws').replace('bws','角色名:')
  .replace('bwsbws','\n登场:')
  .replace('bwsbws','\n退场:')
  .replace('bwsbws','\n诗号:')
  .replace('bwsbwsbws','\n能力:')
  .replace('bwsbws','\n备注:')
  .replaceAll('bws','  ')
  str+=`"${text}",`
}
 */
final List<String> pili = [
  // "角色名\t登场\t退场\t诗号\t能力\t\n展开\n备注",
  "阿修罗\t《霹雳震寰宇之龙战八荒》第31集\t\t\t角色名:武学  暗之爆  暗之漩  暗之岚  神之哭  天之爆  冰火双极  神之怒  天之涡  天地毁  阎之爆  魔之狂  神之杀  咒术  地之火·九天灭绝  山河凝元·天地共引  \t死国魖族最强者，在历经多场战役统一死国，直接挑战天者权威，不服其领导，要求让三族和平共处，因此被天者以增加资源为名，前往打通连接火宅佛狱、死国及苦境的莫汗走廊，未料在工程半途被枫岫主人所乘驾的陨石撞毁，阿修罗在天者刻意算计下意外身亡，身葬苦境与死国间的异次元。",
  "阿寓藏\t《霹雳天阙》第9集\t\t\t角色名:阵法  七绝连锁阵  \t集境三宫六殿十八楼之“国颂殿”殿主，下辖龙华、师尹、白阳三楼。",
  "哀三声\t《霹雳异数》第9集\t《霹雳异数》第27集\t迅雷急雨千里行，转眼东西转西边。\t角色名:专长  轻功  \t无形神迹哀三声、又称神手无影，口头禅是“哀、哀、哀”，轻功绝顶、来去如风，堪称是天下第一神偷。有古今神器十八种之一——烈火。",
  "爱祸女戎\t《霹雳天启》第47集\t《霹雳震寰宇之兵甲龙痕》第1集\t爱本祸劫，遍地女戎。\t角色名:武学  祸水吞天  夺世爱欲  夺世女祸  创神式·赦天无爱  邪舞祸世  九媚邪闻  邪造业障  女祸妖业·浑开邪戎  三千爱火盛罗幔  \t佛业双身之女体，来自灭境地下，穷阴迷巢中的巨茧之中，于霹雳天启第四十七集初次亮相，在霹雳震寰宇之兵甲龙痕第一集，败亡于一页书融合“十二神天守”与“八部龙神火”之极招。",
  "暗影魑首\t《霹雳天启》第31集\t《霹雳震寰宇之刀龙传说》第4集\t\t角色名:武学  鬼破·裂天  鬼破·屠军  咒术  黄泉引渡·众灵回归  \t魑离船大首，黄泉引者的首领。在进攻月族夺回罗喉首级时，死在月族战神苍月银血枪下。",
  "傲笑红尘\t《霹雳英雄榜》第50集\t\t半涉浊流半席清，倚筝闲吟广陵文。寒剑默听君子意，傲视人间笑红尘。\t角色名:武学  气傲天苍  横霸千峰  烽火红尘路  红尘一步终  忘弃红尘  红尘冉冉  御剑术  红尘轮回  隔纸断树  治病之剑  九思剑法  灵犀一指  寒影暴风尘  一任秋月  剑舞秋风  凝水成冰  逍遥秋风  穿越红尘不扰关·回旋天地去复还  \t西武林天外方界六弦之一，刚正不阿，对于所认定的事物，有着超乎常人的坚持。坚信公理正义的存在，不容许任何奸诈之徒为恶。武器为傲笑红尘剑，所使用的武功为红尘剑法。除了在霹雳系列剧集中出现，还在霹雳布袋戏电影圣石传说中担纲主角。",
  "角色名:八岐太岁\n登场:《霹雳开疆纪》第4集\n退场:《霹雳开疆纪》第20集\n诗号:\n能力:武学  七曜陀罗  天刑阴杀  计都天刃  灭世罗喉\n备注:东瀛鬼祭将军的遗臣之一，极力欲使鬼祭政权重登大位。  ",
  "角色名:薄棠\n登场:《霹雳兵燹之问鼎天下》第32集\n退场:《霹雳战元史之天竞鏖锋》第28集\n诗号:抚刀夜吟啸，雄心日千里。\n能力:武学  一鹅飞轻·千钧裂地\n备注:  ",
  "角色名:白马纵横\n登场:《霹雳兵燹》第5集\n退场:《霹雳兵燹》第33集\n诗号:欢亦高歌悲亦歌，九宵凌渡步飞霞；春风得意马蹄疾，一朝看尽洛阳花。\n能力:武学  得意剑法  快意秋风  寄心畅意  一剑惊雷破五岳  一剑雪飘漫八荒  一剑怒焰震九州  白马长驰疾万里\n备注:川凉剑帝金苍龙的徒弟，个性幽默随和，武功高强，得知川凉剑帝被黄泉吊命所杀后一心欲替剑帝雪恨，最终大仇得报并与燕飞虹结婚，好景不常，在探查凡尘崖的过程中与王者之刀交手，不幸死于王者之刀之手。  ",
  "角色名:白尘子\n登场:《霹雳震寰宇之兵甲龙痕》第9集\n退场:《霹雳震寰宇之兵甲龙痕》第30集\n诗号:\n能力:武学  凝宇化空  反神源\n备注:火宅佛狱凯旋侯的副体之一，本名黑枒君，卧底中原武林，向佛狱通风报信，最后被素还真所杀并冒充其身份一探佛狱之秘。  ",
  "角色名:白城舆\n登场:《霹雳刀锋》第1集\n退场:《霹雳异数之万里征途》第5集\n诗号:\n能力:武学  白刃吟霜  一刀倾城  一刀天下  刀卷苍穹  刀舞天华  御刀·刀无形  苍虹擘日\n备注:《霹雳刀锋》主角之一  ",
  "角色名:白衣剑少\n登场:《霹雳图腾》第4集  《霹雳狼烟之万堺尘涛》第13集复活登场\n退场:  《霹雳狼烟之九轮燎原》第15集暂退场\n诗号:\n能力:武学  双剑并流  流风剑影  风过留痕  风剑走无形  风尽残痕独凭剑  风之痕\n备注:魔剑道少主，风之痕徒弟之一。  ",
  "角色名:北无君\n登场:《霹雳刀锋》第17集\n退场:《霹雳异数之万里征途》第22集\n诗号:\n能力:武学  破霜火  冻霜刃  冰火悬  冰火连天  冰火二重天  飞雪没百霜\n备注:师承策衍先座的四方无君之一  ",
  "角色名:暴风残道\n登场:《霹雳神州II之苍玄泣》第11集\n退场:《霹雳神州II之苍玄泣》第25集\n诗号:\n能力:武学  暴风斩  烈风斩  破云斩  暴风肆境  暴风燎乱  蚀骨之壤  阎王决命·断\n备注:外号阎罗王厉，异度魔界四大天王之一。  ",
  "角色名:半部禅\n登场:《霹雳外传之叶小钗传奇》第1集\n退场:《霹雳幽灵箭》第二部第4集\n诗号:\n能力:  本来法号“慧名”，是个伪君子。  ",
  "角色名:别见狂华\n登场:《霹雳兵燹之刀戟勘魔录》第6集\n退场:《霹雳兵燹之刀戟勘魔录》第28集\n诗号:\n能力:武学  无道之道\n备注:魔界五大先锋之一  ",
  "角色名:冰川孤辰\n登场:《霹雳兵燹》第42集\n退场:《霹雳刀锋》第17集\n诗号:\n能力:武学  逆天式·鬼阳六斩  鬼阳破天池  血泣魔光  鬼泣邪风  冥刀诀  千川刀旋  冰川龙吟\n备注:称号“王者之刀”、“刀王”，冰川城遗孤。  ",
  "角色名:冰无漪\n登场:《霹雳战元史之天竞鏖锋》第3集\n退场:\n诗号:寂傲沧溟远，睥越天关，剑殃造劫竞锋寒，祸随无生还。\n能力:武学  雪凝冰华流  剑风冰痕\n备注:元种八厉中的“水之厉”  ",
  "角色名:病孤髑\n登场:《霹雳兵燹之问鼎天下》第32集\n退场:《霹雳兵燹之问鼎天下》第35集\n诗号:\n能力:  枯禅印机之友；擅长利用虫类的特性下药医病。  ",
  "角色名:不死魔僧\n登场:《霹雳英雄榜》第27集\n退场:《霹雳烽火录》第16集\n诗号:\n能力:武学  六弦天式·四象齐汇“金刚极式”  追风擒魔手\n备注:天外方界六弦之一  ",
  "角色名:不二做\n登场:第一次：  《霹雳神州II之苍玄泣》第3集  失踪：  《霹雳神州III》之天罪第1集  再登场：  《霹雳神州III之天罪》第22集\n退场:\n诗号:《霹雳天启》第41集\n能力:杀人不放火，造桥不铺路，报恩报仇不二做！\n备注:  武学  风龙卷  剑旋十字斩  气源破流  人剑合一·旋风流  猛电雷疾斩  风疾旋·雷电鸣·风旋雷击斩  龙卷风  十字剑痕  风龙无尽式  无形剑·万剑破极  无形剑·九绝断首  剑·冰痕、无形剑·血剑俱丧    称号“报恩报仇”。身背巨剑，谈吐直率不失幽默的江湖侠客，处事有所原则，所以自称报恩报仇不二做。口头禅是“那就奇了”，根据场合的不同，也有多种应用的用法。  ",
  "角色名:不二刀\n登场:《霹雳英雄榜之争王记》第1集\n退场:《霹雳异数之龙图霸业》第40集\n诗号:\n能力:武学  一刀无二  邪刀舞飞旋  不绝邪光  邪刀破千锋  幻影刀法  邪刀似刀邪  天绝邪光不二刀\n备注:七星之“刀王星”  ",
  "角色名:泊寒波\n登场:《霹雳兵燹之刀戟戡魔录II》第3集\n退场:《霹雳兵燹之刀戟戡魔录II》第36集\n诗号:\n能力:武学  冰棱寒刀  鹿跃金钩  怒蹄扬尘  蜃气残影  寒波劈海  鹿鸣穷空\n备注:神刀门主、鼎炉分峰六人之一。  ",
  "角色名:步怀真\n登场:《霹雳异数之万里征途》第15集\n退场:《霹雳九皇座》第6集\n诗号:路行万里远，明月、流云、远山，故人心思乡；白纸提一字，是非、功过、曲直，千古论英雄。\n能力:武学  天罡佛印  怒动风云  八方惊武  菩提圣气  笑尽英雄  佛言枷锁  紫气千行  一气动山河  大梵圣掌\n备注:一身紫衣，言谈风趣，来历成谜的书生，为一页书化身，首次出现便与沐流尘进入黑雾森林，后屡屡襄助正道度过危机，救素还真，击毙鬼隐，后遇妖后统领妖刀界逼杀，不得已使出大梵圣掌，躯体爆裂而恢复一页书身份。  ",
  "角色名:伯藏主\n登场:《霹雳开疆纪》第21集\n退场:《霹雳神州III之天罪》第7集\n诗号:人生五十载，纵观众生诸相，一切恍如梦幻，享受于世之人，岂有不灭者！\n能力:武学  金风雪柳  白狐封印  狐潜古川  狐刀封印  狐刀斩  无弦千波扬  白狐三昧火  白狐弦鸣  一曲长歌叹东流\n备注:原本应该继位成为白狐国第65代君宇，后因其弟犬若丸篡位而流离至罪恶坑，成为二恶首。  ",
  "角色名:八津蛮\n登场:《霹雳谜城》第33集\n退场:《霹雳皇朝之铡䶮史》第21集\n诗号:\n能力:武学  驯狼刀法  狼驯破天  八犬天踪  狼驯八犬  狼影万踪  狼啸回谷\n备注:黑夷族侍长，负责族人战斗训练和狩猎，握有黑蛮旗领导权  ",
  "角色名:病梅先生\n登场:《霹雳谜城》第36集\n退场:《霹雳开疆纪》第20集\n诗号:傲骨嶙峋，一片丹心；暗香远送，百世流芳。\n能力:武学  梅雨颤雪  咒术  天地归乾坤·寰宇指玄藏\n备注:武联会儒教长老，气度温和谦逊、深具文人气息，秉持傲骨嶙峋的情操，辟病梅馆以传授儒学、矫世道歪风为志业。  ",
  "角色名:八荒神野\n登场:《霹雳神州III之天罪》第12集\n退场:《霹雳神州III之天罪》第13集\n诗号:\n能力:武学  魔横八野  魔罗妖网\n备注:伏婴师所召唤出的鬼族王将，持锁链镰刀  ",
  "角色名:背九命\n登场:《霹雳奇象》第37集\n退场:《霹雳神州III之天罪》第12集\n诗号:\n能力:  擅长接合各类残肢，原是长生殿药人  ",
  "角色名:八方横野\n登场:《霹雳奇象》第32集\n退场:《霹雳谜城》第17集\n诗号:\n能力:  贾命公豢养的斗犬。  ",
  "角色名:北野真\n登场:《霹雳皇龙纪》第43集\n退场:《霹雳皇朝之铡䶮史》第18集\n诗号:\n能力:武学  沙遁之术  斩影  叶飒沙岚  砂卷  沙乱  沙绝  八方斩  狂龙旋斩·十字刀流  砂啸  沙暴  真刀无流\n备注:东瀛武士，夜摩市二副，东瀛四异之首。  ",
  "角色名:八分仪\n登场:《霹雳皇龙纪》第36集\n退场:《霹雳皇朝之铡䶮史》第24集\n诗号:\n能力:武学  旭日流·变化无穷四神诀  变神诀  化神诀  无神诀\n备注:东瀛旭日流之一，东瀛据点夜摩市首脑，以船首自居  ",
  "角色名:补剑缺\n登场:《霹雳谜城》第26集\n退场:《霹雳神州III之天罪》第2集\n诗号:\n能力:武学  血狼杀生斩  血狼烈火  鬼狼斩  獠风飓狼斩  一击定天  血狼掌·一击定神源\n备注:魔界鬼族退休狼主，曾任狼城之主，退休后专职铸造神兵利器，堪称魔界第一巧手铸匠  ",
  "角色名:病剑叟\n登场:《霹雳英雄榜之争王记》第6集\n退场:《霹雳图腾》第8集\n诗号:路不平，八风吹；八风吹，剑风起；利衰无用是毁誉参半，称饥是苦到乐极生悲。\n能力:武学  八风剑式  毁剑式  苦剑式  乐剑式  衰败之剑  悲风无伦  毁剑破十方\n备注:行事率性的用剑高手，做事随心，不过一但下定决心，绝不轻言放弃。外表看似玩世不恭，却自有着一套的生活准则，阴晴古怪，开导剑君领悟剑法的方式也是让人摸不透，但也成功的使剑君领悟到一种不同的剑术境界。  ",
  "角色名:不老城太师\n登场:《霹雳奇象》第39集\n退场:《霹雳谜城》第40集\n诗号:\n能力:武学  平扇之舞  樱雪飘摇  阴阳极分  樱雪开道  樱花飘摇  咒术  柔祇雪凝·圆灵水镜  阴阳双化·樱雪破阵  樱华之舞·忒·开·化  阵法  幽天乾卦阵  五行旗阵  回化幻术阵  四能方阵\n备注:天荒不老城之主识能龙心腹之一。  不论是外型装扮或武学招式甚至是脸庞，一切皆与其心中仰慕的邪能境之主阴阳师如出一辙。    ",
  "角色名:不老城太辅\n登场:《霹雳奇象》第39集\n退场:《霹雳谜城》第40集\n诗号:\n能力:武学  青羽飘逆  青羽天翼  青羽凌波  飘羽之鹏  青翼幻羽  阵法  幽天乾卦阵  五行旗阵  回化幻术阵  四能方阵\n备注:天荒不老城之主识能龙心腹之一。  不论是外型装扮或武学招式甚至是脸庞，一切皆与其心中仰慕的平风造雨四无君如出一辙    ",
  "角色名:百里神骏\n登场:《霹雳奇象》第36集\n退场:《霹雳奇象》第39集\n诗号:\n能力:武学  怒驰越影\n备注:天眼卫无私好友  ",
  "角色名:波旬\n登场:  初登场  《霹雳劫》第9集\n退场:\n诗号:被封印  《霹雳兵燹》第7集\n能力:无界波答/无声色难，界心牟利，波耶气释，答迷身悲。\n备注:  武学  星云劲  狂魔啸天  纵横三界·惟吾独尊    欲界之主，由恶体阎达、女体女琊、智体迷达三人合体而成，为三头六臂的魔佛，融合三人无比的力量，三人共有灵佛心，并分别保有三人之意识，可合体也可各自化出。  ",
  "角色名:  重新出现  《霹雳侠影之轰动武林》第19集\n登场:\n退场:阵亡  《轰定干戈》第24章\n诗号:",
  "角色名:沧海老鸟\n登场:《霹雳雷霆》第1集\n退场:《霹雳雷霆》第8集\n诗号:\n能力:武学  九思剑法  拔剑不思理  用剑不思招  无剑有剑十分成  汇灵卷  汇灵育生术  慧眼穿云\n备注:佛门三佛子之中莲佛子的弟子，根据地为无巢林，个性诙谐逗趣，生性不喜遵守佛门戒律，酒肉不忌，出门喜爱变装，并备有多种款式假发。  佛门中人唤他“沧海”，而好友傲神州则叫他“老鸟”，通常只有不相干的人才会用全名称呼他。他带出了九本真经的秘密和佛门内部的秘辛，是承续剧情的重要角色。    ",
  "角色名:苍月银血\n登场:《霹雳天启》第40集\n退场:《霹雳震寰宇之刀龙传说》第6集\n诗号:\n能力:武学  怒雪无双  雪瀑银浪  回雪天斩  天河引泉  万冰绝  苍穹俱灭·天地破碎\n备注:苍月银血出身于月之幻陆，为月族战神，骁勇善战、苍劲挺拔，傲然气态宛如天神之姿，睥睨群伦，负责掌管月族军事；曾经在幽溟与爱染嫇娘逃至残鸣山时，发动绝招天河引泉阻挡月族人马的追赶。  ",
  "角色名:策马天下\n登场:《霹雳皇龙纪》第27集\n退场:《霹雳神州》第13集\n诗号:\n能力:武学  苍穹无尽  剑起江湖平日月  剑起风云行  剑破天地  横扫天下  天剑纳星汉·地剑归归九地·天地纵横破山岳\n备注:称号“以招取命”。  相貌斯文却个性阴沉极端，有些许歇斯底里，过去曾因阻止嗜杀者杀戮，但不敌落败而求死，却被羞辱地断去一腿脚筋，成为瘸子（秦假仙戏称“跛脚马”）。    ",
  "角色名:魑岳\n登场:《霹雳兵燹之问鼎天下》第29集\n退场:《霹雳战元史之动机风云》第39集\n诗号:\n能力:武学  三罡凶线  五刑吞岳  双擎日月·四阴风雷·六煞平涛启黄泉  厉荡千山  双擎日月·四阴风雷  五魑运岳·六葬天瀑  地浑朝天·厉煞风云\n备注:魑岳为元生八厉中的“山之厉”，曾假冒明峦之主蕴果谛魂，领导圣方击倒魔方，事实是与泽之厉贪秽狼狈为奸。  遭到邪九世吸收厉元而亡。    ",
  "角色名:赤睛\n登场:《霹雳经武纪之枭皇论战》第1集\n退场:《霹雳兵燹之圣魔战印》第1集\n诗号:\n能力:武学  黑翼掩空\n备注:魔王子的副体“观察者”，可化身巨大魔龙担任座骑，外表看似年少稚气，但个性却老成持重，曾经协助咒世主与拖刀者、深流君、红狐九尾、风世魃鬼联手封印被称作“异数”的魔王子，但也因为术法效力一同沉眠，直到魔王子被咒世主放出后，才同时解开封印，随魔王子往赴战场救出太息公、凯旋侯。  ",
  "角色名:赤梧桐\n登场:《霹雳兵燹之问鼎天下》第15集\n退场:《霹雳战元史之天竞鏖锋》第31集\n诗号:\n能力:武学  梧天赤令\n备注:龠胜明峦禁军统领，一身赤红如火，性格刚硬，略显冲动，完全服膺于蕴果谛魂与海蟾尊之下。  ",
  "角色名:砗磲佛母\n登场:《霹雳战元史之天竞鏖锋》第4集\n退场:《霹雳战元史之天竞鏖锋》第33集\n诗号:\n能力:武学  万象寂静·一切如来  三相合招  诸行无常·诸法无我·三学无漏  四相合招  琉璃炽圣·罗汉开道·如来大悲·究竟涅槃\n备注:天佛五相之一，象征“省思”，面容和蔼慈祥，行事作风也较为怀柔，惟独对魔皇相关的人事物，会采取较为明显的果断作风。与会时多以疑问句回应或开启新的议题，是五人中较少踏入武林者。  ",
  "角色名:常默衣\n登场:《霹雳烽火录》第8集\n退场:《霹雳狂刀之创世狂人》第4集\n诗号:泣风起，命星落\n能力:武学  卸命刀  泣风斩  天狎杀刀  判死剑招·人字诀\n备注:外号泣风斩，是易水楼天枢堂的武训，常默衣本是一方游侠，个性沉默寡言、感情内敛，加入易水楼后与同为武训的华琉衣有着若有若无的情愫。  常默衣为人正派，不茍同易水楼日渐变调趋向利字当头，所以顺势在对上傲笑红尘之际假死退出易水楼。    ",
  "角色名:创世狂人\n登场:《霹雳风暴》第4集\n退场:《霹雳雷霆》第2集\n诗号:;世间至道，血腥创世；异端不存，盛世千秋。\n能力:武学  创世刀法  虹影非真  离首回风  九宵极动  蜃影千幻  登萍踏浪  著作  创世真经  离首回风秘笈\n备注:百世经纶一页书反璞归真的前身，名唤创世者，行事果决，以传创世之道为其目标。  ",
  "角色名:沉世老叟\n登场:《霹雳狂刀之创世狂人》第17集\n退场:《霹雳狂刀之创世狂人》第47集\n诗号:\n能力:武学  日月同天\n备注:为王者之路留招者之一，为人老练圆融，乐天知命，外型有如老员外。  ",
  "角色名:长曾我部神权\n登场:《霹雳神州》第7集\n退场:\n诗号:\n能力:武学  倾楼城  霸天下\n备注:长曾我部神权外表粗壮魁武，肤色黝黑，打扮有如破戒僧人，全身散发着傲人的霸气，招式以拳法为主，曾统领杀手组织六道轮回于短时间内席卷东瀛武道，但因败在南武魁神无月掌下而被迫隐遁，转往统合东瀛黑道成为黑暗帝主，时人称呼“太阳之下是天皇，黑暗之中是拳皇”，在武道排名中一神二魁三皇四圣中，也名列第三。  ",
  "角色名:朝天骄\n登场:《霹雳侠影之轰动武林》第8章\n退场:《霹雳侠影之轰动武林》第26章\n诗号:;胜负由吾不由天，谈笑戎马惯狼烟。争，天地有数；战，败吾不存。\n能力:武学  连云叠嶂  云天之变  怒马奔澜  上雷无尽  飘渺云光\n备注:战云界凤座，也是战云界的领导人。与绝代天骄及御宇天骄并列为战云三骄。虽为女性但实力却是三人之首，耿直中带有高傲的气息，为人自信，凡事说一是一，温和平稳中带有王者的冷酷风范，遇事则保持一贯的冷漠淡定。因巨魔神的失踪导致战云界崩毁，朝天骄为找出凶手而一行苦境。  ",
  "角色名:超轶主\n登场:《霹雳惊鸿之刀剑春秋》第13章\n退场:《霹雳侠影之轰动武林》第12章\n诗号:;由来泉石潜蛟龙，不经烽火不现踪；风云岂是苍天主?拈作轩冕上九重。\n能力:武学  北风逆星汉  玉垒浮云变古今  渡鳞手  超然一锋定  绝马奔逸断风云  风云有道  御龙轩举渡横风  超逸剑式\n备注:烈武坛三罡之“御龙天”，亦是烽火鉴兵台之主，沉稳而具风雅气度，名列五大传奇之一“南冕”。久远前与七修创者一战后重创而销声匿迹，得策梦侯以八品神通治愈。对流火阳铁失落一事极为关切，言明此是烽火之关键。  ",
  "角色名:帝祸邪九世\n登场:《霹雳战元史之动机风云》第40集\n退场:《霹雳惊鸿之刀剑春秋》第12集\n诗号:吾在，天在；吾立，地立。无知的人类，欢迎沦亡在我的世界。\n能力:武学  九世邪转  帝祸八殛  帝袭八祸·邪伐九世  阎神灭道  弁邪九孽  万魔独天·无神迹\n备注:沉稳霸气的厉族不世王者，圣魔止战后一度沉寂，直到将其余元种七厉魄能汇整完全，遂以“帝祸邪九世”之名，驾乘黑色战车，挟带毁灭之姿大举攻入天佛原乡，再掀苦境风暴。  ",
  "角色名:大风鉴\n登场:《霹雳兵燹之问鼎天下》第1集\n退场:\n诗号:蚕头燕额是青龙，两笔交加朱雀凶，玄武怕他枯笔断，勾陈回笔怕干宫。螣邪草笔重重带，白虎原来坤位逢，六神占运玄有数，祸福灵通载无穷。\n能力:  共仰瞻风所指派，顾守一月园胜鬘天姬陵墓的守墓者，本身为一名算命相士，尤精通命理测字，个性诙谐乐天，相当捍卫天姬的名誉，与忌霞殇为多年旧识。真正的大风鉴早已身亡，被克灾孽主鳌天取代。  ",
  "角色名:大愿普贤\n登场:《霹雳战元史之天竞鏖锋》第2集\n退场:《霹雳战元史之天竞鏖锋》第10集\n诗号:\n能力:武学  槃凤归辰  涅槃击  七宝佛禅  擎凤岳  九天赤凰\n备注:天佛原乡云磬三衡之一，身负佛门凤凰灭魔绝式之源，是仅次于恒沙普贤的战力，为处理无尽天峰受损外露的封印，协同定品踏入红尘，防止厉族抢救受封的天之厉而战。  ",
  "角色名:刀悬一命\n登场:《霹雳兵燹之圣魔战印》第3集\n退场:《霹雳兵燹之问鼎天》第34集\n诗号:鸣世道、问罡涛，纵观天地牢，铁炼神风窥造化，一命铸魂刀。\n能力:武学  心悬一刀  刀浪不息  刀取遗命  点金指  拈命斩\n备注:隐居风雨坪的铸刀奇人，外表粗犷豪迈，实则内心细腻沉稳，因偷盗霓羽族神器遭末世圣传逼杀。殊不知此为圈套，让无惑渡迷误以为羽衣刃能杀号天穷，以致惨败收场。虽为末世圣传之人，但却似乎有意摆脱组织掌控。  ",
  "角色名:帝如来\n登场:《霹雳经武纪之枭皇论战》第26集\n退场:《霹雳兵燹之问鼎天下》第29集\n诗号:三身果报自凡根，六界因缘无了痕。善逝从来非本相，枯荣生灭尽空门。\n能力:武学  初禅三式  菩提之间  轮回之末  涅槃之初  吾佛照灯印  吾佛慈航·百心如一·金刚萨埵卍莲忏  禅海雷音\n备注:佛门角色。云鼓雷峰之首，手持戒刀“佛刑禅那”，传闻中是四境佛宗战斗之首，与一页书为旧识。海天一决在第三道关卡开宗明卷亲自上场一对一页书与擎海潮，虽表面上有意取胜，却已发现一页书魔化现象已解，暗中将计算时间的香柱加速，使一页书等人获胜。  ",
  "角色名:定品\n登场:《霹雳战元史之天竞鏖锋》第2集\n退场:《霹雳战元史之天竞鏖锋》第10集\n诗号:\n能力:武学  地泉汇海  灭罪忏  护地之禅  滔天世尘  滔天宝雨  渡世之露  宝树灵光忏\n备注:天佛原乡云磬三衡之一，与董霜哥接触的高僧，以换取天之厉生死之谜的情资。奉恒沙普贤之命，协同大愿普贤前往无尽天峰，以佛法修补外露的巨炼封印，数度逼退来犯的厉族人马，实力不弱。  ",
  "角色名:端木燹龙\n登场:《霹雳兵燹之圣魔战印》第20集\n退场:《霹雳兵燹之问鼎天下》第17集\n诗号:禁岳焚霄命恶从，驱龙造燹祸为宗。\n能力:武学  赤炼锁金手  闪灵蟒鳞指  摧形指  推蜃手  丹炀壤土诀  烔烬织火印  朱烍涛水式  红焠枷木掌  损风诀  博天式  撤神印  揭心掌\n备注:久远之名，焚如要术的作者，性情残虐凶暴，为达目的不择手段，其所创的赤炼锁金手，曾一度带来莫大危机，后为靖沧浪所击败冰封于地底。但在天阎魔城的设计下，让端木燹龙脱困再现，一举夺回阴体邪脉，功力大增，祸乱武林。  ",
  "角色名:端月留生\n登场:《霹雳战元史之天竞鏖锋》第14集\n退场:\n诗号:浮翳蔽清明，觉来况味深，一蓑风雨在，留得半世生。\n能力:武学  留生万般·一剑死  剑雨千浪\n备注:缯氏控灵者之卫士，抛姓从主，故以出生月份为姓冠名。端月留生相貌斯文，声音沉润，个性则寡欢偏冷，总是撑著红伞出场，弥漫着一股忧郁氛围。其伞柄藏剑，疾利如雨，为辟兵缯家十卫士之首。  ",
  "角色名:断灭阐提\n登场:《霹雳兵燹之圣魔战印》第9集\n退场:《霹雳兵燹之问鼎天下》第19集\n诗号:阐提邪焰断轮回，灭道诛圣唤魔身。\n能力:武学  玄雷·破  玄雷·断  血屠三禁  恶断轮回  狱火无道  绝生灭灵  风耀邪煌  皇灭千秋  玄雷怒霆斩  玄雷斩天衢  飨血禁命·末之焰\n备注:天阎魔城少君，拥有强大的魔能，天性骁勇，却因爱上净无幻而背离魔城，化为任云踪、投身登道岸。虽欲舍弃过往身份，无奈天意弄人，为重建天道明火并让净无幻复活，在兄长他化阐提的算计下，断灭阐提唯有回归魔城一途，接掌魔皇戮印，至此殊途。  ",
  "角色名:缎君衡\n登场:《霹雳战元史之天竞鏖锋》第7集\n退场:《霹雳惊鸿之刀剑春秋》第17集\n诗号:大好江山云飘渺，身在囹圄心自高，燕雀岂识鸿鹄志，翻袖决胜千里遥。\n能力:武学  极封破命  猎命幻影·驭灵伏杀  四灵伏杀  咒术  搜魂定踪术  破命三绝  乾坤逆反  灵翼之空  咒令决杀  离虚返实  灵护咒玄  罪化血薮·天葬  咒令决杀·血影之魇  血葬·天荒  咒极斩虚  祭血引灵·万鬼朝宗  厥功济万灵  衡玑度天阙  灵护咒玄  渡灵化厄  阵法  聚魂阵\n备注:灵狩缎氏，曾为中阴界五大控灵家族之首，擅长控灵术与各种奇门术法，因抽取魔皇之魂失败遭流放绝境长城。外表看似阴沉冷漠，实则机巧善辩，好揶揄作戏，被视为中阴界的麻烦制造者。曾与驺山棋一有所缔约。与义子黑色十九及阇魇那迦积极找寻复活魔皇之法。  ",
  "角色名:东无君\n登场:《霹雳刀锋》第12集\n退场:《霹雳异数之万里征途》第25集\n诗号:东无无浪封四海\n能力:咒术  唤灵术·玄雷火鬼  玄雷冥火  心化相  相化术  术化九魇  阵法  灵幻奇阵  术法之镜\n备注:四方无君之一，也是四方无君领导者。东无君是策衍先座座下弟子之一，个性虽然冷淡高傲，但是却恩怨分明行事风格也正大光明，本身无心于权利。一生醉心于术法，希望与天下术法好手对决。昔日同修好友平风造雨四无君请出东无君在四鉴台设置阵法困住天忌，也趁机借由四鉴台灵幻奇阵吸引天下。术法好手闯阵，其阵法强度连风之痕、青阳子也无可奈何，直到刑天师欲救出天忌而与鬼隐联手才将灵幻奇阵破解。  ",
  "角色名:董霜哥\n登场:《霹雳兵燹之问鼎天下》第7集\n退场:\n诗号:跑跑跑，四处跑，一天三餐都得跑，吃粥得搅，做人得跑，背棺人生是跑不完，冻霜淋雨是好像狗。\n能力:  滑稽逗趣、爱耍小聪明玩弄人的粗活搬运工，讲话俚趣带点粗俗，常自称俺哥，身穿汗衫粗袍，脖子挂着毛巾，辛苦背著身后的棺材，动机不明的在武林走跳，是十足的神秘人物。人如其名，为人吝啬，背后棺材之内可是藏有玄机。  ",
  "角色名:沌王非寿\n登场:《霹雳战元史之动机风云》第10集\n退场:《霹雳战元史之动机风云》第26集\n诗号:\n能力:武学  揉玄流脉  揉劲截脉手  揉玄指  揉玄拈脉\n备注:二代武道七修之一，习有“揉玄流脉”。青脸赤瞳，凶神恶煞。与尊武封端一同寻找鬼瞳。  ",
  "角色名:渡鹤影\n登场:《霹雳狂刀之创世狂人》第21集\n退场:《霹雳狂刀之创世狂人》第28集\n诗号:\n能力:武学  无怨无尤  同心剑\n备注:为王者之路留招者之一，个性孤沈、终日郁郁寡欢。号称“寒潭冷月”，本居于高唐醉梦乡，和妻子落烟霞曾一同参与舞造论举办的秋水宴，于会中提出剑气医病的理论，后在王者之路上留下成名招式无怨无尤，换得无相所留的欲望之海。  ",
  "角色名:刁\n登场:《霹雳震寰宇之龙战八荒》第1集\n退场:《霹雳震寰宇之龙战八荒》第10集\n诗号:\n能力:武学  石刀杀式\n备注:为刀无极所栽培的大将，个性沉默不语，练有石刀杀式，能以雕刻刀以杀气袭敌，对刀无极十足的死忠，在其面临黄泉逼杀时，挺身护主而死。  ",
  "角色名:刀无极\n登场:《霹雳天启》第46集\n退场:《霹雳震寰宇之龙战八荒》第40集\n诗号:天纵英才笑古今，下尘倾局何足论，封名神武无人及，刀震乾坤傲群伦。\n能力:武学  霸刀无极  斩天神殛  皇极天斩式·皇霸千秋  皇天之护  神雷擎天斩  皇极天斩式·雷宇破空  吞天邪焰  皇极神暴\n备注:天下封刀之主，亦为御天五龙中的背叛者“炽焰赤麟”[注 1]。幫助邪天御武報仇進而獲得「邪天御武」之力，成為五龍之中最強之刀，但也因此與羅喉之愛將黃泉，結下深仇大恨。而他本人則是唯一在武戲中多次身著刀龍戰袍應戰的刀者。  ",
  "角色名:刀瘟\n登场:《霹雳兵燹之刀戟戡魔录II》第7集\n退场:《霹雳兵燹之刀戟戡魔录II》第28集\n诗号:刀瘟过境，唯留不解。\n能力:武学  不解刀法  惊鸿斩  怒眉斩  沧海一线\n备注:本名温娘，是阴阳海双锋传奇之一，生性冷绝、残酷，但因为幼子康儿身患奇症四处杀人取血以活命，后受到丈夫好友贾命公唆使前往皇甫世家求药，因不明药效，以为康儿绝去呼吸即为身死，大肆屠灭皇甫世家，并到处夺人小孩，以致夫妻反目，而与丈夫患剑决战。以不解刀法重创患剑，却也被断去一臂，并在受伤后失去记忆。  ",
  "角色名:东方鼎立\n登场:《霹雳剑踪》第3集\n退场:《霹雳兵燹之刀戟戡魔录》第20集\n诗号:天无二日，惟吾旷照，东方不落，鼎立不摇。\n能力:武学  归阳不复  恨舞悔阳  狂照无垠\n备注:号称不落狂阳，阳年阳月阳日阳时出生，阎魔旱魃八字一样，所以可以操纵魔刀阎魔神荒斩，但因为魔刀失去宝石神荒，型态变化而被东方鼎立改称长日狂阳。多年前曾经斩杀北极天宗赫颜姑苏，导致北极天朝瓦解，雪山崩解成红雪江，他还在赫颜姑苏头颅上留字：“天无二日，惟吾旷照，东方不落，鼎立不摇。”后与地理司（老大）、邓九五（老二）、公孙月（老四）、章袤君（老五）四人结拜，排行老三。  ",
  "角色名:道尊\n登场:《霹雳王朝》第24集\n退场:《霹雳英雄榜》第3集\n诗号:道可道，非常道，名可名，非常名。无是天地之始，有乃万物之母。\n能力:武学  天罡幻诀  天地根\n备注:道教圣龙口之主，其与老佛、圣夫子并称三教主。  三教主当年透过七重冥王的配合，用计围攻魔魁，使道尊身中魔魁所练的血烙魔气，不仅功力日益消退，更有入魔之忧，因而化做画中仙藏在孝文家中的神仙图中，造就秦假仙、业途灵，使之化身为秦半式、业一招于悬空棋盘上名动一时，后指引家破人亡的孝文，前往悬空棋盘拜秦半式、业一招为师。    ",
  "角色名:玷芳姬\n登场:《霹雳震寰宇之兵甲龙痕》第8集\n退场:《霹雳震寰宇之兵甲龙痕》第17集\n诗号:\n能力:武学  暗华无芳  花残落  暗根旋走\n备注:暗妆玷芳姬打扮妖冶富艳，宛如贵妇，但作为太息公的副体，与她一样作风趋刚强、阴狠，在太息公于三角会议上承接贪邪扶木侵袭苦境的任务后，玷芳姬便驻扎于漠沙林，驱使贪邪扶木吸吮苦境大地生源，她也承袭太息公对凯旋侯的不睦态度，初登场时揶揄其副体胜利者无执相亡于苦境之事，并用阿修罗阿修罗进入苦境的动向刺激他。  ",
  "角色名:东陵少主\n登场:《霹雳英雄榜之争王记》第1集\n退场:《霹雳图腾》第16集\n诗号:千古谁堪与伯仲，少时落梅殇，今越红尘亦悠悠；一朝白首望平生，不见东风残；只见九州万里行。\n能力:武学  怒啸天龙威  青龙震云霄  怒龙啸寒江  龙腾九天\n备注:怀拥天地七步阶之主，个性沉着冷静，擅长观测天象、推断命哩，人品与武功皆属上流之人士，其来历背景不平凡，为五方星主其中的东青龙另一身份则是拥有七星之主命格的候补人选。  ",
  "角色名:恶海鲛祖\n登场:《霹雳神州3天罪》第35集\n退场:\n诗号:\n能力:  恶海鲛祖栖身恶水潭的女邪灵，是大红袍之妹，尽管大红袍曾百般提醒她不可爱上凤凰鸣、不能和未来之宰为敌，但恶海鲛祖仍不理其劝诫，在进入苦境后先是收服过去三途判中的业途灵，然后威胁秦假仙帮助她追求道隐，其后协助众天回归、与未来之宰的作战都有参与。由于死神太学主为祸武林，凤凰鸣让恶海鲛祖与末徒凤惊声回往灭境凤来池退隐，未料正逢佛业双身出关，两人双双被邪化，直到凤凰鸣重回灭境发现有异才助两人恢复常性。  ",
  "角色名:法丈轮王\n登场:《霹雳经武纪之枭皇论战》第9集\n退场:《霹雳兵燹之圣魔战印》第16集\n诗号:坐守阿罗汉，持修藐世尘，金刚无所惧，法戒护辅身。\n能力:武学  执戒奉金轮  持定怒云海  法海慈航  如来圣轮\n备注:明慧殿主，在佛首闭关期间，与庄严殿主坐镇云鼓雷峰，对于犯戒者的标准秉持公正态度，认为犯戒者应当受刑，但也不能因为个人观感而擅自加重刑罚，处事偏向中立，刚正不阿，常扮演决议关键者。  ",
  "角色名:拂樱斋主\n登场:《霹雳震寰宇之刀龙传说》第32集\n退场:\n诗号:\n能力:武学  九天樱华  冲樱流旋  四叶掌樱  雪樱千放  百嫣初放  缚神灭杀  飞樱吹雪  千樱吹雪  雪樱千里  寒羽绽华  九樱曼天罗  雪樱舞天\n备注:拂樱斋之主，一身粉红，手持淡绿色花盏，与枫岫主人为多年不见的好友。性格诙谐轻松，谈吐风趣，饲养一萝莉兔精小免，对小免疼爱有加。其真实身份是火宅佛狱的三公之一－凯旋侯。  ",
  "角色名:非凡公子\n登场:《霹雳狂刀》第32集\n退场:《霹雳图腾》第12集\n诗号:与生俱来人中首，唯吾与天同齐寿，双脚踢翻尘世浪，一肩担尽古今愁\n能力:武学  五行借命术  无距离空间杀人法  指气剑流  游离八方  反向杀法  离筋挫脉  七色忍法  绿甲龙卷斩  黑翼龙霸式  白魇龙幻杀  花影迷术  破世阴字“破、凶、残、极、灭、哭、丧”七字诀  玄阴元流  七诀迷阵  透明隐身法  非凡神气  玄武风  玄武凌霄  化物成剑  颲颲啸玄风\n备注:    非凡公子为其祖父魔魁为了颠复三教，而利用魔魁之女取得三教元祖的精元孕化而成，但在之后三教的攻势下，魔魁于荒龙道受三教及七重冥王的围杀而亡，魔魁之女趁乱逃至东瀛，被伊贺派首领－七色龙所救，并嫁予七色龙。非凡公子为报养父七色龙之仇，追杀父仇人，黑流派宗师神鹤佐木（普生大师）而渡海来到中土，自此在猜心园里运筹帷幄。  ",
  "角色名:方界老童\n登场:《霹雳英雄榜》第4集\n退场:《霹雳烽火录》第12集\n诗号:\n能力:武学  六弦天式·四象齐汇·森罗万象  残破三尸掌\n备注:无忌天子昔日周游列国时投入天外方界麾下的高人之一，与傲笑红尘、血雨风生、愁月仙子、不死魔僧、白云骄霜合称天外六弦，受赠旋箜玉叉。在无忌天子被暗杀于八阵滩之后，慢慢的偏向白云骄霜，对白云骄霜言听计从。  ",
  "角色名:风飞沙\n登场:《霹雳皇龙纪》第8集\n退场:\n诗号:\n能力:武学  浪潮无涛  沙浪无尽  暗潮汹涌  银宇沙芒  仙灵白荧  九天神华\n备注:海猫风飞沙，本名“封绯”，为仙灵地界神官封书的双胞胎中的长女，因为殷族纯血所生，而被封为“神之女”。个性看似洒脱爽快，但其实暗带沧桑。外表看似冷淡，但内心情感澎湃如涛，只以歌声宣泄内心思潮。因父亲封书计划控制阿鼻地狱岛及仙灵地界，亲妹封钰被当成男孩子养育，被封为“灵之子”。  ",
  "角色名:风离相\n登场:《霹雳兵燹之问鼎天下》第30集\n退场:《霹雳兵燹之问鼎天下》第38集\n诗号:\n能力:  浮光海市之主，继承寄辛先宗之衣钵，对其徒凤隐鳞来历知之甚详，故当忧患深召开十擘云集大会，风离相便表态力阻驺山棋一入世、抗衡胤天皇朝，更企图以密招对付棋一，但却也因此卷入江湖风波。  ",
  "角色名:风之痕\n登场:  初次  《霹雳图腾》第18集\n退场:\n诗号:\n能力:  武学  魔流剑  风之痕[注 2]  风过·留痕  风·之痕  剑随风行  流风易痕  残风剑影  剑·泣血  风剑走无形  剑·魔流  剑·魔焰  剑·泣雨  风尽残痕独凭剑  啸傲狂风  残风剑影·剑魔狂流\n备注:人称“魔流剑风之痕”，并和一页书对抗弃天帝。而后与白衣剑少救走了被海蟾尊（泽之厉贪秽）打成重伤命在旦夕的黑衣剑少。  ",
  "角色名:  正式  《霹雳异数之龙图霸业》第1集\n登场:\n退场:",
  "角色名:风采铃\n登场:《霹雳异数》第10集\n退场:《霹雳紫脉线》第13集\n诗号:\n能力:  江南第一才女，不夜天之主，中原支柱素还真之妻，个性温柔善良，身为女流之辈却勇于面对江湖险恶，原本在天蝶盟的主导之下，伪装成魔龙八奇之一的朱雀云丹。  ",
  "角色名:凤凰鸣\n登场:《霹雳神州之苍玄泣》第26集\n退场:《霹雳天启》第48集\n诗号:心怀一襟朗月，剑藏七尺乾坤，惯看满城烟雨，回首不入烽云。\n能力:武学  大道风行  凤舞九霄一羽毛  凤焰凌秀·翼掩北天·道海击三千  壮气蒿莱道辟功  浩然一剑道回天  凤啸九重天  秋水扫平雪无痕\n备注:灭境隐世高人，身背天卷，腰悬尺八洞箫，能御卷行天，仙风道骨，其称号为“道隐”，与好友卧佛一枕眠并称为灭轮双擘，手持兵器“淑世之道”。其人清修无为、恪遵天命，沉稳不失幽默、睿智不失世故，善观察物理、体悟人生智慧。曾为追求极致的剑者，与九州一剑知等高手论剑，但因当时正追求仙道的六铢衣提点，而追求淑世之道。  ",
  "角色名:奉皇靝\n登场:《霹雳兵燹之圣魔战印》第27集\n退场:《霹雳兵燹之问鼎天下》第3集\n诗号:明心七世佛灯前，细数微尘照大千，悲悯山河平后土，渡行寰宇奉皇天。\n能力:武学  布施三千·持戒明轮  忍辱净秽·精进稽法  禅定虚空·智慧擎宇  佛心大悲·炼魔天脉\n备注:龠胜明峦副座，一身佛性修为，名号却兼纳儒道风格，性情敦厚稳健，正气凛然，为圣录点将的六圣护人选之一，所属天时为辰时。为因应即将到来的圣魔大战，请来靖沧浪、阿修罗等人，为太荒神决积极备战。  ",
  "角色名:服部雾藏\n登场:《霹雳神州》第12集\n退场:\n诗号:\n能力:武学  千叶流扇化之术  虚摩流隔空操体术  魔月流旋丝吊杀  乱心流封口术  石化之术\n备注:神风营忍杀部队总指挥，素有“隐将”之称，精通易容术以及东瀛各流派的所有忍术，从不以真面目示人，无人知其长相。曾变装过丸太郎、莫召奴、真田龙政，虚实莫辨、高深莫测，是个让人难以捉摸驾驭的高手。  ",
  "角色名:腹中首\n登场:《霹雳劫》第30集\n退场:《霹雳狂刀》第6集\n诗号:\n能力:武学  魔象鬼锁  阴阳鬼声  魔形魅影  通天秘语\n备注:出身灭境，在数百年前是与鬼王棺、业途灵合称“三途判”，拥有不死身，在与圣儒的大战中战败，逃往集境，正逢武皇坐化被纳入吸功石中，直到武皇破石而出方再现江湖。腹中首为人好色，曾奸淫良家妇女无数，也因此功体无法突破，其弱点便在颈部，因为头悬腹间，脖子处有一破洞，每当被剑气掌风灌入便会身受重伤，由于其人懦弱无能，每逢战败便只会呼喊同修鬼王棺、业途灵。  ",
  "角色名:孤独缺\n登场:\n退场:\n诗号:\n能力:  孤独缺，过去是武林知名恶徒，曾因师傅跨海神足偏爱师弟皇甫霜刃愤而杀师，于武林中作恶无数，遂避入罪恶坑中。由于孤独缺实力高深，在罪恶坑待的年头又久，被尊为元老与二罪首的候补人选，因遇上年幼的羽人非獍时发现其双足异禀，收他为徒，传授他自己独创的六翼刀法。并在后来羽人非獍弑母杀出罪恶坑之际，装作醉酒放他一马，让羽人顺利逃出罪恶坑。  ",
  "角色名:孤狼\n登场:\n退场:\n诗号:\n能力:武学  孤不留行  孤行摧辟  孤问天穷  王不留行  呎尺荡楚天  孤愤难鸣  杀破天地  狼破风云\n备注:鳌天与圣女之子，具有部分厉族血统。本为忌霞殇好友孤竹隐龙，但却因身怀厉族血统不见容于共仰瞻风，遂决心舍弃人类身份，成为厉族的一分子，并积极融入厉族团体中，无奈又因血统不纯正而遭到魑岳等人刁难。  ",
  "角色名:孤愁先生\n登场:\n退场:\n诗号:\n能力:  孤愁先生与欢喜佛、慈海渡者并称为道境三大高人，在玄宗重现之前是道境唯三的居民，名列六圣会之一，曾以行体流线教训盗去行体流线的秦假仙。长年修行于观道院，曾收鬼智灵童为徒，医好叶小钗的双眼。面上爱好和平，实为合修会的暗椿。在一页书天河运棺之役时与素还真下棋、斗智，牵制其前往援救，并且一度元神出窍逼出素还真体内的龙气。  ",
  "角色名:孤城不危\n登场:\n退场:《霹雳战元史之动机风云》第22集\n诗号:\n能力:武学  天发斩  皇极斩月\n备注:中阴界王之胞弟，沉稳而威仪，心计深沈不在兄长之下，却多了数分仁慈。兵器有霓发。已有家室，却又和宙王爱上同一名女人，以致被外派到绝境长城看守缎君衡。其妻麻净因此段外遇而自杀，让城主内疚不已，也让缯麻两家结下恩怨。  ",
  "角色名:古潇子\n登场:\n退场:\n诗号:古灵道境，幽冥归心，潇湘清流，太始归一。\n能力:武学  下垣天市汇九斛  中垣紫微设天牢\n备注:玉清界“潇湘清流”四杰之首，称号“昔往今来”，脾性略显孤高自傲，身手俐落不凡，海蟾尊以三教授令调度而出，归入方丈雨卷楼后，深受海蟾尊重用，并赐予炼壶松拐。龠胜明峦瓦解后，与赤梧桐相偕退隐，以为放下手上兵器，便可安然，不料遇血煞如来寻仇，刀穿胸口而亡。  ",
  "角色名:古苍穹\n登场:\n退场:《霹雳战元史之天竞鏖锋》第10集\n诗号:\n能力:武学  魔式三断  拨枝荡天\n备注:道号“观心扬尘”， 十擘云集在内的观心六隐之一，手持玉枝，个性平和理性，习有魔界秘学“魔式三断”，来历神秘，应忧患深之请而前往协助龠胜明峦，共同对抗胤天皇朝。在对抗胤天皇朝一战中，遭到天雷击中碎体而亡。  ",
  "角色名:寡断优柔\n登场:\n退场:\n诗号:\n能力:  绝境城主最得力、也最器重的心腹，沈熟妩媚，惯看世情，善察人意，说话直接不拐弯抹角。由于自己也是丧偶，所以与孤城不危之间除了主仆以外，还多了同是天涯沦落人的情感。  ",
  "角色名:鬼荒地狱变\n登场:\n退场:\n诗号:黄泉正在暴乱，地狱正在巨变，当屠戮不在可怕，只有人才是真正的魔鬼。\n能力:武学  地狱变相  鬼荒吞宇  鬼荒爆  地火三变  凶瞳煞变  千煞掌  鬼焚烈黄泉  地狱逆洪荒  鬼荒尽·无间地狱灭\n备注:原本为彪族首领，因遭到外聚七修等人袭击而亡，死前将恶鬼三凶分散各地。后其女儿明月不夜羽自尽，死后身躯产生变化，导致不夜羽以鬼荒地狱变之姿态重生。  ",
  "角色名:鬼如来\n登场:\n退场:\n诗号:魔佛妖僧怪和尚，声声句句鬼如来。\n能力:武学  鬼禅六断  无妄成法  神迷堕世  屠印杀界  辅轮天葬  众相唯灭  梵鬼同悲  梵火天击  如来哭泣·万鬼悲嚎·血断灭神击  孽罪怒佛·鬼嚎令\n备注:佛愆鬼如来手持邪兵涤罪犀角，头上布满骷髅舍利，进行千罪祭血，杀害无辜生命之魔人。后来因修佛而成为佛首帝如来，但也是使号天穷为恶的主因之一。  ",
  "角色名:鬼次郎\n登场:\n退场:\n诗号:\n能力:武学  斩天绝式  怒碎山  恨断海\n备注:军神的影武者，被列为神风营的最高机密，武学根基不弱，同样具备将才之风，代理军神扫荡鬼祭余党、查探鬼之瞳。在攻打落日故乡战役中，身份遭识破，败亡于莫召奴之手。  ",
  "角色名:鬼王棺\n登场:《霹雳劫》第2集\n退场:\n诗号:\n能力:武学  游魂离体  鬼引空心  千里追音法  鬼行之气  柔刚并合催形化气  挪移大法  透体鬼火  鬼王魔圈  天地归吾  万劫尽舍  迷踪行杀  探源追溯  六阳天（玄）火  阴陵扣命  无上魔法  行尸走魂术  一体同观术  引归杀象  灵光反扑  借体移位  虚转轮回灭  魔法查实  弃体守气  放磁束迹  枭音鬼声  星源探路  守骨走肉  通天密语  飞魔穿云  迷踪鬼行  隔空移物  飞传渡空  大凡金刚指  行尸走魂  隔空传音  功体  文气软功\n备注:霹雳史上不可考之种族，由历史时代可知，三途判最早为炼魔狱之一员，后来不知为何到了灭境，与万魔天指共成一气，地位之尊近乎与之平起平坐，灭境邪灵称其“尊者”。  ",
  "角色名:鬼狱邪神\n登场:《霹雳震寰宇之龙战八荒》第14集\n退场:《霹雳震寰宇之兵甲龙痕》第9集\n诗号:\n能力:  鬼狱邪神是天者与地者创造死国时，用两人精血凝化的五名尊者之首，奉命镇守于噬血魔道，执掌火之元素，和昔日一统死国三族的阿修罗交情甚笃，当初在死国之神降临时，奉天者命令归降，使他内心对天者十分不满，尤其对毫无战争的日子感觉厌烦，但他仍对天者、地者忠心耿耿，在天者欲奉神之子为主时，担起召集其余四尊的任务。神之子降临时但在却逢妖世浮屠打破空间入侵，鬼狱邪神为免死国遭殃，赶忙招集其他四尊，使出亡炼神击抵御，身受重伤。  ",
  "角色名:光世大如\n登场:《霹雳经武纪之枭皇论战》第4集\n退场:《霹雳经武纪之枭皇论战》第33集\n诗号:\n能力:武学  卍莲忏  观自在·如意轮·法网金刚印  观自在·如意轮·天人大悲掌  巍巍无量八正道  文殊法剑\n备注:云鼓雷峰中的庄严殿殿主，为昔日神鱼族灭后，神鱼死前散发出的灵气，因缘际会由帝如来所收，修练成人形，在勾陈山径考验素还真。  ",
  "角色名:广文诸\n登场:\n退场:\n诗号:\n能力:武学  新月朝阳\n备注:世外书香三名主事之一，在三教拥护三教之子成立霹雳王朝后，受命前往天堂之树翻译经文，因此元功大伤。在非凡公子垮台后，被魔魁之女救出，后于参与三六金言围杀魔魁之女的阵势中当场被余劲波及毙命。  ",
  "角色名:宫飞天\n登场:\n退场:\n诗号:\n能力:  宫音水弦飞天，仪态雍容华贵，本为须弥国皇后，因违背与须弥国守护神之缔约，而遭束缚于天工八月泉，后为御神风解开禁锢。曾助御神风击退号天穷，并陪同风流斋主护送天道明火至龠胜明峦。  ",
  "角色名:公孙月\n登场:\n退场:\n诗号:\n能力:  女扮男装的俊俏美公子，与圣踪、邓王爷、东方鼎立、章袤君为结义金兰，为北域五人组之四，久远前犯下诸多血案而得名黄泉赎夜姬，而后改过向善。居于浮光掠影，个人灵气逼人，聪明绝伦、善辨局势，非常懂得捉住人心弱点而占住优势，虽正邪莫测、立场不明，但禀性善良。善於戏耍北域双剑一刀中，刀的代表者阴川蝴蝶君，俩人恋情长达十八年，关系匪浅。  ",
  "角色名:海殇君\n登场:《霹雳幽灵箭I》第2集\n退场:《霹雳烽火录》第25集\n诗号:  欲海沉浮名利争，石光电火步此生；风尘情事挥不尽，观（渡）世不笑是痴人。  功成不退是庸人。（临终前）\n能力:武学  银波镜含  黄沙怒音扬  沧海月明映泪痕  至怒玄音综合掌  海纳千川  擎羊啸天  一指泣风动  真气传声  术法  五行转命术  奇木转命术  尘沙转命术  陷魔障  心外有身之术\n备注:灭境先天、西武林西丘三君之首、一页书的好友、傲笑红尘的义弟。眉宇刚毅，不怒而威；蓝发蓝袍，足蹬锦靴。手持羽扇，背挂忘情剑。智勇双全、重情重义。对于敌手仍能保持尊敬。关心武林安危，每每在武林陷入危难时挺身而出，与群侠共抗强敌。  ",
  "角色名:和阗印\n登场:\n退场:\n诗号:\n能力:  中阴界股肱大臣，睿智明理，掌管境内各种仪式，对于王室传统的维护非常重视，厌恶绵氏姐弟，因立场之故，常与绵君言词冲突。无奈忠言逆耳，其谏言往往不被宙王所采纳。  ",
  "角色名:鹤舟先生\n登场:\n退场:\n诗号:\n能力:武学  鹤羽凌踪  风火双分\n备注:鹤舟先生实为忌霞殇，为躲避克灾孽主而请医楼改变容貌。在忏罪之墙内与叶小钗布下杀阵，欲击杀克灾孽主，鹤舟先生以君子之传对上克灾孽主的九五之封，并峰双器互击之时飞至湖中，鹤舟巧见好友独轩辕，但因容貌不同而险遭攻击。在鹤舟解释后，独轩辕告知鹤舟并峰双器是是由太始之器所铸成，且将双器合一、成为太始之剑，也证时鹤舟（忌霞殇）为太始剑者。  ",
  "角色名:海蟾尊\n登场:《霹雳兵燹之圣魔战印》第34集\n退场:\n诗号:师良师，法正法，昂首乾坤三光定。论异论，辩雄辩，无愧天地一苍生。\n能力:武学  清微八阵剑  坎月薄烟水  离日烈丹火  巽网驭骄风  兑爻定王泽  震阙奉惊雷  艮脉号灵山  坤极破神地  乾元夺先天\n备注:  ",
  "角色名:黑白郎君\n登场:\n退场:\n诗号:  凶近三步，无法可图；进退不得，下跪哭诉！[注 3]  傲笑天地间，黑白两不分；马车幽灵影，潇洒一郎君！  黑金社会扬武宗，白色恐怖刹英雄；郎本无情绝义理，君临天下见真龙。[注 4]  黑夜穿梭幽灵影，白色骷髅形似马；郎唤南宫名带恨，君扬怒眉杀天下。[注 5]\n能力:武学  阴阳一气  阴阳合一碎日月  颠倒云岳  五绝神功  昊阳贯宇，收化运发一气化九百  离合并流  地煞七十二  八门金锁  倒转乾坤  七星星光  水魂寒一气  七十二地煞综合一气  天雷一指  鬼指扣魂  三阴破阳鬼风刀  绵指十八扣  地云行左  黄沙怒音扬  收化运发  幽灵魔刀之刀法  阴阳一气功  离合并流、怒马凌关  一气化三千  五绝神功  阴阳一气  怒马凌关  一气化九百  一气化三千  收化运发  离合并流  封灵斩  阴阳一斩  一气化三千·纳式  阴阳合一碎日月\n备注:黑白郎君的装束亦几为半黑半白，头戴“日月珍珠冠”，手持“阴阳扇”与“两仪拂尘”，背着一口“幽灵魔刀”，驾着来无影去无踪的“幽灵马车”行走江湖。  ",
  "角色名:黑衣剑少\n登场:初登场  《霹雳图腾》第9集\n退场:\n诗号:身亡  《霹雳九皇座》第50集\n能力:\n备注:    魔剑道少子，为诛天与妖后生下之子，个性狠野疯狂，师承师父风之痕的魔流剑剑法。后遭叶口月人击落断崖身亡，但后来母亲妖后帮忙复活，为邪尊道四少之一。  ",
  "角色名:  身亡  《霹雳经武纪之枭皇论战》第33集\n登场:\n退场:",
  "角色名:黑色十九\n登场:\n退场:\n诗号:\n能力:武学  天极地限·魂奏彼岸  狱魂斩  虚无之杀\n备注:个性阴沉，冷默寡言的神秘少年，带有死亡幽冥的肃杀气息，是灵狩·缎君衡之养子。双眼蒙着红布，封印一双妖异金瞳，红布摘下后则化为兵器〈狱魂〉，开杀同时通常半随白羽纷飞。身世不明，似乎与忏罪之墙有关。曾受红潮啃噬而不死，反而行成半身白骨的特殊体质，是唯一能在红潮中自由活动之人。与魔皇为义兄弟，皆为缎君衡之养子。  ",
  "角色名:皓眉仙藏\n登场:\n退场:\n诗号:\n能力:  后无封前辈，共仰瞻风第二任风阙，白眉长须，卸任之后云游四海，结识羲和派众逸士，成为其中代表出席十擘云集。身为海市八奇之一，与云野派的风离相竞争意味甚浓，但在得知驺山棋一身份后，遂大方出借坤舆墨斗。  ",
  "角色名:号天穷\n登场:\n退场:\n诗号:天地有尽，神吾无穷。\n能力:武学  神能天风  神能掀涛  穷天之变·通地之玄  吾·灭真  吾·灭幻  吾·灭神  天地有尽·神吾无穷\n备注:末世圣传天君，极度自信的一代霸主，行事果决直接，性格虽然狂妄，身段却是能屈能伸。练成灭幻神功后，得到不死且能改变身体型态的能力，便以神自居，企图得到拥有毁天灭地之力的神兵涤罪犀角，因此遭到五大高手设计，被封印在魔绝天棺中。  ",
  "角色名:号昆仑\n登场:\n退场:\n诗号:\n能力:  老君嫡系传人，精通太极拳剑和观云相测算法，曾助谈无欲重起炉灶再创高峰，并传他观云相测算法，而太极玄拳法则授予徒儿紫宫太一，太极剑的功夫则教给了好友金包银指点来的傲笑红尘，昔年曾用“浮悠天法”一招压制恶人破玄奇，将他逼入罪恶坑，并协助桑道凉以贯脉钉禁锢戤戮狂狶，阻他为恶。并在鼎炉分峰时把“浩气归元”一招传给圆儿。  ",
  "角色名:后无封\n登场:\n退场:\n诗号:\n能力:武学  德风纳手·沐雨运袖\n备注:  ",
  "角色名:寒天放\n登场:《霹雳狂刀之创世狂人》第3集\n退场:《霹雳狂刀之创世狂人》第17集\n诗号:\n能力:  刀盟金刀会之主，个性武勇豪迈，与剑盟秋水宴创办人舞造论义结金兰，并将独生女寒香许配给舞造论之子无不爱，但因昔年曾和舞造论联手放逐掠食者，在掠食者被大汗帝国网罗并练成野性之刀后，回转中原对两人报复，收买刀剑两盟的仆从绝离子、义海士杀害寒天放之女，使刀剑两盟险些大动干戈。  在真相水落石出后，寒天放和舞造论愤而再度联手迎战掠食者，却不敌他新练成的野性之刀，沦落被放逐的命运，当舞造论在离开中原前夕把“王者之路”、“钜铸录”、“沧海剑理”三本著作委托莫召奴代传无不爱时，也把家传绝技孤独刀法的秘笈托付给莫召奴，请他一并授予无不爱。在往赴关外途中，寒天放也和舞造论一起替叶小钗打造告心双利。\n备注:",
  "角色名:韩道衣\n登场:\n退场:\n诗号:\n能力:  出自玉清界的瀛洲风藏府，玉清界“潇湘清流”四杰之末。受海蟾尊调召而出，参与剿灭魔族的战役。在鬼如来屠杀玉清界时，幸赖潇德衣断后逃出虎口，孰料却在逼杀竞豹儿时，与境流子因意外乍见海蟾尊的厉族面目，惊慌失措之余被杀害灭口。  ",
  "角色名:恨刀英雄\n登场:《霹雳异数之万里征途》第2集\n退场:《霹雳异数之万里征途》第29集\n诗号:\n能力:  恨刀英雄出身正一天道，为法严天师的关门弟子。因为立志当英雄，所以做什么事都是用英雄手段去做。正义感十足，遵循祖训“万鬼乱世形成，则玄空血劫降临，生灵涂炭”的原则，在师兄行天师因鬼楼被破、内疚而死后，决心担负起追捕脱逃恶鬼的责任。  ",
  "角色名:恒沙普贤\n登场:\n退场:《霹雳战元史之天竞鏖锋》第30集\n诗号:诸行无常，诸法无我，涅槃寂静，一切如来。\n能力:武学  琉璃炽圣·罗汉开道·菩提天驾·大日腾霄  恒河沙劫·利益人天  菩提天驾·如来大悲  三相合招  诸行无常·诸法无我·三学无漏\n备注:天佛原乡至佛“天之佛”的五相之一，象征“信愿”，外貌为女性，思维直率的行动派，曾指派寿佛无量识代表佛乡出席十擘云集，并率先对无尽天峰的封印缺陷采取行动，防堵天之厉现世，在无尽天峰崩毁、血煞如来残杀佛乡僧侣等事件上，采取立即解决的态度。在天之厉复出后，成为第一个被毁法相。  ",
  "角色名:蝴蝶君\n登场:《霹雳皇朝之龙城圣影》第1集\n退场:\n诗号:\n能力:武学  蝴蝶天斩  红蝶天纹斩  红蝶戏焰  蝴蝶斩焰  天蝶流星拳  蝶影双行  死亡蝶  红蝶纹刀流\n备注:北域三大刀剑传说之一，北域刀剑金三角之一，性恶的信奉者，潇洒、自我风格强烈的收银买命杀手，人称“阴川蝴蝶君”，化身为“凤飘飘”，手持兵器“短刃蝴蝶刀”和“长刃蝴蝶斩”。  毕生视钱如命、精打细算，最爱黄金与阿月仔（公孙月），行事干净俐落、绝不拖泥带水，擅于操纵蝴蝶杀人，其刀法造诣之高深，是北方武林之首。    ",
  "角色名:华琉衣\n登场:\n退场:\n诗号:\n能力:  易水楼七堂中唯一的女武训，擅长轻功。一手教育瑶光堂之杀手，对朋友、徒弟默默关心付出。受无忌天子之托代为照顾袁冬曲。后却遭大鸿泸之计谋，遭易水楼杀手追杀。最终死在掠飞逢手中。  ",
  "角色名:花非花\n登场:\n退场:\n诗号:\n能力:  是金少爷与欧阳翎生的女儿，本名欧阳求姓（照世明灯命名，命七天所化），和金小开为孪生姐弟，天生染上怪病，白天是温柔婉约的美女，晚上面貌却变化如同鬼魅。为秦假仙之续弦。  ",
  "角色名:花风云\n登场:\n退场:\n诗号:\n能力:  剑藏玄与欧阳琳之子 ，因为欧阳山庄血案导致父母离异，因此花风云自幼便不知生父是谁，但是先天拥有操纵生死之手，剑术天赋又高，在接受花信风调教，并获得宇文天故意流露的单锋剑谱后，成为一方剑术名流，与父亲剑藏玄、冷剑白狐，同列为武林三大快剑手。  ",
  "角色名:火中雪\n登场:《霹雳神州III之天罪》第21集\n退场:《霹雳神州III之天罪》第46集\n诗号:\n能力:  藏身不灭火坑的女剑客，是玉阳君的前妻，曾助失路英雄脱胎换骨，前去追杀玉阳君时，遭其辣手杀害。  ",
  "角色名:槐破梦\n登场:\n退场:\n诗号:远风兮，飘摇故土，一年声，三年破梦。定目兮，拨弦夭夭，数裂帛，吁叹命薄。\n能力:武学  十剑擎天傲临风  一剑如月映千江  一弦夭夭·动雷煞天  二弦拨世·六龙开道  三弦拨世·天地尽诛  三弦动天  独日旷照  玄黄有毁  风云破煞  威震寰宇  四弦毁世  玄黄尽灭  玄阳动天  动火刀变\n备注:戢武王孪生双子，为剑之初所抚养，生性桀傲难驯，自命槐破梦。天阎魔城以医治心悸之由带走，经由愁未央的培植脱胎换骨，更受赠忽雷琴后堂然出现武林，全身散发邪佞气质，个性骄傲皇霸，且富有心机手段。后在驺山棋一的协助下，成就胤天皇朝霸业。  ",
  "角色名:慧宁师\n登场:\n退场:\n诗号:\n能力:武学  吾佛慈悲·警恶渡岸  皈依三乘  三相合一  具足三千戒[注 6]  四相合招  琉璃炽圣·罗汉开道·如来大悲·究竟涅槃\n备注:天佛五相之一，童稚样貌的佛修者，与会言论采取平铺直叙，不作太多延伸阐述，以乐观欢喜之心看待世界，与素还真甚有渊源。在无尽天峰佛炼崩毁后，一会禁锢多时的剑通慧，却也对其性情骤变产生诸多疑点。  ",
  "角色名:欢奭\n登场:\n退场:\n诗号:一泓淡墨动春秋，丹青染岁吟白头，飞鸟入书著幡信，送尽人间多少愁。\n能力:武学  鸟篆赐命术  灵篆制命\n备注:原为海市八奇之一的灵书鸟，数十年前游历天下时，无意掉入夜郎津古，因面容青俊以及身负特殊的鸟篆赐命术，被夜郎族人奉为螓王。能以百禽羽毫书写鸟篆，入至臻境，鸟篆会化成灵鸟漫天飞舞，煞为奇观。  ",
  "角色名:黄泉\n登场:《霹雳震寰宇之刀龙传说》第11集\n退场:\n诗号:\n能力:  黄泉从原本的火狐夜麟化身而来，后与幽溟引退至月族。  黄泉出身远离四境的月之幻陆，是当代月族之王与幻族女子所生，有月族王室血统，在父系兄弟间排行第二。\n备注:",
  "角色名:红流邪少\n登场:《霹雳经武纪之枭皇论战》第32集\n退场:\n诗号:\n能力:  邪尊道妖诞四少之一，原持有长枪“饮血邪刃”，在圣魔大战结束后改持长刀。四少中为沉稳者，对妖后十分尊敬。在天竞鏖峰时，与剡冥一战因实力悬殊受到重伤，被冰无漪与剑布衣救走，并与越织女重逢。而后在剑布衣与冰无漪的祝福下，与越织女乘船退隐江湖。  ",
  "角色名:犴妖神\n登场:\n退场:《霹雳兵燹》第19集\n诗号:\n能力:  犴妖神是犴妖族之长，为防备魔佛波旬和邪能境之首九曲邪君协议冥界小三界统一的事项，达成术武智三回大比决定胜出者的方式，在第一回的术法比试上因顺利延揽鬼隐，和邪能境代表灭轮回拼了个旗鼓相当。在第二场武斗时，九曲邪君虽临场毙命，改换练成阴阳魔功的地狱死神经天子上阵，但犴妖神仍凭仗自身修为打平，最后在智斗中部下妖后胜过了邪能境的谋士偃云溪，因而登上了冥界之主的宝座，并获冥界天岳致赠双极阴阳刃。  ",
  "角色名:晦王\n登场:\n退场:\n诗号:\n能力:  晦王，惯称魔晦王，是魔界四大天王之末，常持一口魔晦刀，虽给银锽朱武比喻为吾之右手，但论起武功实力在四天王中敬陪末座，被其余三天王看低，华颜无道甚至明说不屑与他并列出战，连敌人墨尘音亦称他是拖累四天王的最弱一环，而晦王在首次迎战后辈人天草二十六时就只能勉强打平。  ",
  "角色名:华颜无道\n登场:\n退场:\n诗号:\n能力:  华颜无道，身着性感战甲，个性豪爽，是魔界四大天王之三，常持一柄可破道家法力的恶露天斧，面具下额部生有一枚邪眼，和银锽朱武的关系非常好，因此被华颜无道拒绝追求的断风尘一直以为她爱的人是银锽朱武。  ",
  "角色名:皇甫定涛\n登场:\n退场:\n诗号:\n能力:  皇甫定涛，擅用独特的碾铸之法，铸造不世神兵，而被称作碾铸神手；所铸之器以自身心血为凝，所下之心血越重，利器之威越强也越能持久。由于出自他手的每口利器皆带有浓重的杀戮，因此被地狱岛所缉捕；但皇甫定涛实非罪大恶极，故问天谴网开一面、游说其前往仙灵地界接受赎罪。因缘际会下，皇甫定涛结识本名封绯的仙灵地界神之女风飞沙，两人谱出一段难忘恋曲。身为犯人的身份隔阂，使皇甫定涛无法忍受因自己令风飞沙饱受质疑，相赠暗潮刀作为诀别之物，遂接受仙界赎罪之刑，终生贡献其碾铸神手之能、并且假死隐遁于夕月湖，他的死亡也种下风飞沙离开仙灵地界的远因。  ",
  "角色名:寰宇奇藏\n登场:\n退场:\n诗号:\n能力:  寰宇奇藏初登场时以苦力人狼拉车，一派神秘人物作风，实则他是积善之家皇甫家族的大公子皇甫霜刃。十岁左右，在皇甫家中亭的柱子上留下“跨海二十年，霜归剑辉现”的誓言后离家，拜师于剑掌双修的高人跨海神足，习得其剑法。相对于师兄自创的六翼刀法，皇甫霜刃自创融合符咒的浩劫剑法。因师兄孤独缺背叛师门，不但师傅跨海神足身亡，连皇甫霜刃也被打下山厓。因缘际会为当时的翳流教主南宫神翳所救，成为翳流军师与四阁圣者之一。  ",
  "角色名:皇甫笑禅\n登场:\n退场:\n诗号:\n能力:  皇甫笑禅外表为手折足扭的残废之人，实则为当年以一式神催意残威震江湖的高人。幼年时期，皇甫世家因一场误会，惨遭阴阳海双锋传奇刀瘟、患剑灭门，皇甫笑禅虽大难不死，却就此重伤成残。因而将追缉当年灭门凶手，与找寻出外拜师的兄长皇甫霜刃视为毕生目标。  ",
  "角色名:荒野金刀独眼龙\n登场:\n退场:\n诗号:人称一流刀一流；刀称一流人一流\n能力:  除了在霹雳布袋戏中，在黄俊雄布袋戏中也有登场。  在黄俊雄的金光系列布袋戏中，千禧云州大儒侠剧集，为达摩金光塔的组织的一员，龙门世家家族的成员。第一侠苦海女神龙和霹雳城亦有登场，黑白龙狼传中也有登场。\n备注:",
  "角色名:克灾孽主\n登场:《霹雳兵燹之问鼎天下》第24集\n退场:\n诗号:天赐灾，吾掌孽，八极蒙祸，九夷肆虐，凶岁立寒烈。\n能力:武学  违天之孽  肆灾天赦孽  灾刑逆破  横道立凶岁  困功锁\n备注:元生八厉中的雷之厉，有着沉稳霸气的枭雄之姿，城府深沉，工于算计，曾化为鳌天渗透共仰瞻风，娶圣女为妻，生有两子刀悬一命、孤狼，目的在于找出真正的死亡预言一书。  ",
  "角色名:枯禅印机\n登场:\n退场:\n诗号:\n能力:  天仰后无封之好友，庄严修行僧侣之相，精通解剖等医术，以手术刀为器，如庖丁解牛手法俐落迅速。曾利用鬼觉神知细胞医治袭九鼎，让其苏醒，更引荐虫医病孤髑治愈忌霞殇所中的邪术病症。  ",
  "角色名:凯旋侯\n登场:《霹雳震寰宇之龙战八荒》第40集\n退场:\n诗号:\n能力:  拂樱斋主的杀体，火宅佛狱的三公之一。  ",
  "角色名:兰怀印\n登场:\n退场:\n诗号:\n能力:武学  合天印·诛恶之认·发\n备注:末世圣传高阶神职人员，执掌天印，巾帼不让须眉，胆识、武功双全，恪遵天君指示，协助总教宿贤卿管理教务以及圣城的开启。  ",
  "角色名:冷剑白狐\n登场:\n退场:\n诗号:\n能力:  武林三大快剑手之一（另两位是剑藏玄与花风云）  ",
  "角色名:冷滟\n登场:\n退场:\n诗号:\n能力:  深居傲峰十三巅，擅长以织铁造剑，打造出天之逸品的传说，与冷氏和萧家之人有着一段难解渊源，只登场在回忆之中。传说中，居于傲峰之上的铸剑师。天生骨质为阳铁，以自己的肋骨为材，再以织缎铸剑，打造出传说中的天之逸品。  ",
  "角色名:列经衣\n登场:\n退场:\n诗号:\n能力:  海蟾尊座下三衣，出身玉清界“瀛洲风藏府”，海蟾尊在圣魔战役时请调而出，协助围杀魔城势力，擅使刀及结法阵。  ",
  "角色名:六独天缺\n登场:\n退场:\n诗号:慈悲从来不在撒手处，末日——只余华美成殇恨。\n能力:武学  剑赦·末日之忏  剑赦·末日狂华  天罚罪\n备注:中阴界宙王之贴身护卫，气质冷峻、沉默寡言的剑术高手，有“不败之剑”美名。身披辟灵胄甲，手持末日罪赦，脸上纹有神秘七宗罪图腾，施展绝招时会做逆十字祷告。来历成迷，却能得到宙王的绝对信任，并肩负教导皇子武艺之职。  ",
  "角色名:炼宗圆\n登场:\n退场:\n诗号:无有宗天地，圆通大若愚，混沦观一体，万物道为躯。\n能力:武学  真武朝阳  修源百根  真武逆龙  真武天下\n备注:三教执之道教执，代表道教旧式体系，因三教仲裁之请托而再渡红尘，共同对抗胤天皇朝。在忧患深重伤期间，由三教执指挥十擘联军，一度攻克胤天殿，但旗武教场二战败北，反让正道陷于窘境。  ",
  "角色名:落烟霞\n登场:《霹雳狂刀之创世狂人》第23集\n退场:《霹雳狂刀之创世狂人》第26集\n诗号:\n能力:  王者之路留招者之一，号称“朱唇香衣”，居于高唐醉梦乡，为人高贵大方、但因天伦惨变而不相信男性。  ",
  "角色名:蔺天刑\n登场:\n退场:\n诗号:\n能力:武学  皇天之行  皇化魔赦\n备注:儒门之皇，昊正五道之皇儒尊驾，尊号“皇儒无上”，坐镇无上殿，修为高深莫测。  ",
  "角色名:龙斋十三介\n登场:\n退场:\n诗号:\n能力:武学  龙破川  血龙孤回  亢悔斋龙  千人破天斩\n备注:犬若丸向军神借调的东瀛高手，个性残虐、稳重少语，对命令绝对服从，加上有效的执行力，赢得军神的信任。左脸有一龙纹印记，当龙斋施出绝招之时，龙纹会绽放红光。  ",
  "角色名:律己秋\n登场:\n退场:\n诗号:律己宜带秋气，处事须带春风。\n能力:武学  袖盈乾坤\n备注:武道七修内七修第二代成员，习有“袖盈乾坤”，是结合暗器与奇门，演绎武学的七修门法之一。律己秋待人和善，自律甚严。  ",
  "角色名:留杀名家\n登场:《霹雳天启》第2集\n退场:《霹雳天启》第15集\n诗号:\n能力:  过去是血榜杀手第六人“吾唯一·斩马怒关”。能操弄空间、冻结时间，善用一口长柄的怒关刀。  ",
  "角色名:罗喉\n登场:《霹雳震寰宇之刀龙传说》第4集\n退场:《刀龙传说》第39集\n诗号:\n能力:  罗喉为上古传说中的枭雄  ",
  "角色名:令狐神逸\n登场:\n退场:\n诗号:\n能力:  令狐神逸，是钜锋里宗主，为一代名匠，善铸刀剑，本身刀剑造诣亦臻出神入化，所铸名器被时人称作“神之逸品”，剑子仙迹的古尘剑、疏楼龙宿的辟商剑以及余地、吹雪、遗珠等兵刃都出自其手，和西域神匠漆雕不朽齐名为“东令狐、西漆雕”。  ",
  "角色名:六铢衣\n登场:《霹雳天启》第6集\n退场:《霹雳震寰宇之刀龙传说》第1集\n诗号:\n能力:  高深莫测、超尘脱俗的修行者，本为追求剑道的顶尖剑客，后潜修仙道，超然物外，寄身云海顶峰，修得神皇之气，并于蟠龙古脉收伏金龙荒神。因死神复苏，六铢衣再受天命，承接天启金榜，口出惊世金言，再度踏入尘寰。  ",
  "角色名:獠娜\n登场:\n退场:\n诗号:\n能力:  东瀛青獠族最高女祭司，主张以杀立威，以杀戮施行自我霸道。  ",
  "角色名:六祸苍龙\n登场:\n退场:\n诗号:\n能力:  出身南武林，拥有极大名声，声势如日方中。  ",
  "角色名:灵山双叹\n登场:\n退场:\n诗号:\n能力:  灵山双叹在过去与三教主齐名，但是性情脾气却大不相同，两人虽是老先觉，但是整天斗气拌嘴，脾性如孩童般古灵精怪，无法以常理视之。  ",
  "角色名:蔺无双\n登场:\n退场:\n诗号:\n能力:  道门先天，隐居于白云山浩然居，掌剑双修，实力仅次于练峨眉，是当世不凡的高手。为人孤傲、自信，了解自我的实力而立于顶峰，相信自我的能力，而缺乏变通。  ",
  "角色名:练峨眉\n登场:\n退场:\n诗号:\n能力:  道界一代女先天，修为已臻登仙之境，孤高皓洁，稳重沉静，知天命、识天机，一心求得仙道，透知天理与道界循环。  ",
  "角色名:掠食者\n登场:\n退场:\n诗号:\n能力:  王者之路中搏命的留招者，外表是茹毛饮血、身披兽皮的野人，擅长丛林战。  ",
  "角色名:老佛\n登场:《霹雳王朝》第25集\n退场:《霹雳幽灵箭II》第18集\n诗号:\n能力:  佛教元佛，禅理精湛，深明大义，与圣夫子、道尊并称三教主。  ",
  "角色名:罗观大僧正\n登场:《霹雳神州》第10集\n退场:《霹雳神州II之苍玄泣》第3集\n诗号:\n能力:  东瀛武学圣地比睿山的高僧，稳重且擅权谋心计。  ",
  "角色名:柳生剑影\n登场:\n退场:\n诗号:\n能力:  东瀛剑道第一人，对剑与剑道有着异乎常人的执著与洁癖，师承奇人千败一剑，毕生追求完美无瑕的剑法，将师传十三式万神劫去芜存菁至三招，再由第三式创出第四式的败亡之剑。  ",
  "角色名:南无君\n登场:《霹雳刀锋》第17集\n退场:《霹雳异数之万里征途》第19集\n诗号:\n能力:  南无君是师承策衍先座的四方无君之一，个性正直，与四无君也是同修，专精掌法。  ",
  "角色名:南宫布仁\n登场:\n退场:\n诗号:\n能力:武学  雷霆手  四绝火阵\n备注:世外书香五儒生之首，外号八音才子，擅长变换声音迷惑敌人，早年即叛出儒门改投合修会，更蒙骗同修百里抱信一同加入，因为夺取好友曹百哀所研发的千子弹，使合修会增添利器，凭此功劳提升阶级，地位直属于无人座。  ",
  "角色名:欧阳上智\n登场:《霹雳眼》第18集\n退场:《霹雳狂刀之创世狂人》第2集\n诗号:\n能力:武学  三泰阴指  破世阴字  破  凶  残  极  杀  哭  丧\n备注:素还真早期最棘手的敌人，也是霹雳史上堪称超级的智慧家与政治枭雄。凭着过人的智慧、网罗了武林高手成为欧阳世家的义子为己效命，开创欧阳世家的霸业。然而他的残忍无情以及为达目的不择手段的做事方法，却也引起正道人士的反感。  ",
  "角色名:欧阳琳\n登场:\n退场:《霹雳异数》第9集\n诗号:\n能力:  望云楼之主，本应为欧阳山庄之主的侄女，但与剑藏玄新婚之夜，欧阳山庄遭单锋剑尊所灭，为了报叔父之仇，不惜和兄长一同卧底，成为白骨灵车的部下。  ",
  "角色名:欧阳翎\n登场:\n退场:\n诗号:\n能力:  自幼就到苗疆学艺，面容姣好，原本为天下第一智——欧阳世家的杀手，某次进行任务时，因暗算史菁菁而被剑藏玄斩断双手，失血过多昏倒在路边，被冷剑白狐发现她身上有欧阳世家的半张家谱，冷剑白狐在取走家谱后将她弃置于某个山洞之中，接着又被毒瘾发作的金少爷侵犯，因而生下花非花与金小开这对兄妹。  ",
  "角色名:蟠龙邪尊\n登场:《霹雳外传之叶小钗传奇》第1集\n退场:《霹雳外传之叶小钗传奇》第6集\n诗号:\n能力:  本名诸葛锺心，东武林巫石门之主，为人奸险狠辣。  ",
  "角色名:蒲月长敬\n登场:《霹雳战元史之天竞鏖锋》第14集\n退场:《霹雳战元史之天竞鏖锋》第17集\n诗号:\n能力:武学  双刀邀月\n备注:缯家十卫士之一，擅使袖里双刀，个性冲动，在巡守苦具地时遇上初来乍到的素还真等人。后在迢五路比斗中，代表辟兵缯氏率先出战麻氏代表薄棠。岂料双刀不敌薄刃，意外遭薄棠措手所杀。  ",
  "角色名:凭风一刀\n登场:《霹雳战元史之动机风云》第38集\n退场:《霹雳惊鸿之刀剑春秋》第4集\n诗号:\n能力:武学  一刀风快\n备注:武道七修中用刀第二代，个性火爆，作风直接，常惹事但也勇于承认错误。快刀难容恶行，曾参与围杀楼至韦驮的行列，以及烽火鉴兵台名器观论盛会。  ",
  "角色名:皮鼓师\n登场:《霹雳皇朝之龙城圣影》第21集\n退场:《霹雳兵燹之刀戟戡魔录》第20集\n诗号:\n能力:武学  风雷吞月  御天十方  烽烟万里扬  八衡法耳  懵懵之声  辟散星雨  阵法  八卦鼓阵  十道灭元阵\n备注:皮鼓师本名贺长龄，长相俊秀，虽与父亲世交之女琴绝弦有感情，却又跟继母骨箫有不伦关系。因此被骨箫找来令狐神逸取下他的人皮，弃置瀚海原始林，失去一身皮囊的贺长龄勉力取下一头山猪的皮缝合自身，才保住性命。但也自惭行秽，从此绝迹江湖，也对人抱着强烈的不信任与疏离感，喜怒无定。  ",
  "角色名:毘非笑\n登场:\n退场:  武学  噬魂催魄  独掌双绝  风绝掌鸣  冥魁独尊  鬼泣阴海  绝冥阴  绝风鸣  绝风鸣掌  绝鸣阴掌  独步绝掌\n诗号:绝临日月吟啸驰。\n能力:武学  噬魂催魄  独掌双绝  风绝掌鸣  冥魁独尊  鬼泣阴海  绝冥阴  绝风鸣  绝风鸣掌  绝鸣阴掌  独步绝掌\n备注:无赦天靡毘非笑出身于西南一隅的黑夷族，是该族之长，也是真正知晓六祸苍龙造天计划实际意图的死党。  ",
  "角色名:破玄奇\n登场:《霹雳兵燹之刀戟戡魔录II》第3集\n退场:\n诗号:\n能力:武学  回力掌第一式  吞四海  伤五绝  回力掌第二式  伤五劳  败六腑  斩六筋  回力掌第三式  断九脉  回力掌连环式  狂龙怒吼  辟山翻海  醉剑绝式  清清白白白城舆  朝朝暮暮慕少艾\n备注:罪恶坑第三恶首，习有回力掌。虽为恶人但也并非真的穷凶恶极，时常与老大狂龙一声笑斗嘴耍宝。  ",
  "角色名:容正弘\n登场:《霹雳劫》第9集\n退场:《霹雳劫》第17集\n诗号:\n能力:  集境三宫六殿十八楼之“昭天楼”楼主。  ",
  "角色名:谈无欲\n登场:《霹雳眼》第1集\n退场:\n诗号:真神真圣亦真仙，通儒通道是通贤；脑中玄机用不尽，统辖文武半边天。\n能力:武学  明圣剑法  穿石指  抓风成石  铁喉神功  铁口涎  挪移大法  万点金星  千里传声  借木移形  经天长虹  乾坤无量·光照大千  披云摘星  冰凝千峰流  七星掌  窃地补天  才子剑  月虹流岳  月影千峰  凤流啸天  四象无形步  吸星之招·流月飞虹  伏魔手  俱神凝体  三才开光  极阳真火印  云碎岳断无极掌  文武一贯·三昧真神剑  阵法  诛殛掠邪七曜阵  天枢点光  天璇移斗  天玑擘空  天权净邪  玉衡耀华  开阳朗照  瑶光交辉\n备注:即便因天命而亡，其精神与遗策仍如影随形跟着素还真，是霹雳系列的决策之王。隐藏的第四大主角。  ",
  "角色名:他化阐提\n登场:《霹雳兵燹之圣魔战印》第11集\n退场:《霹雳兵燹之问鼎天下》第20集\n诗号:神魔失界，万世混茫，血劫启战，一统洪荒。\n能力:武学  息兵·征命  魂葬·六度尽灭  蚀髓·葬骨  骨葬·竭髓蚀体  九焰燎原  血涛九原  血葬·厉魂泣艳  万魔天劫\n备注:魔城之主，个性阴沉莫测，坐于象罔之眼俯瞰天下局势，擅于权谋算计，魔性十足，带领天阎魔城与龠胜明峦延续上古圣魔之战，运筹太荒神决。虽是代表魔之一方，但他化阐提重兄弟之情，也是一位善待部下的君王，所有心机手段一致对外，只要是敌人，绝不留情。  ",
  "角色名:唐龙剑云\n登场:《霹雳外传之叶小钗传奇》第1集\n退场:《霹雳幽灵箭II》第3集\n诗号:\n能力:武学  釜底抽薪\n备注:东武林唐皇教之主，为人年轻气盛且个性急躁，坐拥五大神器中的七两薄斧，一直试图搜罗五大神器称霸东武林。  ",
  "角色名:天之佛\n登场:《霹雳战元史之动机风云》第4集\n退场:《霹雳战元史之动机风云》第39集\n诗号:七情不昧四重恩，八筏常归十界魂。负业诸尘贤劫渡，无边水月大千存。\n能力:武学  禅天九定  少光辟晦  无量光寂  少净破障  无量净乐  遍净昙华释大千  极光净土遍法\n备注:天佛原乡最高象征，本名楼至韦驮。拥有化分五相渡世之能，对于罪业有高度自觉与自主力，乃以背负万罪、发无上愿力闻名的罪身佛。生有一子魔皇，持有兵器奥义吠陀。  ",
  "角色名:天之厉\n登场:《霹雳战元史之动机风云》第1集\n退场:\n诗号:双掌虽空，世界在吾手上，身虽不动，天地因吾战栗。\n能力:武学  鬼潮万宗灭  厉神伐天纲  天溺之瀑  万魔独天·无神迹  天之冥谛  鬼潮怒焰  天异变相\n备注:元种八厉中的“天之厉”，因双足封印未解而无法自由行动。之后以完全型态，于无向经纬击杀天佛二相（招提僧、慧宁师），但却遭到水嫣柔之机关所困，施力抗衡时红潮来袭，就在紧张时刻、地之厉元魄回归，天之厉功力大增，突破机关逃脱。尔后带领山之厉魑岳及雷之厉克灾孽主攻打天佛原乡，三人一抗天佛五相、剑布衣、鹤舟先生与蕴果谛魂等人，天之厉以惊人之力再度击杀天佛五相，并抢得“太素之剑”奥义吠陀。尔后以帝祸邪九世之姿态再现武林，乘坐黑色马车，将山之厉及水之厉之厉元吸出。  ",
  "角色名:皆杀·拖刀者\n登场:《霹雳经武纪之枭皇论战》第19集\n退场:《霹雳经武纪之枭皇论战》第26集\n诗号:进一刀、退一刀，吾只一刀，谁敢挡刀。生也杀、死也杀，吾名皆杀，无人不杀。\n能力:武学  灭情七诀  忘情一斩·天地不留\n备注:火宅佛狱四邪谛之一，曾助咒世主封印魔王子。长相龇牙裂嘴、凶残狂暴，是四邪谛中对咒世主最为忠心的一人，忠诚度不亚于守护者，曾与深流君、红狐九尾、风世魃鬼联手封印被称作“异数”的魔王子，但也因为术法效力化身木像，直到魔王子因赤睛受伤失踪才为排解焦躁感将四人解封。  ",
  "角色名:天策真龙\n登场:  重生  《霹雳图腾》第10集\n退场:\n诗号:  消逝  《霹雳封灵岛》第3集\n能力:\n备注:    传说在上古时期带领七星从天而降在一天内毁灭全武林，后又在一天内重新建造武林并成为天策皇朝龙主。在当世五方星主开启引灵山陵墓后即将重新建造上古时期的龙图霸业。人物个性会随着七星星灵而变化个性，五星时期骁勇好战过于骄傲、六星时期温和仁慈优柔寡断、七星时期天下无敌，由于力量失控导致性情残暴。  ",
  "角色名:天残武祖\n登场:\n退场:\n诗号:\n能力:  天残武祖是少见的武术天才，自七岁起每年创制一门绝世武功，合称为惊天六十四式，曾办过“远生道武学讲座会”将罕世武学传授他人，素还真、慈海渡者及孤愁先生都曾与会，并蒙他传授“百川汇宗”一招，麾下还有骁勇善战的八大战将，名威显赫一时。  ",
  "角色名:天踦爵\n登场:\n退场:\n诗号:\n能力:武学  紫龙动霄  惊风破雨怒龙腾  怒龙震  百里炽焰  陷龙震·寒霜百厉  殊华圣光  轰动武林\n备注:真实身份为素还真。手持玉晶杖，怀揣流金时计，一派西洋爵士作风的神秘人物，其身份来历成谜，个性幽默风趣，对瞬息万变的武林事，有相当的掌握程度。对血傀师背后的力量，似乎也有几分了解。  ",
  "角色名:螣邪郎\n登场:\n退场:\n诗号:\n能力:  螣邪郎本为异度魔界前任战神银锽朱武与九祸所生，但因鬼族之王与碧女所生的银锽黥武天生残疾，所以母亲九祸在他出生时，便将他和同日诞下的银锽黥武狸猫换太子，好保持鬼族王脉的力量，并将银锽黥武交给朱武扶养，在嫁给鬼族之王后用继母的身份抚育螣邪郎，并又诞下赦生童子这个同父弟弟。  ",
  "角色名:天险刀藏\n登场:\n退场:\n诗号:\n能力:  原名缚刃边城，藏进钜锋里改名作天险刀藏。  ",
  "角色名:唐七七\n登场:\n退场:\n诗号:\n能力:  暗器世家唐门的幺女。  ",
  "角色名:谈笑眉\n登场:《霹雳眼》第1集\n退场:《霹雳至尊》第2集\n诗号:\n能力:  月才子谈无欲之妹，并先后嫁予一代枭雄欧阳上智、武林至尊接天道之妻。  ",
  "角色名:无忌天子\n登场:《霹雳锋火录》第5集\n退场:《创世狂人》第4集\n诗号:\n能力:  无忌天子生于乱世，一生喜好和平，不忍苍生涂炭，于周游列国时结识六位奇人异士，共同创建天外方界。  ",
  "角色名:无计先生\n登场:\n退场:\n诗号:腰悬衡世鼓，无计入江湖，敢问先生道，揲蓍定雄图。\n能力:阵术  擎羊煞天阵  四影困阴法  咒术  阴阳借术·纸人寄魂  紫宸要术\n备注:脸上黥绘有特异图腾的奇人，居住在遇贤亭，笃信天道轮回与因果论，冷眼旁观局势变化，更精通揲蓍卜易之术，曾出言警示师尹。其腰悬衡世鼓，手持蓍草棒，意在探赜索隐，以定天下之吉凶。  ",
  "角色名:无明法业\n登场:\n退场:\n诗号:\n能力:  天阎魔城大将，骁勇善战，一身蛮力，有着刀枪不入之躯，脾气冲横，相当难缠。在三方势力围攻魔城一役，独战靖沧浪，后更闯入死国，以月声要胁无界尊皇加入魔之一方，对决叛徒阿修罗。  ",
  "角色名:无惑渡迷\n登场:\n退场:\n诗号:九重天，般若多闻世间道；八正道，法轮常转无量天。\n能力:武学  惑界刑判  障迷无戒  六道灭根渡轮回\n备注:殊印塔三聚僧老为首者，气态威严骄横，对于犯戒者的标准甚为严苛，认为在殊印塔留招者既为主动受到制约，便必须诚心受刑，方不负佛门认定的品德。而对于地位越高的佛门修者，标准与看法也会更加尖刻，因此处处针对一页书。  ",
  "角色名:苇江渡\n登场:\n退场:\n诗号:万象一禅通，须弥一介同，群龙一苇渡，净眼一尘空。\n能力:武学  云龙渡海[注 7]\n备注:曾与剑通慧同列“天王四护”的佛修者，因先前判断有误，将“毁住藏经”交给血刹如来，导致佛愆现世，故自请暂退四护之位，并谨慎调查剑通慧身亡之谜，避免误判之事重蹈覆辙。其代表色为红色，法器是缠在手上的“赤龙”。  ",
  "角色名:万古长空\n登场:\n退场:\n诗号:\n能力:  夜族千年来最强传说，得到太阳之子的认可后，解除叛民身份，赐名万古长空。  ",
  "角色名:无执相\n登场:《霹雳震寰宇之龙战八荒》第3集\n退场:《霹雳震寰宇之龙战八荒》第17集\n诗号:\n能力:  火宅佛狱凯旋侯的副体。  ",
  "角色名:问天敌\n登场:《霹雳震寰宇之刀龙传说》第7集\n退场:《霹雳震寰宇之刀龙传说》第33集\n诗号:\n能力:  昔日灭境枭雄，曾为一页书冒充在霹雳谜城时登场，于刀龙传说中真正的问天敌再度出武林  ",
  "角色名:问天谴\n登场:\n退场:\n诗号:\n能力:  为阿鼻地狱岛现任二岛主及执判长。为人刚正不阿、铁面无私，平日虽不苟言笑、眉宇深锁，但在私底下，对人情义理及兄弟之情极为重视，更十分疼爱其侄三口剑。武艺超凡，能以自身正气寄托于剑，负责缉捕司命拘役使等无法擒拿的武林高手。  ",
  "角色名:舞造论\n登场:\n退场:\n诗号:\n能力:  舞造论，秋水宴创办人，曾创出享誉江湖的解脱剑诀，毕生钻研剑理且不定时召开秋水宴，广邀剑界名人参与，综合百家之长，穷毕生之力撰写《王者之路》、《钜铸录》、《沧海剑理》写三本剑法名著，其中专述剑招的《王者之路》更是当时各家欲夺的至宝。  ",
  "角色名:卧龙行\n登场:\n退场:\n诗号:\n能力:  苦境奇人，拥有太乙逆算预言之能，与来自道境的昭穆尊、尹秋君交好，曾经在伏龙壁写下百年预言诗，精准预言江湖百年大计，使鬼梁天下在取得风云天地图后按图索骥以此行事，一度声势大好。  ",
  "角色名:无悼一人庸\n登场:\n退场:\n诗号:\n能力:  原名患剑，是阴阳海双锋传奇之一，生性仁慈，但因为幼子康儿身患奇症不得不杀人取血以活命，后受到好友贾命公唆使与皇甫世家求药，因不明药效，以为康儿绝去呼吸即为身死，与妻子刀瘟屠灭皇甫世家。  ",
  "角色名:卧佛一枕眠\n登场:《霹雳神州II之苍玄泣》第8集\n退场:《霹雳天启》第9集\n诗号:\n能力:  继慈航渡为灭境掌轮，与凤凰鸣并称灭轮双擘。卧佛一枕眠本是邪灵出身却心慕佛法而遁入空门，继慈航渡成为灭境新任掌轮，积极与邪灵交涉换取了灭境多年和平，主持饱经战火的灭轮事务。  ",
  "角色名:问剑孤鸣\n登场:\n退场:\n诗号:\n能力:  本名史波浪，师承仇戴天，练有死神剑式，化身孤傲冷漠的白发剑客。  ",
  "角色名:悟僧痴迷\n登场:\n退场:\n诗号:\n能力:  本名十诛戮神狩，擅长金刚顶一类的头上功夫，原与戤戮狂狶结拜四处作恶，后被万圣岩擒捉，接受佛法点化而幡然悔悟，于七重台上参悟多年，直到遇见一页书点破迷津方得证道。后随侍在一页书身边，貌若怒目金刚，木讷刚毅。  ",
  "角色名:卫无私\n登场:\n退场:\n诗号:\n能力:  法门首徒，为人严正，但流于刚愎自用，以自己所认定的正义为正义，处事狠辣无情，不留余地。个性偏执，执法往往矫枉过正，因此备受争议。  ",
  "角色名:宇文知日\n登场:《霹雳外传之叶小钗传奇》第1集\n退场:《霹雳幽灵箭II》第3集\n诗号:\n能力:武学  风檐展书读  天道无亲·惟德一·斩  破秽式\n备注:东武林宇文山庄之主，为人老谋深算，坐拥五大神器之首十方灵动而成各方焦点。  ",
  "角色名:羽飞天\n登场:\n退场:\n诗号:\n能力:武学  夺月之射\n备注:天工八月泉四名天女之一，象征五音中的羽弦。本名宫月惜灵，昔为报仇而与恶魔交易，却因心软未下杀手，被恶魔视为毁约将之束缚于八月泉。脱困后于羿村与孤竹隐龙再度重逢，进而产生情愫，无奈最后落入魈瑶手中，惨遭取代。  ",
  "角色名:玉藻\n登场:\n退场:\n诗号:\n能力:武学  化神诀\n备注:军神贴身副官兼秘书，负责处理神风营大小事务，行事严谨有度，一切遵照既定行程安排，十足公务员性格，倘若有突发状况打乱排程，便会因此生气抓狂。  ",
  "角色名:御神风\n登场:\n退场:\n诗号:\n能力:武学  风檐展书读  天道无亲·惟德一·斩  破秽式\n备注:侠邪·御神风，尝于佛愆鬼如来千罪血祭时救下罪恶之都中存有善心的号天穷。  ",
  "角色名:欲明王\n登场:\n退场:\n诗号:淑世大智慧，悯世大慈悲，救世大无畏，广世大威仪。\n能力:武学  吾佛无法相  咒术  地水火风·四大皆空·还诸本相·逆命淬阳  双相合一：\n备注:灭境定·俱解脱·摩诃止观[注 8]  三相合一  具足三千戒[注 9]  诸行无常·诸法无我·三学无漏[注 10]  四相合招  琉璃炽圣·罗汉开道·如来大悲·究竟涅槃    天佛五相之一，样貌为愤怒明王相，风格稳健而有霸气，老成中带有无比严厉的气质，气势慑人，在会议中常担任决断的一方。曾代表天之佛身份踏入中阴界一会宙王，以掌握魔皇的生死之谜。  ",
  "角色名:欲娇奴\n登场:\n退场:\n诗号:上穷碧落下黄泉，至美天听，唯有勾魂声。\n能力:控魂术  囚魂牢术  奈落挽魂术  弑血蛊网\n备注:宙王的宠妾，是中阴界五大家族中的绵氏控灵者，性狐媚，手段阴柔、善交际，颇具智慧与能力，是少数能让王采纳意见之人，实际地位不低于后掌。  ",
  "角色名:欲裁恨\n登场:\n退场:\n诗号:\n能力:  出身中阴界五大控灵家族的奈落绵氏，因其姊绵妃为宙王所宠爱，一夕之间被王从低位拔擢为重臣，所以对于周遭的人事物怀有不安全感。对于情感，外在表现较为压抑，沉默不语时，会不停摇着手中的玳瑁天鹅毛扇。  ",
  "角色名:缘醉莫求\n登场:\n退场:\n诗号:大梦初醒，难得糊涂。\n能力:武学  醉看秋水不兴波\n备注:来历不明的佛门俗家弟子，携酒背剑的修行者，手持兵器“众生相”，喜好吟唱劝世歌，常言“大梦初醒，难得糊涂”，遂以醉为缘法而修行悟禅。  ",
  "角色名:蕴果谛魂\n登场:\n退场:\n诗号:蕴果是非因，谛魂千万身，原乡飘渺处，天佛度贪嗔。\n能力:武学  八苦谛听  普行胎狱度众生  无凭六道常观老  大愿慈航愈众病  萍登彼岸恶根死  慧心勘破爱别离  善缘了却怨憎会  喜舍解脱求不得  妄执销破五蕴空  佛留慈悲·剑渡众生\n备注:初代圣魔大战的领导者，法相庄严，身披白裟，性情刚毅敦厚，亦为枯禅轮杵及众生相的原持有者。  ",
  "角色名:云沧海\n登场:\n退场:\n诗号:既云天地共歌吟，尘海当如云海深，显密何须分别铸，同根百炼造甘霖。\n能力:武学  云沧十破  天裟广化  云龙渡海[注 11]  泓影涤千尘\n备注:一页书于天佛原乡结识的佛修者，受“佛炼铸天术”之手法重塑武骨，佛缘深植，为人孤僻清寡，为调查忏罪之墙血案而离开初禅修界，正式涉足武林。其身披“云裟”，是云沧海专属的披风状法器。真实身份为雨钟三千楼少主。  ",
  "角色名:元祸天荒\n登场:\n退场:\n诗号:\n能力:  属魔界五大先锋之一，负责镇守天荒道，当樱花开始飘落，即为元祸天荒杀人的象征，搭配具有弓、刀、双刀三种型态的天荒刀，武技变化繁复，使人防不胜防。  ",
  "角色名:玉阳君\n登场:\n退场:\n诗号:\n能力:  本名方城子，因觊觎枉沙城绝学沙溶神法而入城屠杀夺宝，并算计替枉沙城伸张正义的浩然双锋仇戴天、岳云乐反目互击两败俱伤。  ",
  "角色名:悦兰芳\n登场:  作为光影  《霹雳英雄榜之争王记》第8集\n退场:  《霹雳封灵岛》第20集\n诗号:\n能力:  真实身份为汗青编御主及五方主星之西白虎，具有强烈野心，城府深沉。  ",
  "角色名:  正式登场  《霹雳英雄榜之争王记》第19集\n登场:",
  "角色名:欲苍穹\n登场:《霹雳异数之龙图霸业》第38集\n退场:《霹雳兵燹》第11集\n诗号:忘心无我欲沈醉，情游天涯笑苍穹； 潮浪不识刀中趣，卧看浊世现云踪。\n能力:  欲苍穹为封灵岛百战决十大高手之一，刀法已臻无心无刀的绝代高人。不带兵刃，纯以手指运化罕世之招，所使招式刀里藏剑式，剑里运刀招。出身苗疆，个性中有着爱之欲其生、恶之欲其死的强烈情感。  ",
  "角色名:月漩涡\n登场:\n退场:\n诗号:\n能力:  夜泷月漩涡，半人半鬼的月下杀手，右脸上有巨大伤痕，双眼在发怒时会转为鲜红，擅长枪铳与剑术，喜隐身于月色之下。与忘残年长驻于早已荒凉的荒城中，因曾受城主剑师萧振岳恩惠，为报恩而住下，其间，因与忘残年、箫中剑（当时尚称为萧无人）意气相投，而成为结义兄弟，排行老三。  ",
  "角色名:羽人非獍\n登场:\n退场:\n诗号:\n能力:  原名羽人枭獍，名列忠烈王府牌匾第一人，与燕归人合称为“刀戟”。出身于不见天日罪恶坑，受月不全孤独缺指导，习有绝学六翼刀法。  ",
  "角色名:宇文天\n登场:《霹雳金光》第9集\n退场:《霹雳至尊》第12集\n诗号:\n能力:  黄山八珠联中的黑牛，曾化身白骨灵车策动多起阴谋，引动江湖大乱，但逼出素还真后气势一落千丈，虽被谈无欲列为天下第一剑，且亟欲打败素还真与欧阳上智称霸武林，表现却江河日下。  ",
  "角色名:鱼晚儿\n登场:\n退场:\n诗号:金有进而不出，银有获而无施。\n能力:  一名酒党出生的妙龄女子，个性古灵精怪、爱钱如命，聪明伶俐且精明干练，赌技、酒量好。擅长轻功、暗器，在紫宫世家比武招亲，因遭对手殷芊婳金钱的诱惑而落败。  ",
  "角色名:云庐剑僧\n登场:\n退场:\n诗号:\n能力:  百年前曾代表佛界出战魔界斩海的剑僧，真正身份为耶摩天高僧摩诃台。  ",
  "角色名:云岫君\n登场:《霹雳幽灵箭》第2集\n退场:《霹雳英雄榜》第37集\n诗号:\n能力:  修行于灭境西丘的先天者，与海殇君、山涛君合称西丘三君，与山涛君共谋执掌天下。  ",
  "角色名:云徽子\n登场:\n退场:\n诗号:  玉树溶溶仙气深，含光混俗似无心长愁忽作鹤飞去，一片孤云何处寻。  举沧浪，浊尘缨，清越嵯峨忘青冥。逸翾拂霄凌云汉，侠路难，蜀道行。  定乾坤，登仙道，云海无极；震寰宇，领玉旨，奉天降杀；撼八荒，降神谕，任吾逍遥。[注 12]\n能力:武学  天渺云徽  天无二月  天转乾坤  天焰怒织  天地归一·万法无边  天地行风  乘天地·御六气·至人无己  天地正法  天行日月  天风寄影  天罡玉旨  天圣罡风  神皇定涛  天剑禁招·向天借剑  睥睨寰宇荡红尘·万里天剑尽苍穹  傲视苍穹震寰宇·万剑天下破神罡·神皇无极·天荒无尽  斩魔录心法  第一章·启彻明晖  第三章·明道仙辉  第七章·毁天灭道  功体  先天·神皇之气  阴阳双极体  术法  身外云身术  慧眼穿云  昊天三光净魔阵  仙影留踪术  天王罪罚阵  九玄凌霄阶\n备注:本名默云徽，称号迹君，别称云尊（属下尊称）、小默云（天迹称）、云者（暗影称）、小徽徽（劫红颜称）。  ",
  "角色名:驺山棋一\n登场:\n退场:\n诗号:\n能力:武学  唤阴大法  破光咒  如如生·起法藏  流魂告命·日月掩岁  血咒微命·三寸刻心  咒法  玄阴六奇阵\n备注:隐居驺山洗棋亭的异人，天生命格特殊，以筑墓盖命之法，为自己盖命而避开天命轮回。棋一本身命带阴符，擅使阴力，具有特异奇能以及经天纬地之才。在洗棋亭祭告天地后，正式宣示入世，辅佐槐破梦创建胤天皇朝，成就一番霸业。  ",
  "角色名:缯玄应\n登场:\n退场:\n诗号:\n能力:控魂术  五相为枷·五常为索·上天下地·拘魂\n备注:中阴界五大控灵家族“辟兵缯氏”当家，昔日为巩固家族的声势，不惜献女媚王，虽如愿让长女成为后掌，辟兵家受封控灵之首，但却也造就缯家姊妹的悲剧，以及与麻家的难解宿愿，让缯玄应懊悔不已。  ",
  "角色名:缯翚翟\n登场:\n退场:\n诗号:\n能力:  中阴界皇后，为辟兵缯玄应之长女，掌握中阴界阴魂事务。性格外冷，不苟言笑，虽贵为后掌，却不受王的宠幸，更在宙王的命令下，被迫与亲生儿子分开，然其内心渴望能将爱子送离中阴界，远离权力斗争的漩涡，因而与素还真进行交涉。  ",
  "角色名:缯鸣夏\n登场:\n退场:\n诗号:\n能力:  中阴界控灵家族辟兵缯家小女儿，独钟杜鹃花，本性淳良，知书达礼，更有着倾城之姿，同时受到宙王俩兄弟的喜爱。却因麻净自杀身亡，感到愧疚而自逐恶脏坑，甘愿一生不哀不乐，从此做一个无心无情之人，因此被称为不笑夫人。  ",
  "角色名:尊武封端\n登场:\n退场:\n诗号:\n能力:武学  无门横练  金衫拆岳  横炼金刚  横链锁千江\n备注:来历未明的神秘武者，面色惨白且带些许彩纹，其身负武学出自“武道七修”，类似外家横练的硬功性质，为了武学外流之事找上野胡禅，打算将野胡禅所习得的同源武功废除。  ",
  "角色名:紫阳子\n登场:\n退场:《霹雳英雄榜》第28集\n诗号:\n能力:  玄天六阳之首。  因遭到三世道君之招【三世冰封】而被冰封，和血阳子最先运功解除，待人和善，在他身上几乎找不到一丝霸气，常与血阳子在一起，后来血阳子身亡后，协助合修会对付血道天宫，后来被照世明灯救至黑暗道，遭遇盼梦圆前来寻仇，因而被杀\n备注:",
  "角色名:醉饮黄龙\n登场:《霹雳震寰宇之刀龙传说》第22集\n退场:《霹雳震寰宇之龙战八荒》第19集\n诗号:\n能力:  原为上天界御天五龙之首的天尊皇胤，数百年前为追捕从上天界逃狱的邪天御武及楔子而来到苦境。但因意外坠落而失去记忆。  ",
  "角色名:醉轻侯\n登场:\n退场:\n诗号:\n能力:  醉轻侯为千飞岛岛主，千飞剑法的创造者。  ",
  "角色名:最光阴\n登场:《霹雳惊鸿之刀剑春秋》第20章\n退场:\n诗号:\n能力:武学  蚀剑刀法“天狗吞月”  掠影击  掠影化  掠影破  时间刀法\n备注:五大传奇之一的北狗。武器为“兽骨刀呒狗利”  ",
];
final List<String> software = [
  r"在计算机科学中只有两件难事：缓存无效和命名。",
  r"首先使更改变得容易（警告：这可能很难），然后使更改变得容易。",
  r"简单性是可靠性的前提。",
  r"今天的大多数软件都非常像埃及的金字塔，成千上万的砖块彼此叠放，没有结构上的完整性，只是由蛮力和成千上万的奴隶完成的。",
  r"没有什么比临时破解更永久的了。",
  r"如果有人声称自己拥有完美的编程语言，那么他要么是傻瓜，要么是推销员，要么两者都是。",
  r"过早的优化是万恶之源。",
  r"我不是一个优秀的程序员。我只是一个有良好习惯的优秀程序员。",
  r"计算机科学中的任何问题都可以通过另一种间接解决方案来解决。",
  r"代码的前90％占开发时间的前90％。剩下的10％的代码占了开发时间的90％。",
  r"除了手枪和龙舌兰酒之外，计算机使您比其他任何发明都能更快地犯更多错误。",
  r"语言只有两种：人们抱怨的语言和没人使用的语言。",
  r"您可以批量生产硬件；您无法批量生产软件；你不能大量生产人类的思想。",
  r"没有什么比高效地做事更无用了，根本不应该做。",
  r"任何傻瓜都可以编写计算机可以理解的代码。好的程序员编写人类可以理解的代码。",
  r"读取（代码）与写入所花费的时间之比远超过10：1…（因此）使其易于阅读，从而易于编写。",
  r"程序应被人类读取，并且只能由计算机执行。",
  r"编程很有趣，加密也很有趣。但是，不应将它们组合在一起。",
  r"代码就像幽默。当您必须解释时，这很糟糕。",
  r"谈话很便宜。给我看代码。",
  r"我主要考虑前提条件，并检查构造函数和函数开头中的内容。",
  r"质量是免费的，但仅限于那些愿意为此付出高昂代价的人。",
  r"通常，软件系统只有在实际应用中被使用并且反复失败后才能正常运行。",
  r"有时一个简短的想法可以带来惊人的想法。	Sometimes a short thought can bring amazing ideas.",
  r"计算机科学中只有两件难事：缓存失效和命名事物。	There are only two hard things in Computer Science: cache invalidation and naming things.",
  r"我们都同意：好名字永远是最重要的。让我们找到他们。	We all agree: a good name is always the most important thing. Let’s find them.",
  r"缓存很性感。他们是一夜情。我们需要在长期关系中避免它们。	Caches are sexy. They are a one-night stand. We need to avoid them in a long-term relationship.",
  r"使非法状态不可表示。	Make illegal states unrepresentable.",
  r"变异就是进化。它是由查尔斯达尔文爵士提出的，我们在软件行业中使用它。但有一点是……	To mutate is to evolve. It was proposed by Sir Charles Darwin and we use it in the software industry. But something is…",
  r"首先使更改变得简单（警告：这可能很难），然后进行简单的更改。	First make the change easy (warning: this might be hard), then make the easy change.",
  r"当一个对象改变它的状态时，最好的解决办法是改变属性，不是吗？	When an object changes its state the best solution is to change the attribute, isn’t it?",
  r"简单的事情应该简单，复杂的事情应该可行。	Simple things should be simple, complex things should be possible.",
  r"向对象添加持久性、序列化、显示、导入、导出代码会使其协议膨胀并带来……	Adding persistence, serialization, displaying, importing, exporting code to an object bloats its protocol and brings…",
  r"在软件可以重用之前，它首先必须是可用的。	Before software can be reusable it first has to be usable.",
  r"简单性是可靠性的先决条件。	Simplicity is prerequisite for reliability.",
  r"气味是代码中的某些结构，暗示（有时它们会尖叫）重构的可能性。	Smells are certain structures in the code that suggest (sometimes they scream for) the possibility of refactoring.",
  r"如何找到代码中有问题的部分	How to Find the Stinky parts of your Code",
  r"代码闻起来很糟糕。让我们看看如何改变香气。	The ",
  r"对象思维将我们的注意力集中在问题空间而不是解决方案空间。	Object thinking focuses our attention on the problem space rather than the solution space.",
  r"我 80% 的问题都是简单的逻辑错误。其余问题的 80% 是指针错误。剩下的问题就很难了。	80 percent of my problems are simple logic errors. 80 percent of the remaining problems are pointer errors. The remaining problems are hard.",
  r"编程语言是一种用于描述计算的符号系统。因此，一种有用的编程语言必须既适合描述（即适合程序的人类编写者和读者）又适合计算（即适合在计算机上高效实现）。但是人类和计算机是如此不同，以至于很难找到非常适合两者能力的符号设备。	A programming language is a system of notation for describing computations. A useful programming language must therefore be suited for both description (i.e., for human writers and readers of programs) and for computation (i.e., for efficient implementation on computers). But human beings and computers are so different that it is difficult to find notational devices that are well suited to the capabilities of both.",
  r"今天的大多数软件都非常像埃及金字塔，有数百万块砖相互堆叠，没有结构完整性，只是靠蛮力和成千上万的奴隶完成的。	Most software today is very much like an Egyptian pyramid with millions of bricks piled on top of each other, with no structural integrity, but just done by brute force and thousands of slaves.",
  r"如果我们希望用户喜欢我们的软件，我们应该将其设计为表现得像一个讨人喜欢的人。	If we want users to like our software, we should design it to behave like a likeable person.",
  r"概念完整性是系统设计中最重要的考虑因素。	Conceptual integrity is the most important consideration in system design.",
  r"子类不应总是共享其父类的所有特征，但会通过继承来实现。这会降低程序设计的灵活性。它还引入了在子类上调用无意义或导致错误的方法的可能性，因为这些方法不适用于子类。	Subclasses shouldn’t always share all characteristics of their parent class but will do so with inheritance. This can make a program’s design less flexible. It also introduces the possibility of calling methods on subclasses that don’t make sense or that cause errors because the methods don’t apply to the subclass.",
  r"受保护的属性非常适合封装和控制对我们的属性的访问。他们可能会警告我们……	Protected attributes are great for encapsulating and controlling access to our properties. They might be warning us for…",
  r"我们安慰自己的信念是，如果客户对他们所说的他们需要的东西感到满意，那么设计就会很好。客户改变对我们的要求是错的	We comfort ourselves with the belief that if the customers had just been happy with what they said they needed, the design would have been fine. It’s the customer’s fault for changing the requirements on us",
  r"我对 goto 语句不是很教条。我有一种不舒服的感觉，其他人正在把它变成一种宗教，好像编程的概念问题可以通过一个单一的技巧，通过一种简单的编码纪律形式来解决！	I am not terribly dogmatical about the goto statement. I have the uncomfortable feeling that others are making a religion out of it, as if the conceptual problems of programming could be solved by a single trick, by a simple form of coding discipline!",
  r"如果你今天可以完成今天的工作，但你这样做的方式明天不可能完成明天的工作，那么你就输了。	If you can get today’s work done today, but you do it in such a way that you can’t possibly get tomorrow’s work done tomorrow, then you lose.",
  r"你不能教初学者自上而下的编程，因为他们不知道哪一端在上。	You cannot teach beginners top-down programming, because they don’t know which end is up.",
  r"今天的编程是一场软件工程师之间的竞赛，他们努力构建更大更好的防白痴程序，而宇宙则试图生产更大更好的白痴。到目前为止，宇宙正在获胜。	Programming today is a race between software engineers striving to build bigger and better idiot-proof programs, and the Universe trying to produce bigger and better idiots. So far, the Universe is winning.",
  r"某些功能未按预期运行。可悲的是，大多数程序员都接受了它们。	Some functions do not behave as expected. Sadly, most programmers accept them.",
  r"不管你怎么看（DRY 或 laziness），想法都是一样的：让你的程序灵活。当变化来临时（它总是如此），你会更容易地改变它。	Either way you look at it (DRY or laziness), the idea is the same: make your program flexible. When change comes (and it always does), you’ll have a much easier time changing with it.",
  r"变量重用是我们在大块代码中看到的。	Variable reuse is something we see in big chunks of code.",
  r"重复是设计良好的系统的主要敌人。	Duplication is the primary enemy of a well-designed system.",
  r"乐观是编程的职业危害：反馈就是治疗。	Optimism is an occupational hazard of programming: feedback is the treatment.",
  r"诀窍是解决你遇到的问题，而不是你想要的问题。	The trick is to fix the problem you have, rather than the problem you want.",
  r"单身人士：万恶之源	Singleton: The Root of all Evil",
  r"允许的全局变量和假定的内存节省	Allowed global variables and supposed memory savings",
  r"面向对象的编程语言支持封装，从而提高了软件被重用、提炼、测试、维护和扩展的能力。只有在设计过程中最大限度地封装，才能实现这种支持的全部好处。	Object-oriented programming languages support encapsulation, thereby improving the ability of software to be reused, refined, tested, maintained, and extended. The full benefit of this support can only be realized if encapsulation is maximized during the design process.",
  r"初级程序员做的第一个练习。IDE、教程和高级开发人员一直在教他们这种反模式。	The first exercise junior programmers do. IDEs, tutorial and senior developers keep teaching them this anti-pattern.",
  r"软件团队最大的问题是确保每个人都了解其他人在做什么。-	The biggest issue on software teams is making sure everyone understands what everyone else is doing. -",
  r"将对象变量（实例变量）视为数据属性然后根据共享属性创建层次结构会产生错误。始终根据共享行为创建层次结构。	An error arises from treating object variables (instance variables) as if they were data attributes and then creating your hierarchy based on shared attributes. Always create hierarchies based on shared behaviors, side.",
  r"正在寻找具体的方法实现？来回，上下。	Searching for a concrete method implementation? Go back and forth, up and down.",
  r"您可以通过提及另一种计算机语言来证明任何事情。	You can prove anything by mentioning another computer language.",
  r"计算的目的是洞察力，而不是数字。	The purpose of computing is insight, not numbers.",
  r"告诉程序员已经有一个库可以做 X 就像告诉词曲作者那里已经有一首关于爱情的歌。	Telling a programmer there’s already a library to do X is like telling a songwriter there’s already a song about love.",
  r"在纯函数式程序中，[constant] 的值永远不会改变，但它一直在改变！悖论！	In a purely functional program, the value of a [constant] never changes, and yet, it changes all the time! A paradox!",
  r"当有人说，“我想要一种编程语言，我只需要说出我想做的事情，”给他一个棒棒糖。	When someone says, “I want a programming language in which I need only say what I want done,” give him a lollipop.",
  r"数据结构只是一种愚蠢的编程语言。	A data structure is just a stupid programming language.",
  r"黑客是傲慢的极客浪漫主义者。他们缺乏细心探究的精神。	Hackers are arrogant geek romantics. They lack the attentive spirit of inquiry.",
  r"编译器比我们聪明。在周五晚上的生产部署中，他们背叛了我们。	Compilers are smarter than us. On a Friday night production deploy they betray us.",
  r"软件是一种气体；它会膨胀以填充其容器。	Software is a gas; it expands to fill its container.",
  r"遗产。具体类。重复使用。一个奇妙的混合。	Inheritance. Concrete classes. Reuse. A fantastic mix up.",
  r"科学是我们理解得足以向计算机解释的东西。艺术就是我们所做的一切。	Science is what we understand well enough to explain to a computer. Art is everything else we do.",
  r"您编写的代码使您成为程序员。您删除的代码使您成为一个好人。您不必编写的代码使您成为一个伟大的代码。	The code you write makes you a programmer. The code you delete makes you a good one. The code you don’t have to write makes you a great one.",
  r"最终源代码是真正的软件设计。	Final source code is the real software design.",
  r"我们看到多少次惰性参数名称？	How many times do we see lazy argument names?",
  r"了解不要立即添加太多功能，并构建和测试核心思想。	Learn not to add too many features right away, and get the core idea built and tested.",
  r"如果它不起作用，那么它不起作用的速度有多快都没有关系。	If it doesn’t work, it doesn’t matter how fast it doesn’t work.",
  r"与布尔值比较时，我们执行魔法转换并获得意想不到的结果	When comparing to booleans, we perform magic castings and get unexpected results",
  r"编程的主要活动不是新的独立程序的产生，而是现有程序的集成、修改和解释。	The main activity of programming is not the origination of new independent programs, but in the integration, modification, and explanation of existing ones.",
  r"我无法抗拒放入空引用的诱惑，只是因为它很容易实现。这导致了无数的错误、漏洞和系统崩溃，在过去四十年中可能造成了十亿美元的痛苦和损失。	I couldn’t resist the temptation to put in a null reference, simply because it was so easy to implement. This has led to innumerable errors, vulnerabilities, and system crashes, which have probably caused a billion dollars of pain and damage in the last forty years.",
  r"-Null 用作不同的标志。它可以暗示不存在、未定义的值、错误等。多重语义导致……	Null is using as different flags. It can hint an absence, an undefined value, en error etc. Multiple semantics lead to…",
  r"在没有合同的情况下编写课程类似于在没有规范的情况下生产工程组件（电路、VLSI（超大规模集成）芯片、桥、引擎……）。没有专业工程师甚至会考虑这个想法。	Writing a class without its contract would be similar to producing an engineering component (electrical circuit, VLSI (Very Large Scale Integration) chip, bridge, engine…) without a spec. No professional engineer would even consider the idea.",
  r"编程不是打字，而是思考。	Programming is not about typing, it’s about thinking.",
  r"没有什么比临时黑客更永久的了。	There’s nothing more permanent than a temporary hack.",
  r"[键，值]，魔法，快速，可延展和错误修剪。	[Key, values], magic, fast, malleable and error prune.",
  r"架构是耦合和内聚之间的张力。	Architecture is the tension between coupling and cohesion.",
  r"微小的变化会产生意想不到的问题。	Small changes yield unexpected problems.",
  r"知道应该检查什么地方并确保程序在出错时快速失败是一门艺术。这种选择是简化艺术的一部分。	There is an art to knowing where things should be checked and making sure that the program fails fast if you make a mistake. That kind of choosing is part of the art of simplification.",
  r"如果一开始指定或理解不当，再多的优雅编程或技术也无法解决问题。	No amount of elegant programming or technology will solve a problem if it is improperly specified or understood to begin with.",
  r"无论您的职业抱负是什么，学习编码都是有用的。	Learning to code is useful no matter what your career ambitions are.",
  r"复杂与智慧无关，简单才是。	Complexity has nothing to do with intelligence, simplicity does.",
  r"后来等于永远。	Later Equals Never.",
  r"如有疑问，请使用蛮力。	When in doubt, use brute force.",
  r"计算机科学教育不能使任何人成为专业的程序员，就像学习画笔和颜料不能使任何人成为专业的画家一样。	Computer Science education cannot make anybody an expert programmer any more than studying brushes and pigment can make somebody an expert painter.",
  r"该图不是模型。模型不是图表。它是一种抽象，一组概念和它们之间的关系。	The Diagram is Not the Model. The model is not the diagram. It is an abstraction, a set of concepts and relationships between them.",
  r"图不是代码。它们不可能是代码味道。它们只是图表的味道。	Diagrams are not code. They cannot be a ",
  r"思考不是操纵语言的能力；这是操纵概念的能力。	Thinking is not the ability to manipulate language; it’s the ability to manipulate concepts.",
  r"对象共享的信息可能是也可能不是该对象结构的一部分。也就是说，对象可以计算信息，或者它可以将信息请求委托给另一个对象。	Information shared by an object might or might not be part of the structure of that object. That is, the object might compute the information, or it might delegate the request for information to another object.",
  r"如果有人声称拥有完美的编程语言，那么他要么是傻子，要么是推销员，要么两者兼而有之。	If someone claims to have the perfect programming language, he is either a fool or a salesman or both.",
  r"程序和人一样，会变老。我们无法阻止衰老，但我们可以了解其成因、限制其影响并逆转部分损害。	Programs, like people, get old. We can’t prevent aging, but we can understand its causes, limit its effects and reverse some of the damage.",
  r"如果两者都冻结，那么在水上行走和根据规范开发软件就很容易了。	Walking on water and developing software from a specification are easy if both are frozen.",
  r"软件实体（类、模块、函数等）应该对扩展开放，对修改关闭。	Software entities (classes, modules, functions, etc.) should be open for extension, but closed for modification.",
  r"对我来说，编程不仅仅是一门重要的实用艺术。在知识的基础上，这也是一项艰巨的任务。	To me programming is more than an important practical art. It is also a gigantic undertaking in the foundations of knowledge.",
  r"编程语言是一种对我们的思维习惯有着深远影响的工具。	A programming language is a tool that has a profound influence on our thinking habits.",
  r"好的设计增加价值的速度要快于增加成本的速度。	Good design adds value faster than it adds cost.",
  r"编程的主要活动不是新的独立程序的产生，而是现有程序的集成、修改和解释。	The main activity of programming is not the origination of new independent programs, but in the integration, modification, and explanation of existing ones.",
  r"我终于明白了“向上兼容”的含义。这意味着我们要保留所有的旧错误。	I’ve finally learned what ‘upward compatible’ means. It means we get to keep all our old mistakes.",
  r"对布尔值进行断言会使错误跟踪变得更加困难。	Asserting against booleans makes error tracking more difficult.",
  r"很难忽略错误情况。不要在返回值中隐藏错误代码。	Make it hard to ignore error conditions. Don’t bury error codes in return values.",
  r"过早的优化是万恶之源	Premature optimization is the root of all evil",
  r"提前规划需要开发人员没有的水晶球。	Planning ahead of time needs a crystal ball no developer has.",
  r"面向对象编程通过管理这种复杂性来增加这些指标的价值。处理复杂性的最有效工具是抽象。可以使用许多类型的抽象，但封装是主要的抽象形式，通过它在面向对象编程中管理复杂性。	Object-oriented programming increases the value of these metrics by managing this complexity. The most effective tool available for dealing with complexity is abstraction. Many types of abstraction can be used, but encapsulation is the main form of abstraction by which complexity is managed in object-oriented programming.",
  r"函数、lambda、闭包。如此高阶、非声明式和热门。	Functions, lambdas, closures. So high order, nondeclarative, and hot.",
  r"类型本质上是关于程序的断言。而且我认为让事情尽可能绝对简单是有价值的，包括甚至不说类型是什么	Types are essentially assertions about a program. And I think it’s valuable to have things be as absolutely simple as possible, including not even saying what the types are",
  r"名称应始终表明角色。	Names should always indicate role.",
  r"我不是一个伟大的程序员；我只是一个有好习惯的好程序员。	I’m not a great programmer; I’m just a good programmer with great habits.",
  r"不要自动化无纪律的工作流程。客户管理解决不了的问题，电脑解决不了。	Don’t automate an undisciplined workflow. The computer won’t solve what the customer’s management can’t.",
  r"技术由两种类型的人主导：了解他们不管理的东西的人，以及管理他们不了解的东西的人。	Technology is dominated by two types of people: those who understand what they do not manage, and those who manage what they do not understand.",
  r"尽可能窃取代码。	Whenever possible, steal code.",
  r"今天，大多数软件的存在不是为了解决问题，而是为了与其他软件交互。	Today, most software exists, not to solve a problem, but to interface with other software.",
  r"一个真正的专业人士不会将没有明显错误的软件交给其他人，从而浪费他人的时间和金钱；没有经过最小单元测试；不符合规范和要求的；那是镀金的，带有不必要的功能；或者看起来像垃圾	A true professional does not waste the time and money of other people by handing over software that is not reasonably free of obvious bugs; that has not undergone minimal unit testing; that does not meet the specifications and requirements; that is gold-plated with unnecessary features; or that looks like junk",
  r"当心携带螺丝刀的程序员。	Beware of programmers who carry screwdrivers.",
  r"上帝可以在六天内创造世界，因为他不必让它与以前的版本兼容。	God could create the world in six days because he didn’t have to make it compatible with the previous version.",
  r"-BASIC 之于计算机编程就像 QWERTY 之于打字。	BASIC is to computer programming as QWERTY is to typing.",
  r"在任何特定时间点，我们的编程语言提供的功能都反映了我们对软件和编程的理解。	At any particular point in time, the features provided by our programming languages reflect our understanding of software and programming.",
  r"你认识的每一位伟大的开发人员都是通过解决他们没有资格解决的问题而到达那里的，直到他们真正做到了。	Every great developer you know got there by solving problems they were unqualified to solve until they actually did it.",
  r"-PHP 是由无能的业余爱好者制造和创造的小罪恶，而 Perl 是由熟练但变态的专业人员制造的大而阴险的罪恶。	PHP is a minor evil perpetrated and created by incompetent amateurs, whereas Perl is a great and insidious evil, perpetrated by skilled but perverted professionals.",
  r"计算机科学中的任何问题都可以通过另一个间接级别来解决。	Any problem in computer science can be solved with another level of indirection.",
  r"主键、ID、引用。我们添加到对象的第一个属性。它们不存在于现实世界中。	Primary keys, IDs, references. The first attribute we add to our objects. They don’t exist in the real world.",
  r"我对计算机科学的信心不如对生物学的信心。生物学很容易有 500 年令人兴奋的问题需要研究。就是那个水平	I can’t be as confident about computer science as I can about biology. Biology easily has 500 years of exciting problems to work on. It’s at that level",
  r"一台电脑曾经在国际象棋上打败了我，但在踢拳击上却敌不过我。	A computer once beat me at chess, but it was no match for me at kick boxing.",
  r"科学家为学习而建造；工程师学习建造。	Scientists build to learn; Engineers learn to build.",
  r"发现的最大障碍不是无知，而是知识的幻觉。	The greatest obstacle to discovery is not ignorance, but the illusion of knowledge.",
  r"记住，代码就是你的房子，你必须住在里面。	Remember, code is your house, and you have to live in it.",
  r"最好的性能改进是从非工作状态到工作状态的转换。	The best performance improvement is the transition from the nonworking state to the working state.",
  r"等待有生产力的程序员出现比等待第一个可用的程序员变得有生产力要好。	It’s better to wait for a productive programmer to become available than it is to wait for the first available programmer to become productive.",
  r"整个算术现在都在机械的掌控之中。	The whole of arithmetic now appeared within the grasp of mechanism.",
  r"责备程序员是半个世纪软件开发的通行方式：它还没有解决问题，所以是时候换个角度看看了。	Blaming programmers has been the prevailing approach for a half century of software development: It has not solved the problem yet, so it is time to look in different directions.",
  r"如果您认为好的架构很昂贵，请尝试糟糕的架构。	If you think good architecture is expensive, try bad architecture.",
  r"-C++ 旨在让您表达想法，但如果您没有想法或对如何表达想法一无所知，C++ 也帮不上什么忙。	C++ is designed to allow you to express ideas, but if you don’t have ideas or don’t have any clue about how to express them, C++ doesn’t offer much help.",
  r"我们希望我们的代码在不同的环境、操作系统上表现不同，所以在编译时做出决定……	We want our code to behave different on different environments, operating systems, so taking decisions at compile time…",
  r"唯一真正安全的系统是断电、浇铸在混凝土块中并密封在有武装警卫的铅衬房间内的系统。	The only truly secure system is one that is powered off, cast in a block of concrete and sealed in a lead-lined room with armed guards.",
  r"虫子潜伏在角落里，聚集在边界处。	Bugs lurk in corners and congregate at boundaries.",
  r"在编程中，困难的部分不是解决问题，而是决定要解决什么问题。	In programming, the hard part isn’t solving problems, but deciding what problems to solve.",
  r"代码味道 39 — new Date()	",
  r"70 年代第一个教程：getCurrentDate()。小菜一碟。我们在 20 年代，时间不再是全球性的。	70s first tutorial: getCurrentDate(). Piece of Cake. We are in the 20s Time is global no more.",
  r"分析引擎没有任何借口来创造任何东西。它可以做任何我们知道如何命令它执行的事情……但它可能会对科学本身产生间接和相互影响。	The Analytical Engine has no pretensions whatever to originate anything. It can do whatever we know how to order it to perform… But it is likely to exert an indirect and reciprocal influence on science itself.",
  r"我认为测试驱动设计很棒。但是你可以测试所有你想要的，如果你不知道如何解决问题，你就不会得到解决方案。	I think test-driven design is great. But you can test all you want and if you don’t know how to approach the problem, you’re not going to get a solution.",
  r"一个糟糕的程序员一年可以轻松创造两个新工作。	One bad programmer can easily create two new jobs a year.",
  r"错误就是错误。你写的代码有错误，因为你这样做。如果它是运行时安全意义上的安全语言，则操作系统会崩溃，而不是以可利用的方式进行缓冲区溢出。	Bugs are bugs. You write code with bugs because you do. If it’s a safe language in the sense of run-time safe, the operating system crashes instead of doing a buffer overflow in a way that’s exploitable.",
  r"在遍历时更改集合可能会导致意外错误	Changing a collection while traversing might lead to unexpected errors",
  r"临时解决方案往往会成为永久性问题。	Temporary solutions often become permanent problems.",
  r"科学是我们理解得足以向计算机解释的东西，剩下的就是艺术	Science is what we understand well enough to explain to a computer, Art is all the rest",
  r"能想象任何事物的人，能创造不可能的事物	Those who can imagine anything, can create the impossible",
  r"抄袭跳过理解。理解是你成长的方式。您必须了解为什么某些东西有效或为什么某些东西是这样的。当你复制它时，你会错过它。您只需重新调整最后一层的用途，而不是理解下面的所有层。	Copying skips understanding. Understanding is how you grow. You have to understand why something works or why something is how it is. When you copy it, you miss that. You just repurpose the last layer instead of understanding all the layers underneath.",
  r"数周的编程可以为您节省数小时的计划时间。	Weeks of programming can save you hours of planning.",
  r"软件就像熵：难以掌握，没有重量，遵守热力学第二定律；即，它总是增加。	Software is like entropy: It is difficult to grasp, weighs nothing, and obeys the Second Law of Thermodynamics; i.e., it always increases.",
  r"不考虑变化的设计有可能在未来进行重大重新设计。	A design that doesn’t take change into account risks major redesign in the future.",
  r"您的义务是积极参与。你们不应该做吸收知识的海绵，而应该做磨刀石的磨刀石。	Your obligation is that of active participation. You should not act as knowledge-absorbing sponges, but as whetstones on which we can all sharpen our wits.",
  r"清洁的目的不仅仅是为了清洁，而是为了感受生活在那个环境中的快乐。	The objective of cleaning is not just to clean, but to feel happiness living within that environment.",
  r"您最不满意的客户是您最大的学习来源。	Your most unhappy customers are your greatest source of learning.",
  r"技术是你出生后发明的任何东西。	Technology is anything invented after you were born.",
  r"我不害怕电脑。我担心缺少它们。	I do not fear computers. I fear lack of them.",
  r"性能的关键是优雅，而不是特殊情况。	The key to performance is elegance, not battalions of special cases.",
  r"程序维护的根本问题是修复一个缺陷很有可能引入另一个缺陷。	The fundamental problem with program maintenance is that fixing a defect has a substantial chance of introducing another.",
  r"构建大型应用程序的秘诀是永远不要构建大型应用程序。将您的应用程序分成小块。然后，将这些可测试的小块组装到您的大型应用程序中。	The secret to building large apps is never build large apps. Break your applications into small pieces. Then, assemble those testable, bite-sized pieces into your big application.",
  r"直到最后一个用户死亡，软件才算完成。	The software isn’t finished until the last user is dead.",
  r"几乎无一例外，最好的产品都是由渴望解决问题的团队开发的；不是公司实现战略的需要。	Almost without exception, the best products are developed by teams with desire to solve a problem; not a company’s need to fulfil a strategy.",
  r"在计算的短暂历史中，没有人编写过完美的软件。你不太可能成为第一个。	No one in the brief history of computing has ever written a piece of perfect software. It’s unlikely that you’ll be the first.",
  r"编程的真正英雄是编写负代码的人。	The real hero of programming is the one who writes negative code.",
  r"-JavaScript 是我所知道的唯一一种人们觉得在开始使用它之前不需要学习的语言。	JavaScript is the only language that I’m aware of that people feel they don’t need to learn before they start using it.",
  r"先简单后通用，先使用再重用。	Simplicity before generality, use before reuse.",
  r"重用变量使范围和边界更难遵循	Reusing variables makes scopes and boundaries harder to follow",
  r"编程与你所知道的无关；这是关于你能弄清楚的。	Programming isn’t about what you know; it’s about what you can figure out.",
  r"一般来说，修复错误之前等待的时间越长，修复的成本（时间和金钱）就越高。	In general, the longer you wait before fixing a bug, the costlier (in time and money) it is to fix.",
  r"不正确的文档通常比没有文档更糟糕。	Incorrect documentation is often worse than no documentation.",
  r"编写害羞的代码——不向其他模块透露任何不必要的东西并且不依赖于其他模块的实现的模块。	Write shy code — modules that don’t reveal anything unnecessary to other modules and that don’t rely on other modules’ implementations.",
  r"课程很方便。我们可以随时调用它们并调用它们。这个好吗？	Classes are handy. We can call them and invoke them any time. Is this good?",
  r"每个写得很好的大程序里面都有一个写得很好的小程序。	Inside every well-written large program is a well-written small program.",
  r"拼写和可读性对人类非常重要，对机器不重要。	Spelling and readability are very important for humans and not important for machines.",
  r"成本估算师教育中最不成功的三年似乎是五年级的算术。	The most unsuccessful three years in the education of cost estimators appears to be fifth-grade arithmetic.",
  r"所有模型都是错误的，但有些模型很有用	All models are wrong but some models are useful",
  r"代码生成就像喝酒一样，适可而止。	Code generation, like drinking alcohol, is good in moderation.",
  r"懒惰 II：代码向导	Laziness II: Code Wizards",
  r"代码生成器为我们做了艰苦的工作。但我们不再需要它们了。	Code generators do our hard work. But we don’t need them anymore.",
  r"简约，发挥到极致，成为优雅。	Simplicity, carried to the extreme, becomes elegance.",
  r"有人建议我们应该有一个后门。但现实情况是，如果你开了一个后门，那个后门是为所有人准备的——好人和坏人都可以。	There have been people that suggest that we should have a back door. But the reality is if you put a back door in, that back door’s for everybody — for good guys and bad guys.",
  r"你必须有长远的目标，以免因短期的失败而沮丧。	You must have long-range goals to keep you from being frustrated by short-range failures.",
  r"硬币的另一面是，即使是优秀的程序员和语言设计师，在编程最激烈的时候也往往会做出糟糕的扩展，因为设计最好是缓慢而谨慎地完成。	The flip side of the coin was that even good programmers and language designers tended to do terrible extensions when they were in the heat of programming, because design is something that is best done slowly and carefully.",
  r"我们不能因为他们的错误而责怪程序员。它们只属于它们，直到代码被合并到存储库中。之后，所有错误都是我们的！	We must not blame programmers for their bugs. They belong to them only until the code is merged to the repository. After that, all bugs are ours!",
  r"不要让人类去做计算机可以做得更好的工作——这是对人类能量和创造力的浪费，人类的能量和创造力是这个星球上唯一真正的资源，并且贬低了人类的精神。	Do not use humans for jobs computers can do better — this is a waste of human energy and creativity, the only real resource on this planet, and demeans the human spirit.",
  r"-XML的本质是这样的：它解决的问题并不难，也没有很好地解决问题。	The essence of XML is this: the problem it solves is not hard, and it does not solve the problem well.",
  r"一个新系统的设计者不能只是实施者和第一个大规模用户；设计师还应该编写第一本用户手册。如果我没有充分参与所有这些活动，那么数百项改进将永远不会实现。	The designer of a new system must not only be the implementor and the first large-scale user; the designer should also write the first user manual. If I had not participated fully in all these activities, literally hundreds of improvements would never have been made.",
  r"发现包括看到其他人所看到的和思考其他人没有想到的。	Discovery consists of seeing what everyone else has seen and thinking what no one else has thought.",
  r"最危险的浪费是我们不认识的浪费。	The most dangerous kind of waste is the waste we do not recognize.",
  r"最佳委员会没有成员。	The optimum committee has no members.",
  r"没有人比软件开发人员更讨厌软件。	No one hates software more than software developers.",
  r"在一个 10 人的软件项目团队中，可能有 3 个人产生了足够多的缺陷，使他们成为净负面生产者。	In a software project team of 10, there are probably 3 people who produce enough defects to make them net negative producers.",
  r"对“这令人困惑，文档在哪里”的最佳反应是重写功能以减少混淆，而不是编写更多文档。	The best reaction to “this is confusing, where are the docs” is to rewrite the feature to make it less confusing, not write more docs.",
  r"一个安装良好的微代码错误几乎不可能被检测到。	A well installed microcode bug will be almost impossible to detect.",
  r"随着软件系统规模和复杂性的增加，整体系统结构的设计、规范和分析成为一个关键问题。	As the size and complexity of software systems increase, the design, specification, and analysis of overall system structure becomes a critical issue.",
  r"玩指针就像玩火。火也许是人类已知的最重要的工具。小心使用，火会带来巨大的好处；但是当火势失控时，灾难就会降临。	Playing with pointers is like playing with fire. Fire is perhaps the most important tool known to man. Carefully used, fire brings enormous benefits; but when fire gets out of control, disaster strikes.",
  r"阿尔茨海默氏编程法则：查看您两周前编写的代码就像查看您第一次看到的代码一样。	Alzheimer’s Law of Programming: Looking at code you wrote more than two weeks ago is like looking at code you are seeing for the first time.",
  r"如果程序员得到报酬从软件中删除代码而不是编写新代码，那么软件会好得多。	If programmers got paid to remove code from software instead of writing new code, software would be a whole lot better.",
  r"忘掉这个世界和它所有的麻烦，如果可能的话，忘掉它的众多江湖骗子——简而言之，除了数字女巫之外的一切。	Forget this world and all its troubles and if possible its multitudinous Charlatans — everything in short but the Enchantress of Numbers.",
  r"软件是一种气体；它会膨胀以填充其容器。	Software is a gas; it expands to fill its container.",
  r"你们中的大多数人都熟悉程序员的优点。当然有三种：懒惰、急躁和狂妄自大。	Most of you are familiar with the virtues of a programmer. There are three, of course: laziness, impatience, and hubris.",
  r"控制复杂性是计算机编程的本质。	Controlling complexity is the essence of computer programming.",
  r"开玩笑地做一些困难的事情，不管有用与否，这就是黑客。	Playfully doing something difficult, whether useful or not, that is hacking.",
  r"这种“用户是白痴，被功能搞糊涂了”的 Gnome 心态是一种疾病。如果您认为您的用户是白痴，那么只有白痴才会使用它。	This ‘users are idiots, and are confused by functionality’ mentality of Gnome is a disease. If you think your users are idiots, only idiots will use it.",
  r"使用专业且有意义的名称	Use professional and meaningful names",
  r"简单的系统是不可行的，因为它们需要无限的测试。	Simple systems are not feasible because they require infinite testing.",
  r"您可以拥有的最好的编程技能之一就是知道什么时候走开一会儿。	One of the best programming skills you can have is knowing when to walk away for awhile.",
  r"第一次就做对并不重要。最后一次把它做好是至关重要的。	It’s not at all important to get it right the first time. It’s vitally important to get it right the last time.",
  r"计算机系统中最便宜、最快和最可靠的组件是那些不存在的组件。	The cheapest, fastest and most reliable components of a computer system are those that aren’t there.",
  r"开发人员被复杂性所吸引，就像飞蛾扑火一样，结果往往是一样的。	Developers are drawn to complexity like moths to a flame, frequently with the same result.",
  r"我的信念仍然是，如果你得到正确的数据结构和它们的不变量，大部分代码都会自己编写。	My belief is still, if you get the data structures and their invariants right, most of the code will kind of write itself.",
  r"消费社会希望没有学习曲线。这往往会产生非常简单的产品，这些产品很容易上手，但通常毫无价值和/或令人虚弱。	There is the desire of a consumer society to have no learning curves. This tends to result in very dumbed-down products that are easy to get started on, but are generally worthless and/or debilitating.",
  r"作为一个多年从事软件工程师工作的人，我开始着迷于大脑的运作方式、组合方式以及以与计算机截然不同的方式工作。	As someone who was basically a software engineer for many years, I became fascinated with how the brain functions and is put together and works in such a different fashion than computers do.",
  r"通才是万事通，但什么都不会，而通才专家是万事通，但精通少数。巨大差距。	A generalist is a jack-of-all-trades but a master of none, whereas a generalizing specialist is a jack-of-all-trades and master of a few. Big difference.",
  r"前 90% 的代码占前 90% 的开发时间。其余 10% 的代码占用了另外 90% 的开发时间。	The first 90 percent of the code accounts for the first 90 percent of the development time. The remaining 10 percent of the code accounts for the other 90 percent of the development time.",
  r"无论您是绘制生成代码的图表还是在浏览器中键入内容，您都在编码。	Whether you draw diagrams that generate code or you type at a browser, you are coding.",
  r"编写软件是一件非常紧张、非常个人化的事情。你必须有时间去完成它，去理解它。然后调试它。	Writing software is a very intense, very personal thing. You have to have time to work your way through it, to understand it. Then debug it.",
  r"好消息是：在您的计算机上一切皆有可能。坏消息是：没有什么是容易的。	The good news is: Anything is possible on your computer. The bad news is: Nothing is easy.",
  r"我知道测试人员可以成为优秀的开发人员。我知道开发人员会成为优秀的测试人员。我知道 Scrum Masters 会煮出好咖啡。	I know testers who make good devs. I know devs who make good testers. I know Scrum Masters who make good coffee.",
  r"不要被注释所迷惑，它们可能会产生严重的误导：只调试代码。	Don’t get suckered in by the comments, they can be terribly misleading: Debug only the code.",
  r"注释通常是一种代码味道。将它们插入到方法中需要紧急重构。	Comments are often a ",
  r"软件工程的目的是控制复杂性，而不是创造复杂性。	The purpose of software engineering is to control complexity, not to create it.",
  r"嵌套的 IF 和 Elses 很难阅读和测试	Nested IFs and Elses are very hard to read and test",
  r"虽然众所周知程序员从不犯错，但通过在程序的关键点检查错误来取悦用户仍然是一个好主意。	While it is a known fact that programmers never make mistakes, it is still a good idea to humor the users by checking for errors at critical points in your program.",
  r"我们应该特别注意用户（和我们自己）的错误描述。	We should take special care with error descriptions for the users (and ourselves).",
  r"在与慢速系统永无止境的战斗中，程序员的主要武器是改变模块内结构。我们的第一反应应该是重组模块的数据结构。	The programmer’s primary weapon in the never-ending battle against slow system is to change the intramodular structure. Our first response should be to reorganize the modules’ data structures.",
  r"如果您的类是全局的，请使用完全限定的名称	If your classes are globals, use fully qualified names",
  r"计算机科学是一个不安分的婴儿，它的进步既取决于观点的转变，也取决于我们当前概念的有序发展。	Computer science is a restless infant and its progress depends as much on shifts in point of view as on the orderly development of our current concepts.",
  r"计算机科学就像工程学。这一切都是关于让某事做某事，而不是像前史密斯地质学那样仅仅处理抽象。	Computer science is like engineering; it is all about getting something to do something, rather than just dealing with abstractions, as in the pre-Smith geology.",
  r"软件中的大多数最大问题都是误解问题。	Most of the biggest problems in software are problems of misconception.",
  r"如果头脑真的是最好的电脑，那么外面有很多人需要重新启动。	If the mind really is the finest computer, then there are a lot of people out there who need to be rebooted.",
  r"没有证据不是缺席的证据。	Absence of evidence is not evidence of absence.",
  r"优化规则： 规则 1：不要这样做。规则 2（仅适用于专家）：先不要做。	Rules of Optimization: Rule 1: Don’t do it. Rule 2 (for experts only): Don’t do it yet.",
  r"计算机科学颠覆了常态。在常规科学中，你被赋予了一个世界，你的工作是找出规则。在计算机科学中，你给计算机规则，它创造世界。	Computer science inverts the normal. In normal science, you’re given a world, and your job is to find out the rules. In computer science, you give the computer the rules, and it creates the world.",
  r"在你说你不能做某事之前，先尝试一下。	Before you say you can’t do something, try it.",
  r"一个有效的复杂系统总是被发现是从一个有效的简单系统演变而来的。	A complex system that works is invariably found to have evolved from a simple system that worked.",
  r"将优秀的开发人员提拔到管理层通常是双重的错误举动：您将失去优秀的开发人员并获得糟糕的经理。	Promoting a good developer to management is often a twofold bad move: you’ll lose a good developer and get a poor manager.",
  r"架构只是常规的软件设计	Architecture is just regular software design",
  r"很难预测，尤其是未来。	It is very hard to predict, especially the future.",
  r"代码在那里。万一。我们可能很快就会需要它。	Code is there. Just in case. We might need it soon.",
  r"计算机科学与机器无关，就像天文学与望远镜无关一样。数学和计算机科学本质上是统一的	Computer science is not about machines, in the same way that astronomy is not about telescopes. There is an essential unity of mathematics and computer science",
  r"对象是处理的抽象。线程是调度的抽象。	Objects are abstractions of processing. Threads are abstractions of schedule.",
  r"计算机的危险不在于它们最终会变得像人一样聪明，而在于我们同时同意与它们相向而行。	The danger from computers is not that they will eventually get as smart as men, but that we will meanwhile agree to meet them halfway.",
  r"软件谬误：如果它能工作，而且我们不做任何更改，它就会继续工作。	A Fallacy of Software: If it works, and we don’t change anything, it will keep working.",
  r"在某些时候，软件设计变得越来越不关心什么，而更多地关心什么时候	At some point software design becomes less about what and more about when",
  r"如有疑问，请将其排除在外。	When in doubt, leave it out.",
  r"记忆就像性高潮。如果您不必伪造它，那就更好了。	Memory is like an orgasm. It’s a lot better if you don’t have to fake it.",
  r"如果你不愿意对它们负责，就不要有好主意。	Don’t have good ideas if you aren’t willing to be responsible for them.",
  r"如果您是技术主管，则需要编码。	If you’re a technical lead, you need to be coding.",
  r"从 Internet 上获取信息就像从消防栓里喝水一样	Getting information off the Internet is like taking a drink from a fire hydrant",
  r"不要收集需求，而是挖掘它们	Don’t Gather Requirements, Dig for Them",
  r"硬件最终会失败。软件最终会起作用。	Hardware eventually fails. Software eventually works.",
  r"如果代码和评论不一致，那么两者都可能是错误的。	If the code and the comments disagree, then both are probably wrong.",
  r"责怪实施，而不是技术。	Blame the implementation, not the technique.",
  r"编程只是对自己说“我一个小时后有个会议，所以最好先不要开始”，直到你死为止。	Programming is just saying “I have a meeting in an hour, so better not start on this yet” to yourself until you die.",
  r"程序员不会因艰苦的工作而筋疲力尽，他们会因随风而变的指令而不是“交付”而筋疲力尽。	Programmers don’t burn out on hard work, they burn out on change-with-the-wind directives and not ‘shipping’.",
  r"如果你害怕改变某些东西，那显然是设计不当。	If you’re afraid to change something it is clearly poorly designed.",
  r"在 Internet 上获得正确答案的最佳方法不是提问，而是发布错误答案。	The best way to get the right answer on the Internet is not to ask a question, it’s to post the wrong answer.",
  r"数学家站在彼此的肩膀上，计算机科学家站在彼此的脚趾上。	Mathematicians stand on each others’ shoulders and computer scientists stand on each others’ toes.",
  r"泡沫不会破灭。	Bubbles don’t crash.",
  r"标准总是过时的。这就是使它们成为标准的原因。	Standards are always out of date. That’s what makes them standards.",
  r"有两次，[国会议员]曾问我，“如果你把错误的数字输入机器，正确的答案会出来吗？”......这样的问题。	On two occasions, I have been asked [by members of Parliament], “if you put into the machine wrong figures, will the right answers come out?”…I am not able rightly to apprehend the kind of confusion of ideas that could provoke such a question.",
  r"调整旧程序以适应新机器通常意味着调整新机器使其表现得像旧机器一样。	Adapting old programs to fit new machines usually means adapting new machines to behave like old ones.",
  r"-Dijkstra 会很高兴地告诉您，95% 的计算机科学教员无法正确编写二分查找程序，这让我们对他们教的学生没有太大希望。	Dijkstra will be happy to tell you that 95% of computer science faculty members can’t program a binary search correctly, which doesn’t give us much hope for the students they teach.",
  r"迭代使我们能够逐步接近某个目标。我们可以放弃使我们走得更远的步骤，而更喜欢使我们走得更近的步骤。这就是进化的本质。它也是现代机器学习 (ML) 工作原理的核心。	Iteration allows us to progressively approach some goal. We can discard the steps that take us further away and prefer the steps that move us nearer. This is in essence how evolution works. It is also at the heart of how modern machine learning (ML) works.",
  r"动态类型的美妙之处在于它可以让你表达任何可计算的东西。而类型系统则没有。一旦你有了一个类型系统，你甚至不知道那里有什么有趣的程序。	The wonderful thing about dynamic typing is it lets you express anything that is computable. And type systems don’t. Once you have a type system, you don’t even know what interesting programs are there.",
  r"我希望计算机科学领域永远不会失去它的乐趣。	I hope the field of computer science never loses its sense of fun.",
  r"大量文档是问题的一部分，而不是解决方案的一部分。	Voluminous documentation is part of the problem, not part of the solution.",
  r"即使是最小的代码段也很难正确编写。	It is hard to write even the smallest piece of code correctly.",
  r"谈论代码比编写代码容易得多。	It’s a lot easier to talk about code than it is to write code.",
  r"在遗留系统中使用方法之前，请检查是否有针对它的测试。如果没有，写下来。当您始终如一地这样做时，您可以使用测试作为沟通的媒介。	Before you use a method in a legacy system, check to see if there are tests for it. If there aren’t, write them. When you do this consistently, you use tests as a medium of communication.",
  r"认识到需求是设计的首要条件。	Recognizing the need is the primary condition for design.",
  r"计算机做你告诉他们做的事，而不是你想让他们做的事。	The computers do what you tell them to do, not what you want them to do.",
  r"让开你的开发人员或将他们丢给愿意的人。	Get out of the way of your developers or lose them to someone who will.",
  r"在 Stack Overflow 上获得准确信息的最佳方式是发布错误信息并等待更正。	The best way to get accurate information on Stack Overflow is to post something wrong and wait for corrections.",
  r"开始修复错误的最佳方法是使其可重现。毕竟，如果您不能重现它，您怎么知道它是否曾经修复过？	The best way to start fixing a bug is to make it reproducible. After all, if you can’t reproduce it, how will you know if it is ever fixed?",
  r"我认为缺乏可重用性的是面向对象的语言，而不是函数式语言。因为面向对象语言的问题在于它们拥有随身携带的所有这些隐式环境。你想要一根香蕉，但你得到的是一只拿着香蕉和整个丛林的大猩猩。	I think the lack of reusability comes in object-oriented languages, not in functional languages. Because the problem with object-oriented languages is they’ve got all this implicit environment that they carry around with them. You wanted a banana but what you got was a gorilla holding the banana and the entire jungle.",
  r"好的程序员不只是写程序。他们建立了一个工作词汇表。	Good programmers don’t just write programs. They build a working vocabulary.",
  r"我反对做计算机可以做的事情。	I object to doing things that computers can do.",
  r"错误不会变成错误，除非你拒绝改正它。	An error doesn’t become a mistake until you refuse to correct it.",
  r"好的代码本身就是最好的文档。	Good code is its own best documentation.",
  r"没有多少测试可以证明一个软件是正确的，一次测试就可以证明一个软件是错误的。	No amount of testing can prove a software right, a single test can prove a software wrong.",
  r"世界在变，我相信，如果我想继续做程序员，我就必须随之改变。	The world is changing, and I believe that, if I want to stay employed as a programmer, I’m going to have to change with it.",
  r"软件业务的大部分工作都用于维护已经存在的代码。	Most of the effort in the software business goes into the maintenance of code that already exists.",
  r"如果您有一个包含十个参数的过程，您可能会遗漏一些参数。	If you have a procedure with ten parameters, you probably missed some.",
  r"物理学是宇宙的操作系统。	Physics is the universe’s operating system.",
  r"简单并不先于复杂，而是紧随其后	Simplicity does not precede complexity, but follows it",
  r"美在计算中比在技术中的其他任何地方都更重要，因为软件是如此复杂。美是对抗复杂性的终极防御。	Beauty is more important in computing than anywhere else in technology because software is so complicated. Beauty is the ultimate defense against complexity.",
  r"80% 的输入表单会问一些他们不该问的问题。	Eighty percent of all input forms ask questions they have no business asking.",
  r"程序员必须与宇宙中两种最具破坏力的力量作斗争：熵和愚蠢。	Programmers have to fight against the two most destructive forces in the universe: entropy and stupidity.",
  r"永远在你真正需要的时候实施，而不是在你预见到你需要它们的时候。	Always implement things when you actually need them, never when you just foresee that you need them.",
  r"应该注意的是，任何受过道德训练的软件工程师都不会同意编写 DestroyBaghdad 程序。基本的职业道德反而会要求他编写一个 DestroyCity 程序，巴格达可以作为参数提供给该程序。	It should be noted that no ethically-trained software engineer would ever consent to write a DestroyBaghdad procedure. Basic professional ethics would instead require him to write a DestroyCity procedure, to which Baghdad could be given as a parameter.",
  r"我们不会告诉你在哪里或为什么。	We won’t tell you where or why.",
  r"懒惰的程序员。	Lazy programmers.",
  r"批评不仅仅是不喜欢事物。艺术学校教授技能和对工作的尊重。计算机科学学校没有。	Criticism isn’t just disliking things. Arts schools teach the skill & the respect for the work. Computer science schools don’t.",
  r"生物学是有史以来最强大的技术。DNA 是软件，蛋白质是硬件，细胞是工厂。	Biology is the most powerful technology ever created. DNA is software, protein are hardware, cells are factories.",
  r"正规教育将使您谋生。自我教育会让你发财。	Formal education will make you a living. Self-education will make you a fortune.",
  r"如果你做一个笼统的陈述，程序员会说，“是的，但是……”而设计师会说，“是的，而且……”	If you make a general statement, a programmer says, ‘Yes, but…’ while a designer says, ‘Yes, and…’",
  r"错误出现的时间越长，就越难找到。	The longer it takes for a bug to surface, the harder it is to find.",
  r"传统的技术面试对每个人来说都很糟糕。他们是公司评估候选人的糟糕方式。它们是求职者评估公司的糟糕方式。他们浪费时间并给双方带来压力。	Traditional technical interviews are terrible for everyone. They’re a bad way for companies to evaluate candidates. They’re a bad way for candidates to evaluate companies. They waste time and generate stress on both sides.",
  r"正如将所有字段设为私有（除非它们需要更大的可见性）是一种好的做法一样，将所有字段设为最终字段（除非它们需要可变）也是一种很好的做法。	Just as it is a good practice to make all fields private unless they need greater visibility, it is a good practice to make all fields final unless they need to be mutable.",
  r"如果你从事单元测试，你迟早会面临这种困境	If you work on unit testing, sooner or later you will face this dilemma",
  r"问题是，在软件设计中，您的决定的后果通常多年后才变得明显。	The problem is, in software design, often the consequences of your decisions don’t become apparent for years.",
  r"创新区分领导者和追随者。	Innovation distinguishes between a leader and a follower.",
  r"另一种有效的技术是向其他人解释您的代码。这通常会导致您向自己解释错误。有时只需要几句话，然后是尴尬的“没关系，我知道出了什么问题。很抱歉打扰你。”	Another effective technique is to explain your code to someone else. This will often cause you to explain the bug to yourself. Sometimes it takes no more than a few sentences, followed by an embarrassed “Never mind, I see what’s wrong. Sorry to bother you.”",
  r"用小规模测试（我称它们为“单元测试”，但它们与公认的单元测试定义不太匹配）来推动开发的问题在于，你冒着实现你认为用户想要的东西的风险，但是事实证明这根本不是他们想要的。	The problem with driving development with small scale tests (I call them “unit tests”, but they don’t match the accepted definition of unit tests very well) is that you run the risk of implementing what you think a user wants, but having it turn out to be not what they wanted at all.",
  r"不要试图在软件架构中找到最好的设计，相反，要争取最少最坏的权衡组合	Don’t try to find the best design in software architecture , instead , strive for the least worst combination of trade-offs",
  r"程序员将自己视为艺术家。因此，他们考虑保持准确的手工记录，就像清洗烟灰缸一样。	Programmers regard themeselves as artists. As such they consider keeping accurate records of their handiwork on par with washing ash tray.",
  r"简化，不要复杂化——尤其是流程、程序和政策。	Simplify, don’t complicate — especially processes, procedures and policies.",
  r"人类组织与任何计算机系统一样，都是一个信息系统。它几乎肯定更复杂，但适用相同的基本思想。并发和耦合等根本困难的事情在现实世界中也很困难。	A human organization is just as much an information system as any computer system. It is almost certainly more complex, but the same fundamental ideas apply. Things that are fundamentally difficult, like concurrency and coupling, are difficult in the real world of people, too.",
  r"优化阻碍进化。一切都应该自上而下构建，除了第一次。简单性并不先于复杂性，而是紧随其后。	Optimization hinders evolution. Everything should be built top-down, except the first time. Simplicity does not precede complexity, but follows it.",
  r"称职的程序员充分意识到自己头骨的尺寸是有限的；因此，他以完全谦逊的态度来完成编程任务，并且除其他外，他避免了诸如瘟疫之类的巧妙技巧。	The competent programmer is fully aware of the strictly limited size of his own skull; therefore he approaches the programming task in full humility, and among other things he avoids clever tricks like the plague.",
  r"如果我们想计算代码行数，我们不应该将它们视为“生成的行数”，而应视为“花费的行数”。	If we wish to count lines of code, we should not regard them as “lines produced” but as “lines spent”.",
  r"编程的艺术是组织复杂性、掌握众多并尽可能有效地避免其混沌的艺术。	The art of programming is the art of organizing complexity, of mastering multitude and avoiding its bastard chaos as effectively as possible.",
  r"如果你做一个大爆炸重写，你唯一确定的就是大爆炸	If you do a big bang rewrite, the only thing you’re certain of is a big bang",
  r"每个模式都描述了一个在我们的环境中反复出现的问题，然后描述了该问题解决方案的核心，这样您就可以使用该解决方案一百万次，而无需重复使用相同的方法.	Each pattern describes a problem which occurs over and over again in our environment, and then describes the core of the solution to that problem, in such a way that you can use this solution a million times over, without ever doing it the same way twice.",
  r"软件设计是一项接触运动	Software design is a contact sport",
  r"随着软件开始卖给那些从不认为自己是技术人员的人，突然变得很清楚，你需要会说他们语言的人。	As software began to be sold to people who would never consider themselves technical, it suddenly became clear that you needed people who spoke their language.",
  r"简单就是减去明显的东西，增加有意义的东西。	Simplicity is about subtracting the obvious and adding the meaningful.",
  r"这就是使用计算机工作的好处。他们不争论，他们记得一切，他们不会喝你所有的啤酒。	That’s what’s cool about working with computers. They don’t argue, they remember everything, and they don’t drink all your beer.",
  r"虽然众所周知程序员从不犯错，但通过在程序的关键点检查错误来取悦用户仍然是一个好主意。	While it is a known fact that programmers never make mistakes, it is still a good idea to humor the users by checking for errors at critical points in your program.",
  r"编程类似于打高尔夫球。关键不是让球进洞，而是需要多少杆。	Programming is similar to a game of golf. The point is not getting the ball in the hole but how many strokes it takes.",
  r"在软件系统中，通常是早起的鸟儿有虫吃。	In software systems it is often the early bird that makes the worm.",
  r"给程序员指点迷津就像给青少年威士忌和车钥匙一样。	Giving pointers and threads to programmers is like giving whisky and car keys to teenagers.",
  r"当最终设计对于您投入的工作量来说显得过于简单时，您就知道自己完成了。	When the final design seems too simple for the amount of work you’ve put in, then you know you’re done.",
  r"教训是：即使您确切知道系统中正在发生什么，测量性能，也不要推测。你会学到一些东西，十有八九，你不会是对的！	The lesson is: Even if you know exactly what is going on in your system, measure performance, don’t speculate. You’ll learn something, and nine times out of ten, it won’t be that you were right!",
  r"一个大项目的重要教训之一是你不希望不是真正的程序员编程的人，你会因此而受苦！	One of the big lessons of a big project is you don’t want people that aren’t really programmers programming, you’ll suffer for it!",
  r"编写不可维护代码的基本规则是在尽可能多的地方以尽可能多的方式详细说明每个事实。	The cardinal rule of writing unmaintainable code is to specify each fact in as many places as possible and in as many ways as possible.",
  r"那些小时的练习和失败是学习过程的必要部分。	Those hours of practice, and failure, are a necessary part of the learning process.",
  r"不到 10% 的代码与系统的表面目的有关；其余的处理输入输出、数据验证、数据结构维护和其他内务处理。	Less than 10% of the code has to do with the ostensible purpose of the system; the rest deals with input-output, data validation, data structure maintenance, and other housekeeping.",
  r"与其应用几分钟的可疑推理，我们可以通过进行更改和运行测试来询问计算机。	Rather than apply minutes of suspect reasoning, we can just ask the computer by making the change and running the tests.",
  r"编码名称很少发音，而且很容易打错。	Encoded names are seldom pronounceable and are easy to miss-type.",
  r"当您驾驶保时捷陷入交通拥堵时，您所做的就是在空闲状态下燃烧更多的汽油。可扩展性是关于建造更宽的道路，而不是建造更快的汽车。	When you are stuck in a traffic jam with a Porsche, all you do is burn more gas in idle. Scalability is about building wider roads, not about building faster cars.",
  r"除非你能向你的祖母解释，否则你不会真正理解某件事。	You do not really understand something unless you can explain it to your grandmother.",
  r"程序员必须避免留下模糊代码含义的虚假线索。	Programmers must avoid leaving false clues that obscure the meaning of code.",
  r"分布式系统是这样一种系统，在这种系统中，您甚至不知道其存在的计算机发生故障可能会导致您自己的计算机无法使用。	A distributed system is one in which the failure of a computer you didn’t even know existed can render your own computer unusable.",
  r"当我研究代码时，重构让我获得更高层次的理解，否则我会错过。那些认为理解式重构是无用的摆弄代码的人并没有意识到他们从来没有看到隐藏在混乱背后的机会。	When I’m studying code, refactoring leads me to higher levels of understanding that I would otherwise miss. Those who dismiss comprehension refactoring as useless fiddling with the code don’t realize they never see the opportunities hidden behind the confusion.",
  r"优化正确的代码比纠正优化的代码更容易。	It is easier to optimize correct code than to correct optimized code.",
  r"不要忍受破碎的窗户	Don’t Live with Broken Windows",
  r"可靠性的主要敌人是复杂性。	The central enemy of reliability is complexity.",
  r"完美的实现，不是在没有什么可以添加的时候，而是在没有什么可以去掉的时候。	Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.",
  r"-C++：朋友可以访问您的私有成员的地方。	C++ : Where friends have access to your private members.",
  r"如果你在人周围设置栅栏，你就会得到羊。给人们他们需要的空间。	If you put fences around people, you get sheep. GIve people the room they need.",
  r"存活时间最长、寿命最长的程序是那些功能较短的程序。您将了解所有这些小功能的价值。间接的所有回报——解释、分享和选择——都由小功能支持。	The programs that live best and longest are those with short functions. You learn just how valuable all those little functions are. All of the payoffs of indirection — explanation, sharing, and choosing — are supported by small functions.",
  r"反驳废话所需的能量比产生废话大一个数量级。	The amount of energy necessary to refute bullshit is an order of magnitude bigger than to produce it.",
  r"我们必须再次认识到，不接触实验的科学是一项很可能完全误入歧途的事业。	We have to learn again that science without contact with experiments is an enterprise which is likely to go completely astray into imaginary conjecture.",
  r"模型是一种有选择地简化和有意识地结构化的知识形式。	A model is a selectively simplified and consciously structured form of knowledge.",
  r"添加功能不仅仅是添加代码的问题。	Adding functionality is not just a matter of adding code.",
  r"除了手枪和龙舌兰酒之外，计算机比任何其他发明都更容易犯错误。	A computer lets you make more mistakes faster than any other invention with the possible exceptions of handguns and Tequila.",
  r"失败是时髦的。做比思考容易得多，失败不是耻辱，让我们把这个想法带到我们的……	Failure is fashionable. Making is much easier than thinking and failures are not stigma, let’s take this idea to our…",
  r"照片由Shahadat Rahman在Unsplash上拍摄	Photo by Shahadat Rahman on Unsplash",
  r"许多人倾向于像看待宗教一样看待编程风格和语言：如果你属于一个，你就不能属于其他。但这个类比是另一个谬误。	Many people tend to look at programming styles and languages like religions: if you belong to one, you cannot belong to others. But this analogy is another fallacy.",
  r"唯一没有改变的程序是那些太糟糕以至于没有人愿意使用它们的程序。	The only programs that don’t get changed are those that are so bad that nobody wants to use them.",
  r"用被谴责为“糟糕”的语言编写的好代码比用宣称“很棒”的语言编写的代码要多得多。	More good code has been written in languages denounced as “bad” than in languages proclaimed “wonderful” — much more.",
  r"告诉我，我忘记了。教我，我就记住了。让我参与，我学习。	Tell me and I forget. Teach me and I remember. Involve me and I learn.",
  r"仅仅因为某些东西很容易衡量并不意味着它很重要。	Just because something is easy to measure doesn’t mean it’s important.",
  r"年轻时没有破解过汇编语言的人是没有心的。像成年人一样做的人没有大脑。	He who hasn’t hacked assembly language as a youth has no heart. He who does as an adult has no brain.",
  r"每个工匠都以一套基本的优质工具开始他或她的旅程。	Every craftsman starts his or her journey with a basic set of good-quality tools.",
  r"显然，编程课程应该教授设计和构建的方法，所选择的例子应该能够很好地展示渐进的发展。	Clearly, programming courses should teach methods of design and construction, and the selected examples should be such that a gradual development can be nicely demonstrated.",
  r"如果你想做有趣的软件，你必须有一群人来做，因为一个人能做的软件数量并不多有趣。	If you want to do interesting software, you have to have a bunch of people do it, because the amount of software that one person can do isn’t that interesting.",
  r"我认为让更多女性进入计算领域非常重要。我的口号是：计算太重要了，不能交给男人。	I think it’s very important to get more women into computing. My slogan is: Computing is too important to be left to men.",
  r"不要浪费时间学习“交易技巧”。相反，学习交易。	Don’t waste time learning the “tricks of the trade.” Instead, learn the trade.",
  r"大多数专家都认为，世界最有可能被毁灭的方式是意外。那就是我们进来的地方；我们是计算机专业人士。我们造成事故。	The most likely way for the world to be destroyed, most experts agree, is by accident. That’s where we come in; we’re computer professionals. We cause accidents.",
  r"那些认为自己讨厌电脑的人就是这样。他们真正讨厌的是烂程序员。	That’s the thing about people who think they hate computers. What they really hate is lousy programmers.",
  r"软件架构中的一切都是一种权衡。	Everything in software architecture is a trade-off.",
  r"文档是编程的蓖麻油	Documentation is the castor oil of programming",
  r"软件工程与计算机科学不同，尽管我们经常将两者混淆。我们既需要软件工程师，也需要计算机科学家。	Software engineering is not the same thing as computer science, though we often confuse the two. We need both software engineers and computer scientists.",
  r"最后，无论您处于开发层次结构的哪个位置，都要继续编码。这是你最有价值的地方。	In the end, regardless of where you are on the development hierarchy, keep coding. It’s where you’re most valuable.",
  r"如果有人说他们的代码在重构时坏了几天，你可以很确定他们没有重构。	If someone says their code was broken for a couple of days while they are refactoring, you can be pretty sure they were not refactoring.",
  r"有些人是优秀的程序员，因为他们可以处理比大多数人更多的细节。但出于这个原因，选择程序员有很多缺点——它可能导致其他人无法维护的程序。	Some people are good programmers because they can handle many more details than most people. But there are a lot of disadvantages in selecting programmers for that reason — it can result in programs that no one else can maintain.",
  r"与设计（或思考）模式相比，GoF 模式可能更适合称为实现模式。	GoF patterns might better be called implementation patterns than design (or thinking) patterns.",
  r"-JavaScript 的优势在于你可以做任何事情。弱点是你会的。	The strength of JavaScript is that you can do anything. The weakness is that you will.",
  r"完成项目的前 90% 后，您必须完成其他 90%。	After you finish the first 90% of a project, you have to finish the other 90%.",
  r"任何人都会犯错误，但只有傻瓜才会坚持自己的错误。	Any man can make mistakes, but only an idiot persists in his error.",
  r"优秀的工程师会让解决方案过时。伟大的工程师会让自己过时。	Good engineers make solutions obsolete. Great engineers make themselves obsolete.",
  r"我认为您应该始终牢记熵不站在您这一边。	I think you should always bear in mind that entropy is not on your side.",
  r"如果一台计算机能够欺骗人类相信它是人类，那么它就应该被称为智能计算机。	A computer would deserve to be called intelligent if it could deceive a human into believing that it was human.",
  r"设计是选择你将如何失败。	Design is choosing how you will fail.",
  r"当您的代码依赖于接口时，这种依赖性通常非常小且不引人注目。除非接口发生变化，否则您的代码不必更改，而且接口的更改频率通常远低于其背后的代码。当您有一个接口时，您可以编辑实现该接口的类或添加实现该接口的新类，所有这些都不会影响使用该接口的代码。	When your code depends on an interface, that dependency is usually very minor and unobtrusive. Your code doesn’t have to change unless the interface changes, and interfaces typically change far less often than the code behind them. When you have an interface, you can edit classes that implement that interface or add new classes that implement the interface, all without impacting code that uses the interface.",
  r"因此，依赖接口或抽象类比依赖具体类要好。当您依赖不太易变的东西时，您可以最大限度地减少特定更改触发大量重新编译的机会。	For this reason, it is better to depend on interfaces or abstract classes than it is to depend on concrete classes. When you depend on less volatile things, you minimize the chance that particular changes will trigger massive recompilation.",
  r"课程很方便。我们可以随时调用它们并调用它们。这个好吗？	Classes are handy. We can call them and invoke them any time. Is this good?",
  r"编写错误的程序比理解正确的程序更容易。	It is easier to write an incorrect program than understand a correct one.",
  r"技术娴熟且积极进取的程序员可以克服不完善的流程，但完美的流程永远无法弥补不完善的程序员或糟糕的软件经理。	Skilled and motivated programmers can overcome inadequate processes, but perfect processes can never compensate for inadequate programmers or poor software managers.",
  r"如果麦当劳像一家软件公司一样经营，那么每 100 个巨无霸汉堡中就有一个会让你食物中毒——你的回答会是：“很抱歉，这里还有一张优惠券，可以再买两张。	If Mc Donalds were run like a software company, one out of every hundred Big Macs would give you food poisoning — and the response would be, “We’re sorry, here’s a coupon for two more.",
  r"如果产品和编程语言被设计成只有好的部分就好了。	It would be nice if products and programming languages were designed to have only good parts.",
  r"团队合作在 40 年前更被接受。	Teamwork was more accepted 40 years ago.",
  r"异常处理程序的主要职责是将错误从程序员的膝上移开，并让用户感到惊讶。	The primary duty of an exception handler is to get the error out of the lap of the programmer and into the surprised face of the user.",
  r"反馈对我们的学习能力至关重要。如果没有快速有效的反馈，我们只能猜测。反馈的速度和质量都很重要。如果反馈太晚，它是没有用的。如果它具有误导性或错误，我们做出的决定也将是错误的	Feedback is essential to our ability to learn. Without fast, effective feedback, we are guessing. Both the speed and the quality of feedback matter. If feedback is too late, it is useless. If it is misleading or wrong, the decisions that we make will be wrong, too",
  r"数组索引应该从 0 还是 1 开始？我认为 0.5 的妥协在没有经过适当考虑的情况下被拒绝了。	Should array indices start at 0 or 1? My compromise of 0.5 was rejected without, I thought, proper consideration.",
  r"完美的实现，不是在没有什么可以添加的时候，而是在没有什么可以去掉的时候。	Perfection is achieved, not when there is nothing more to add, but when there is nothing left to take away.",
  r"高效开发的关键是犯有趣的新错误	The key to efficient development is to make interesting new mistakes",
  r"我并不是说我们故意引入错误或其他任何东西，但这是任何软件复杂性的自然结果……您无法对其进行全面测试。	I’m not saying we purposely introduced bugs or anything, but this is kind of a natural result of any complexities of software… that you can’t fully test it.",
  r"-COBOL 的使用削弱了思维；因此，其教学应被视为刑事犯罪。	The use of COBOL cripples the mind; its teaching should therefore be regarded as a criminal offense.",
  r"“如果它没有坏，就不要修理它”的前提是你不能改进已经运行良好的东西。如果世界上的发明家都相信这一点，那么我们仍然会驾驶 A 型福特汽车并使用外屋。	“Don’t fix it if it ain’t broke” presupposed that you can’t improve something that works reasonably well already. If the world’s inventors had believed this, we’d still be driving Model A Fords and using outhouses.",
  r"在软件“生产”中不是我们的问题！我们的产品是一个字节序列，我们可以以零成本重新创建任何字节序列。	In software “production” is not our problem! Our product is a sequence of bytes, and we can recreate any sequence of bytes essentially for zero cost.",
  r"这意味着我们永远不会遇到生产问题！	This means that we NEVER have a production problem!",
  r"一个人脑大约有 1 亿个神经细胞……而一个能够阐明心智/大脑问题的计算机程序必须结合生物学家、神经科学家、心理学家、生理学家、语言学家、社会科学家甚至哲学家的最深刻见解.	A single human brain has about a hundred million nerve cells… and a computer program that throws light on the mind/brain problem will have to incorporate the deepest insights of biologists, nerve scientists, psychologists, physiologists, linguists, social scientists, and even philosophers.",
  r"告诉程序员已经有一个库可以做 X 就像告诉词曲作者那里已经有一首关于爱情的歌。	Telling a programmer there’s already a library to do X is like telling a songwriter there’s already a song about love.",
  r"上帝创造了自然数；其他一切都是人的工作。	God made the natural numbers; all else is the work of man.",
  r"断言两个浮点数相同是一个非常困难的问题	Asserting two float numbers are the same is a very difficult problem",
  r"数据结构只是一种愚蠢的编程语言。	A data structure is just a stupid programming language.",
  r"如果您将对象视为数据持有者，您将违反它们的封装，但您不应该像在现实生活中那样……	If you see your objects as data holders you will violate their encapsulation but you shouldn’t, as in real life, you…",
  r"-Sun Microsystems 拥有使 Java 成为一流语言的合适人选，我相信是 Sun 的营销人员在它应该发布之前就匆匆推出了它。	Sun Microsystems had the right people to make Java into a first-class language, and I believe it was the Sun marketing people who rushed the thing out before it should have gotten out.",
  r"试图禁止白痴的语言本身就变得白痴了。	Languages that try to disallow idiocy become themselves idiotic.",
  r"关键是从一开始就承认你不知道这将如何发展。接受你不是无所不知的事实，你开始防御性地设计系统……你应该把大部分时间花在考虑接口而不是实现上。”,	The key is to acknowledge from the start that you have no idea how this will grow. Accepting that you don’t know everything, you begin to design the system defensively… You should spend most of your time thinking about interfaces rather than implementations.”,",
  r"只有两种语言：人们抱怨的语言和没有人使用的语言。	There are only two kinds of languages: the ones people complain about and the ones nobody uses.",
  r"几乎在所有情况下，我都反对留出时间进行重构。在我看来，重构不是您留出时间去做的活动。重构是你一直在小爆发中做的事情。	In almost all cases, I’m opposed to setting aside time for refactoring. In my view refactoring is not an activity you set aside time to do. Refactoring is something you do all the time in little bursts.",
  r"如果你正在阅读一本侦探小说，那么通过阅读一些文本来理解正在发生的事情是一件很棒的事情，但当你正在阅读代码时就不是这样了。我们可能幻想成为国际神秘人物，但我们的准则需要平凡而清晰。	Puzzling over some text to understand what’s going on is a great thing if you’re reading a detective novel, but not when you’re reading code. We may fantasize about being International Men of Mystery, but our code needs to be mundane and clear.",
  r"结对程序员：让彼此完成任务。集思广益对系统进行改进。理清思路。当他们的伴侣被卡住时采取主动，从而减少挫败感。让彼此对团队的做法负责。配对	Pair programmers: Keep each other on task. Brainstorm refinements to the system. Clarify ideas. Take initiative when their partner is stuck, thus lowering frustration. Hold each other accountable to the team’s practices. Pairing",
  r"当我编写软件时，我知道它会失败，要么是由于我自己的错误，要么是由于其他原因。	When I write software, I know that it will fail, either due to my own mistake, or due to some other cause.",
  r"封装变化的概念。	Encapsulate the concept that varies.",
  r"调用我们自己的访问器方法似乎是一个很好的封装想法。但事实并非如此。	Calling our own accessor methods might seem a good encapsulation idea. But it is not.",
  r"如果您不能简单地解释它，那么您还不够了解它。	If you can’t explain it simply, you don’t understand it well enough.",
  r"程序的完成度绝不会低于 90%，也绝不会超过 95%。	A program is never less than 90% complete, and never more than 95% complete.",
  r"我见过的大多数 xml 让我觉得我有阅读障碍。看起来也很便秘，一个标准的两个健康问题实在是太多了。	Most xml i’ve seen makes me think i’m dyslexic. it also looks constipated, and two health problems in one standard is just too much.",
  r"技术什么都不是。重要的是你对人有信心，他们基本上是善良和聪明的，如果你给他们工具，他们会用他们做美妙的事情。	Technology is nothing. What’s important is that you have a faith in people, that they’re basically good and smart, and if you give them tools, they’ll do wonderful things with them.",
  r"想象力比知识更重要。因为知识是有限的，而想象力包含整个世界，激发进步，孕育进化。	Imagination is more important than knowledge. For knowledge is limited, whereas imagination embraces the entire world, stimulating progress, giving birth to evolution.",
  r"一切最终都会失败。硬件容易出错，所以我们增加了冗余。这使我们能够在个别硬件故障中幸存下来，但增加了在任何给定时间至少发生一次故障的可能性。	Everything will ultimately fail. Hardware is fallible, so we add redundancy. This allows us to survive individuals hardware failures, but increases the likelihood of having at least one failure at any given time.",
  r"无论您使用什么设备来获取信息，都应该是相同的信息。	Whatever the device you use for getting your information out, it should be the same information.",
  r"任何足够高级的错误都与功能无法区分。	Any sufficiently advanced bug is indistinguishable from a feature.",
  r"如果你认为你值得你所知道的，那你就大错特错了。你今天的知识在几年后没有太大价值。你的价值在于你能学到什么，以及你能多容易地适应这个职业经常带来的变化。	If you think you are worth what you know, you are very wrong. Your knowledge today does not have much value beyond a couple of years. Your value is what you can learn and how easily you can adapt to the changes this profession brings so often.",
  r"非凡的主张需要非凡的证据	Extraordinary claims require extraordinary evidence",
  r"无论排练时的演示多么巧妙，当你在现场观众面前演示时，完美演示的可能性与观看人数成反比，并以所涉及金额的次方表示。	No matter how slick the demo is in rehearsal, when you do it in front of a live audience the probability of a flawless presentation is inversely proportional to the number of people watching, raised to the power of the amount of money involved.",
  r"为有缺陷的软件退款可能是件好事，但它会在第一年让整个软件行业破产。	A refund for defective software might be nice, except it would bankrupt the entire software industry in the first year.",
  r"不要等到出现错误时才单步执行代码。	Don’t wait until you have a bug to step through your code.",
  r"首先想想最终会是什么。然后一步一步地远离它，直到你得到你可以建造的东西。	First think about what the ultimate would be. Then take a step away from that, and another, until you get something you can build.",
  r"我们绝不能忘记轮子经常被重新发明，因为这是一个非常好的主意；我学会了更加担心只发明一次的想法的可靠性。	We must not forget that the wheel is reinvented so often because it is a very good idea; I’ve learned to worry more about the soundness of ideas that were invented only once.",
  r"我想说，在过去，如果你重新发明轮子，你会因为不读书而被打手腕。但是现在人们正在重新发明漏气的轮胎。如果他们重新发明轮子，我个人会很高兴，因为至少我们会向前迈进。	I like to say that in the old days, if you reinvented the wheel, you would get your wrist slapped for not reading. But nowadays people are reinventing the flat tire. I’d personally be happy if they reinvented the wheel, because at least we’d be moving forward.",
  r"复制一点代码比为一个功能引入一个大库要好。依赖卫生胜过代码重用。	It can be better to copy a little code than to pull in a big library for one function. Dependency hygiene trumps code reuse.",
  r"程序构建由一系列细化步骤组成。	Program construction consists of a sequence of refinement steps.",
  r"简而言之，当您拥有非常大的软件时，大多数工具会将单独的代码行视为文本。不看单个代码片段，而是看整个系统通常是非常强大的。	Simply put, when you have very large pieces of software, most of the tools look at the individual lines of code as text. It is often extremely powerful to look not at individual pieces of code but at a system as a whole.",
  r"好的工程是代码在八分钟或八小时内运行的区别。它以真实的方式影响真实的人。这不是“见仁见智”。就像鸟儿飞翔是一个“见仁见智的问题”。	Good engineering is the difference between code running in eight minutes or eight hours. It affects real people in real ways. It’s not a “matter of opinion.” any more than a bird taking a flight is a “matter of opinion.”",
  r"计算机科学研究不同于这些更传统的学科。它不同于物理科学，因为它不寻求发现、解释或利用自然世界，而是研究人类创造的机器的特性	Computer science research is different from these more traditional disciplines. It differs from the physical sciences because it seeks not to discover, explain, or exploit the natural world, but instead to study the properties of machines of human creation",
  r"到 2031 年，律师将普遍成为大多数开发团队的一部分。	In 2031, lawyers will be commonly a part of most development teams.",
  r"我陷入了我能处理的最卑鄙、最恶劣的心态，并且我编写了我能想到的最恶劣（测试）代码。然后我转过身来，把它嵌入到几乎淫秽的甚至更肮脏的结构中。	I get into the meanest, nastiest frame of mind I can manage, and I write the nastiest (testing) code I can think of. Then I turn around and embed that in even nastier constructions that are nearly obscene.",
  r"把事情做好的全部意义在于知道有什么事情没有做。	The whole point of getting things done is knowing what to leave undone.",
  r"我们希望明天采摘的果实隐藏在今天的种子中。我们明天要阅读的目标和我们要解决的问题取决于今天的勤奋、希望和信念，以及今天对善的全能的信念。	The fruit we wish to pick tomorrow lies hidden in the seed of today. The goals we are to read and the problems we are to solve tomorrow depend upon today’s diligence, hope and faith, today’s conviction of the almightiness of good.",
  r"密码就像内裤：不要让人看到，应该经常更换，不要与陌生人分享。	Passwords are like underwear: you don’t let people see it, you should change it very often, and you shouldn’t share it with strangers.",
  r"优秀的程序员从不写他们可以窃取或借用的东西。	Good programmers never write what they can steal or borrow.",
  r"调试的艺术是找出你真正告诉你的程序做什么，而不是你认为你告诉它做什么。	The art of debugging is figuring out what you really told your program to do rather than what you thought you told it to do.",
  r"面向对象的模型使得通过累加构建程序变得容易。这通常意味着，在实践中，它提供了一种结构化的方式来编写意大利面条代码。	The object-oriented model makes it easy to build up programs by accretion. What this often means, in practice, is that it provides a structured way to write spaghetti code.",
  r"为什么大多数开发人员害怕不断更改他们的代码？他们害怕他们会打破它！为什么他们害怕他们会打破它？因为他们没有考试。	Why do most developers fear to make continuous changes to their code? They are afraid they’ll break it! Why are they afraid they’ll break it? Because they don’t have tests.",
  r"所有的程序员都是乐观主义者。	All programmers are optimists.",
  r"我对 Null 的真正批评是，它不必要地再次带来了必须选择是在不检查的情况下快速运行程序还是在检查的情况下缓慢运行程序的所有痛苦。	My real criticism with Null is that it brings back again unnecessarily all the agony of having to choose whether to run your program fast without checking or run it slow with checking.",
  r"我认为对于软件来说，避免将认知风格强加给员工和他们的工作很重要。	I think it is important for software to avoiding imposing a cognitive style on workers and their work.",
  r"构建器模式比伸缩构造器模式更冗长，因此只有在参数足够多（例如四个或更多）时才应使用它。	Builder pattern is more verbose than the telescoping constructor pattern, so it should be used only if there are enough parameters, say, four or more.",
  r"设计活动确实需要花费时间和精力，但它们是有回报的，因为它们使软件更容易发展到未来。您可以通过忽略设计来节省短期时间，但这会累积 TechDebt，这会降低您以后的工作效率。	Design activities certainly do take up time and effort, but they payoff because they make it easier to evolve the software into the future. You can save short-term time by neglecting design, but this accumulates TechDebt, which will slow your productivity later.",
  r"没有混淆的 Perl 竞赛，因为它毫无意义。	There’s no obfuscated Perl contest because it’s pointless.",
  r"如果您纯粹根据受欢迎程度选择 JavaScript 库，我认为您值得拥有。	If you are choosing a JavaScript library purely based on popularity, I think you deserve what you get.",
  r"一个好的威胁值得一千次测试。	A good threat is worth a thousand tests.",
  r"被迫写注释实际上改进了代码，因为修复问题比解释问题容易。	Being forced to write comments actually improves code, because it is easier to fix a crock than to explain it.",
  r"那么为什么告诉计算机做一些稍微复杂的事情就这么难呢？好吧，给我带来问题的并不是“稍微复杂”的部分；这是“告诉计算机”的部分。	So why was it so hard to tell a computer to do something only mildly complex? Well, it wasn’t the “mildly complex” part that was giving me problems; it was the “tell a computer” part.",
  r"我认为人们编程不好是不可避免的。培训不会对事情有实质性帮助。我们必须学会忍受它。	I think it is inevitable that people program poorly. Training will not substantially help matters. We have to learn to live with it.",
  r"测试是程序员的石头，将恐惧转化为无聊。	Tests are the Programmer’s stone, transmuting fear into boredom.",
  r"好的代码本身就是最好的文档。当您要添加评论时，问问自己，“我怎样才能改进代码以便不需要该评论？”	Good code is its own best documentation. As you’re about to add a comment, ask yourself, ‘How can I improve the code so that this comment isn’t needed?’",
  r"科学家的才华不在于更多时候是对的，而是在于在更有趣的话题上犯错。	Brilliance in a scientist does not consist in being right more often but in being wrong about more interesting topics.",
  r"行为是软件最重要的事情。这是用户所依赖的。当我们添加行为时用户会喜欢它（前提是这是他们真正想要的），但如果我们更改或删除他们依赖的行为（引入错误），他们就会停止信任我们。	Behavior is the most important thing about software. It is what users depend on. Users like it when we add behavior (provided it is what they really wanted), but if we change or remove behavior they depend on (introduce bugs), they stop trusting us.",
  r"这些机器没有常识；他们还没有学会“思考”，他们完全按照被告知的去做，不多也不少。当一个人第一次尝试使用计算机时，这个事实是最难掌握的概念。	These machines have no common sense; they have not yet learned to “think,” and they do exactly as they are told, no more and no less. This fact is the hardest concept to grasp when one first tries to use a computer.",
  r"将一个类设计为线程安全的类比以后对其进行线程安全改造要容易得多。	It is far easier to design a class to be thread-safe than to retrofit it for thread safety later.",
  r"科学不仅仅是一种知识体系，更是一种思维方式。	Science is a way of thinking much more than it is a body of knowledge.",
  r"在语言中使用 null 的十亿美元错误。由于 JavaScript 同时具有 null 和 undefined，这是一个 20 亿美元的错误。	The billion dollar mistake of having null in the language. And since JavaScript has both null and undefined, it’s the two billion dollar mistake.",
  r"代码生成就像喝酒一样，适可而止。	Code generation, like drinking alcohol, is good in moderation.",
  r"-TDD 开发的代码往往具有较低的圈复杂度	TDD developed code tends to have low cyclomatic complexity",
  r"从找到要解决的正确问题开始。这是“客户要求什么”、“客户甚至不知道他们想要什么”和“可以通过简单易懂和管理的方式解决的问题”的组合	Start out with finding the right problem to solve. This is a combination of “what customers are asking for”, “what customers don’t even know they want yet” and “what can be solved with something simple to understand and manage”",
  r"想想看，一百万台打字机上已经有一百万只猴子了，Usenet 一点也不像莎士比亚。	Come to think of it, there are already a million monkeys on a million typewriters, and Usenet is nothing like Shakespeare.",
  r"随着时间的推移，软件作为资产并不稳定。它需要维护。	Software as an asset isn’t stable over time; it needs to be maintained.",
  r"随着程序的发展，它的复杂性会增加，除非进行维护或减少它的工作。	As a program is evolved its complexity increases unless work is done to maintain or reduce it.",
  r"雷曼复杂性增加定律	Lehman’s law of Increasing Complexity",
  r"实数和虚数都具有完全相同的逻辑地位。它们是模拟现实的人类概念，但它们本身并不是真实的	Both real and imaginary numbers have exactly the same logical status. They are human concepts that model reality, but they are not themselves real",
  r"编程通常通过例子来教授。	Programming is usually taught by examples.",
  r"我对模式的定义是一种在一个实际环境中有用并且可能在其他环境中有用的想法。	The definition I use for a pattern is an idea that has been useful in one practical context and will probably be useful in others.",
  r"软件工程不同于桥梁建设，但大多数软件开发人员认为的桥梁建设也不同于真正的桥梁建设。这种对话实际上是生产工程和设计工程之间的一种混淆。	Software engineering is not the same as bridge building, but what most software developers think of as bridge building isn’t like real bridge building, either. This conversation is really a form of confusion between production engineering and design engineering.",
  r"如果您允许一个错误从一个模块中溜走，并且您的公司为此损失了 10,000 美元，会发生什么情况？非专业人士会耸耸肩，说“事情发生了”，然后开始编写下一个模块。专业人员会给公司开一张 10,000 美元的支票！	What would happen if you allowed a bug to slip through a module, and it cost your company $10,000? The nonprofessional would shrug his shoulders, say “stuff happens,” and start writing the next module. The professional would write the company a check for $10,000!",
  r"以唯一真实的方式。“意大利面条代码”的面向对象版本当然是“千层面代码”。（太多层）。	In the one and only true way. The object-oriented version of ‘Spaghetti code’ is, of course, ‘Lasagna code’. (Too many layers).",
  r"不应随意应用设计模式。他们通常通过引入额外的间接级别来实现灵活性和可变性。只有在实际需要它提供的灵活性时才应应用设计模式。	Design patterns should not be applied indiscriminately. Often they achieve flexibility and variability by introducing additional levels of indirection. A design pattern should only be applied when the flexibility it affords is actually needed.",
  r"函数的第一条规则是它们应该很小。函数的第二条规则是它们应该小于	The first rule of functions is that they should be small. The second rule of functions is that they should be smaller than that",
  r"好的程序员会动脑筋，但是好的指导方针可以让我们不必考虑每一个案例。	Good programmers use their brains, but good guidelines save us having to think out every case.",
  r"测试应该比它们覆盖的代码更具可读性	Tests should be even more readable then the code they cover",
  r"开发软件的关键不是程序，而是设计。它将对用户需求的理解转化为可以实现为计算机程序的东西。	The critical thing in developing software is not the program, it’s the design. It is translating understanding of user needs into something that can be realized as a computer program.",
  r"一扇破窗，如果长时间未修，就会给建筑物的居民灌输一种被遗弃的感觉——一种当权者不关心建筑物的感觉。所以另一个窗户被打破了。人们开始乱扔垃圾。出现涂鸦。严重的结构损坏开始。在相对较短的时间内，建筑物的损坏超出了业主修复的意愿，被遗弃的感觉变成了现实。	One broken window, left unrepaired for any substantial length of time, instills in the inhabitants of the building a sense of abandonment — a sense that the powers that be don’t care about the building. So another window gets broken. People start littering. Graffiti appears. Serious structural damage begins. In a relatively short span of time, the building becomes damaged beyond the owner’s desire to fix it, and the sense of abandonment becomes reality.",
  r"任何时候你提出挑战，人们都会在软件方面想出一个创造性的解决方案。	Anytime you put a challenge out there, people come up with a creative solution on the software side.",
  r"幸存下来的并不是最有智慧的物种；生存的不是最强者；但是幸存下来的物种是能够最好地适应和适应其所处不断变化的环境的物种。	it is not the most intellectual of the species that survives; it is not the strongest that survives; but the species that survives is the one that is able best to adapt and adjust to the changing environment in which it finds itself.",
  r"所有的编程语言都是狗屎。但是好的东西会滋养你的思想。	All programming languages are shit. But the good ones fertilize your mind.",
  r"像一个对象一样思考将导致问题空间（企业领域）中发现的对象与解决方案空间（计算机程序）中使用的对象之间的同构程度比像计算机一样思考。	Thinking like an object will lead to a greater degree of isomorphism between objects found in the problem space (the enterprise domain) and those employed in a solution space (the computer program) than thinking like a computer.",
  r"当您选择一种语言时，您选择的不仅仅是一组技术权衡——您是在选择一个社区。	When you choose a language, you’re choosing more than a set of technical trade-offs-you’re choosing a community.",
  r"编码是写代码，而编程是编码和思考。	Coding is about writing code while programming is coding and thinking.",
  r"现在交付的 90% 的功能优于 100% 从未交付的功能。	90% of the functionality delivered now is better than 100% delivered never.",
  r"对象在那里采摘。	Objects are there for the picking.",
  r"弄清楚谋杀之谜是可以的，但您不需要弄清楚密码。你应该能够阅读它。	It’s OK to figure out murder mysteries, but you shouldn’t need to figure out code. You should be able to read it.",
  r"在一个满是顶级软件设计师的房间里，如果两个人就同一件事达成一致，那就是大多数。	In a room full of top software designers, if two agree on the same thing, that’s a majority.",
  r"错误会发生。他们无法被消灭，所以他们必须生存下来。	Bugs will happen. They cannot be eliminated, so they must be survived instead.",
  r"我们仍处于命名软件开发项目中真正发​​生的事情的初级阶段。	We are still in the infancy of naming what is really happening on software development projects.",
  r"程序员经常生气是因为他们经常害怕。	Programmers are often angry because they’re often scared.",
  r"很少有人感谢他们为防止未发生的灾难所做的工作。	Rarely is anyone thanked for the work they did to prevent the disaster that didn’t happen.",
  r"编程语言是用来思考程序的，不是用来表达你已经想到的程序的。它应该是铅笔，而不是钢笔。	A programming language is for thinking about programs, not for expressing programs you’ve already thought of. It should be a pencil, not a pen.",
  r"计算机内部的任何危机都不值得羞辱一个人。	No crisis inside a computer is worth humiliating a human.",
  r"临时变量可能是个问题。它们只在自己的例程中有用，因此它们鼓励长时间、复杂的例程。	Temporary variables can be a problem. They are only useful within their own routine, and therefore they encourage long, complex routines.",
  r"计算机变得像人的危险不如人类变得像计算机的危险大。	The danger of computers becoming like humans is not as great as the danger of humans becoming like computers.",
  r"有效的领导不是发表演讲或被人喜欢；领导力是由结果而不是属性来定义的。	Effective leadership is not about making speeches or being liked; leadership is defined by results not attributes.",
  r"向之前接触过 BASIC 的学生教授良好的编程几乎是不可能的：作为潜在的程序员，他们在精神上已经残缺不全，无法重生。	It is practically impossible to teach good programming to students that have had a prior exposure to BASIC: as potential programmers they are mentally mutilated beyond hope of regeneration.",
  r"50 年前 GOTO 被认为是有害的	GOTO was considered harmful 50 years ago",
  r"我们有持久对象，它们称为文件。	We have persistant objects, they’re called files.",
  r"对我们来说，真正的目标是让软件生态系统尽可能健康。	For us, the real goal is to make it so that the software ecosystem is as healthy as possible.",
  r"一个将其程序员视为白痴的组织很快就会有愿意并且能够像白痴一样行事的程序员。	An organization that treats its programmers as morons will soon have programmers that are willing and able to act like morons only.",
  r"过度骄傲，宙斯会因为这种事而打击你。还有使您编写（和维护）其他人不想说坏话的程序的质量。因此，程序员的第三大美德	Excessive pride, the sort of thing Zeus zaps you for. Also the quality that makes you write (and maintain) programs that other people won’t want to say bad things about. Hence, the third great virtue of a programmer",
  r"将我们的工作组织成一系列微小的步骤，使我们有更多机会反思我们的进展并引导我们的设计取得更好的结果。	Organizing our work into a series of tiny steps gives us more opportunities to reflect on our progress and steer our designs toward better outcomes.",
  r"不要记录问题，修复它。	Don’t document the problem, fix it.",
  r"好的判断来自于经验，而经验来自于错误的判断。	Good judgement comes from experience, and experience comes from bad judgement.",
  r"软件太重要了，不能留给程序员。	Software is Too Important to be Left to Programmers.",
  r"让程序变快的关键是让它们几乎什么都不做。	The key to making programs fast is to make them do practically nothing.",
  r"我们生活在一个充满误解的世界，认为句法是问题的核心。许多人认为，每个问题都有技术解决方案，最好让我们所有人都坐在黑暗的房间里，独自安静地工作。	We live in a world of misconceptions of thinking knowing syntax is at the heart of the problems. Lot of people believe there’s a technical solution to every problem and that it would be best for all us to sit in dark rooms working quietly by ourselves.",
  r"2021 年 TDD 大会——想要更快地获得更多价值？采取更多更小的步骤——GeePaw Hill	TDD Conference 2021 — Want More Value Faster? Take Many More Much Smaller Steps — GeePaw Hill",
  r"第一次国际测试驱动开发于 7 月 30 日举行。	First International Test Driven Development took place on July 30th.",
  r"让我们改变对程序构建的传统态度：与其想象我们的主要任务是指示计算机做什么，不如集中精力向人类解释我们希望计算机做什么。	Let us change our traditional attitude to the construction of programs: Instead of imagining that our main task is to instruct a computer what to do, let us concentrate rather on explaining to human beings what we want a computer to do.",
  r"我们过于笼统了。在我们看到足够的具体化之前，我们不应该创建抽象。	We are over generalizers. We shouldn’t create abstractions until we see enough concretions.",
  r"-quick 和 dirty 的问题是，在 quick 被遗忘后，dirty 仍然存在很长时间	The problem with quick and dirty, is that the dirty remains long after the quick has been forgotten",
  r"团队是不可变的。每次有人离开或加入时，您都会拥有一个新团队，而不是一个改变的团队。	Teams are immutable. Every time someone leaves, or joins, you have a new team, not a changed team.",
  r"如今，问题不在于如何创新；它是如何让社会采纳已经存在的好的想法。	These days, the problem isn’t how to innovate; it’s how to get society to adopt the good ideas that already exist.",
  r"解释地牢游戏对许多程序员的吸引力的奇异元素既不是喷火的怪物，也不是乳白色皮肤、半裸的警笛；它是在不改变用户需求的情况下从头到尾执行任务的体验。	The fantastic element that explain the appeal of dungeon games to many programmers is neither the fire-breathing monsters nor the milkyskinned, semi-clad sirens; it is the experience of carrying out a task from start to finish without user requirements changing.",
  r"非技术问题有时根本没有答案。	Non-technical questions sometimes don’t have an answer at all.",
  r"越早发现缺陷，修复它们的成本就越低。	The earlier you catch defects, the cheaper they are to fix.",
  r"-C 是古怪的，有缺陷的，但取得了巨大的成功。	C is quirky, flawed, and an enormous success.",
  r"当然，坏代码是可以清理的。但是很贵	Of course bad code can be cleaned up. But it’s very expensive",
  r"世界上的工人和专业人士将很快分成两个截然不同的群体。那些将控制计算机的人和那些将被计算机控制的人。你最好在前一组。	The workers and professionals of the world will soon be divided into two distinct groups. Those who will control computers and those who will be controlled by computers. It would be best for you to be in the former group.",
  r"一项一项地与专利作斗争永远不会消除软件专利的危险，就像拍打蚊子无法消除疟疾一样。	Fighting patents one by one will never eliminate the danger of software patents, any more than swatting mosquitoes will eliminate malaria.",
  r"对象思维将我们的注意力集中在问题空间而不是解决方案空间。对象思考者接受柏拉图、帕纳斯、弗雷德布鲁克斯、克里斯托弗亚历山大和许多其他人的建议，让问题定义自己的解决方案	Object thinking focuses our attention on the problem space rather than the solution space. Object thinkers take the advice of Plato, Parnas, Fred Brooks, Christopher Alexander, and many others by letting the problem define its own solution",
  r"不要问你能不能做某事，而是问怎么做	Don’t ask whether you can do something, but how to do it",
  r"您无法传达复杂性，只能传达对它的认识。	You can’t communicate complexity, only an awareness of it.",
  r"可编程的思维拥有思维敏捷性，可以一直练习“去学习”和“再学习”。	A programmable mind embraces mental agility, to practice “de-learning” and “relearning” all the time.",
  r"只有一件事比从经验中学习更痛苦，那就是不从经验中学习。	There is only one thing more painful than learning from experience, and that is not learning from experience.",
  r"-C++：通过将额外的腿钉在狗身上制成的章鱼。	C++: an octopus made by nailing extra legs onto a dog.",
  r"人们填写的所有输入表单中有 20% 包含错误数据。	Twenty percent of all input forms filled out by people contain bad data.",
  r"使用实体域名来建模实体域对象。	Use entity domain names to model entity domain objects.",
  r"将产品定义缩减为特性和功能列表会忽略真正的机会——协调技术能力以满足人类需求和目标。	Reducing a product’s definition to a list of features and functions ignores the real opportunity — orchestrating technological capability to serve human needs and goals.",
  r"毫无疑问，面向对象设计与传统的结构化设计方法有着根本的不同：​​它需要一种不同的分解思维方式，并且它产生的软件架构在很大程度上处于结构化设计文化的领域之外。	Let there be no doubt that object-oriented design is fundamentally different than traditional structured design approaches: it requires a different way of thinking about decomposition, and it produces software architectures that are largely outside the realm of the structured design culture.",
  r"当你遇到丑陋的代码时，你必须重构——但优秀的代码也需要大量的重构。	You have to refactor when you run into ugly code — but excellent code needs plenty of refactoring too.",
  r"我们大多数人都不会发明想法。我们从别人那里汲取最好的想法。	Most of us don’t invent ideas. We take the best ideas from someone else.",
  r"在技​​术或管理技术方面，没有任何一种发展本身可以保证在十年内在生产力、可靠性和简单性方面有一个数量级的改进。	There is no single development, in either technology or management technique, which by itself promises even one order-of-magnitude improvement within a decade in productivity, in reliability, in simplicity.",
  r"如果您实际上在进行 TDD，那么随着您对代码内容的理解发生变化，您一直在丢弃测试。	If you’re actually doing TDD, you’re throwing away tests all the time, as your understanding of what the code is changes.",
  r"教育制造像人一样行动的机器，并培养像机器一样行动的人	Education makes machines which act like men and produces men who act like machines",
  r"全面性是可理解性的敌人。	Comprehensiveness is the enemy of comprehensibility.",
  r"有了好的程序架构，调试就变得轻而易举，因为错误会出现在它们应该出现的地方。	With good program architecture debugging is a breeze, because bugs will be where they should be.",
  r"我们不断地与可能不符合我们高标准的其他人的代码进行交互，并处理可能有效也可能无效的输入。所以我们被教导要防御性地编码。我们使用断言来检测不良数据并检查一致性。	We are constantly interfacing with other people’s code that might not live up to our high standards and dealing with inputs that may or may not be valid. So we are taught to code defensively. We use assertions to detect bad data and check for consistency.",
  r"我发现大多数程序员不喜欢像我一样紧张地测试他们的软件。	I found out that most programmers don’t like to test their software as intensely as I do.",
  r"复杂性是技术不成熟的标志。无论是 ATM 还是爱国者导弹，简单易用是设计精良的产品的真正标志。	Complexity is a sign of technical immaturity. Simplicity of use is the real sign of a well design product whether it is an ATM or a Patriot missile.",
  r"不要添加 IF 检查生产环境。	Don’t add IFs checking for production environment.",
  r"通过减轻大脑所有不必要的工作，一个好的符号可以让大脑自由地专注于更高级的问题，并实际上增加了种族的智力。在引入阿拉伯符号之前，乘法是困难的，甚至整数的除法也需要最高的数学能力。我们用小数点轻松计算的现代能力是逐渐发现完美符号的近乎奇迹的结果。	By relieving the brain of all unnecessary work, a good notation sets it free to concentrate on more advanced problems, and in effect increases the mental power of the race. Before the introduction of the Arabic notation, multiplication was difficult, and division even of integers called into play the highest mathematical faculties. Our modern power of easy reckoning with decimal fractions is the almost miraculous result of the gradual discovery of a perfect notation.",
  r"首先做，然后做对，然后做得更好。	First do it, then do it right, then do it better.",
  r"如果您愿意限制方法的灵活性，您几乎总能做得更好。	If you’re willing to restrict the flexibility of your approach, you can almost always do something better.",
  r"正确使用注释是为了弥补我们在代码中无法表达自己的不足。	The proper use of comments is to compensate for our failure to express ourselves in code.",
  r"最好的错误消息是永远不会出现的错误消息。	The best error message is the one that never shows up.",
  r"几乎任何人在计算机行业所做的任何事情，你都可以回顾文献并证明有人更早做过。	On almost anything someone does in the computer business, you can go back in the literature and prove someone had done it earlier.",
  r"对于那些在生活中扮演重要角色的人来说，电子邮件是一件很棒的事情。但不适合我；我的职责是弄清楚事情的真相。我所做的事情需要长时间的学习和不间断的专注	Email is a wonderful thing for people whose role in life is to be on top of things. But not for me; my role is to be on the bottom of things. What I do takes long hours of studying and uninterruptible concentration",
  r"我认为另一个好的原则是将演示或用户界面 (UI) 与应用程序的真正本质分开。通过遵循这一原则，我一次又一次地幸运地改变了。所以我认为这是一个很好的原则。	I think another good principle is separating presentation or user interface (UI) from the real essence of what your app is about. By following that principle I have gotten lucky with changes time and time again. So I think that’s a good principle to follow.",
  r"如果我比别人看得更远，那就是站在巨人的肩膀上。	If I have seen further than others, it is by standing upon the shoulders of giants.",
  r"持续部署先于持续交付。我们需要从中吸取教训。	Continuous deployment came before continuous delivery. We need to learn from it.",
  r"简单性难以构建、易于使用且难以收费。复杂性易于构建，难以使用且易于收费。	Simplicity is hard to build, easy to use, and hard to charge for. Complexity is easy to build, hard to use, and easy to charge for.",
  r"如果您在软件开发中只能改进一件事，那就让它获得更快的反馈。	If you can improve just one thing in your software development, make it getting faster feedback.",
  r"我会建议一种最终“非常好”的静态类型语言的方法，方法是首先创建一种动态语言，该语言可以将对象用作“语义类型定义器和防护”以安装在变量中，并使用它创建许多示例系统以查找什么级别的静态类型安全真正为自己付出代价，然后进行共同进化传递以使动态类型具有足够好的语义形状，以便它们动态执行的所有（或大部分）操作都可以在代码编写时完成。	I would suggest an approach to an eventual “really nice” statically typed language by first making a dynamic language that can use objects as “semantic type definers and guards” to be installed in variables and to make a number of sample systems with it to find what level of static type-safety really pays for itself, and to then do co-evolution passes to get the dynamic types in good enough semantic shape so that all (or most) of what they do dynamically can be done at code writing time.",
  r"如果你对编译器撒谎，它会报复的。	If you lie to the compiler, it will get its revenge.",
  r"标志表明发生了什么。除非他们的名字太通用了。	Flags indicate what happened. Unless their name is too generic.",
  r"添加功能的成本不仅仅是编写代码所需的时间。成本还包括增加未来扩展的障碍。诀窍是选择不会相互冲突的特征。	The cost of adding a feature isn’t just the time it takes to code it. The cost also includes the addition of an obstacle to future expansion. The trick is to pick the features that don’t fight each other.",
  r"默认意味着“我们还不知道的一切”。我们无法预见未来。	Default means ‘everything we don’t know yet’. We cannot foresee the future.",
  r"爱因斯坦一再争辩说，必须有对自然的简化解释，因为上帝不是反复无常或任意的。没有这样的信念可以安慰软件工程师。	Einstein repeatedly argued that there must be simplified explanations of nature, because God is not capricious or arbitrary. No such faith comforts the software engineer.",
  r"“没有银弹”这句话在业界被广泛使用。在本文中，我们将重温 Fred 的经典论文……	The phrase “No Silver Bullet” is widely used in the industry. In this article we will revisit the classic paper by Fred…",
  r"你可以批量生产硬件；你不能批量生产软件；你不能大量生产人类的思想。	You can mass-produce hardware; you cannot mass-produce software; you cannot mass-produce the human mind.",
  r"您希望任何程序员做的最后一件事就是弄乱内部状态	The last thing you wanted any programmer to do is mess with internal state",
  r"任何项目的第一步都是严重低估其复杂性和难度。	The first step of any project is to grossly underestimate its complexity and difficulty.",
  r"最好的软件架构“知道”什么经常变化，并使之变得简单。	The best software architecture “knows” what changes often and makes that easy.",
  r"青蛙只是没有注意到变化。不要像青蛙一样。关注大局。不断回顾你周围发生的事情，而不仅仅是你个人正在做的事情。	The frog just doesn’t notice the change. Don’t be like the frog. Keep an eye on the big picture. Constantly review what’s happening around you, not just what you personally are doing.",
  r"当您在寻找错误时，很难在您的代码中找到错误；当您假设您的代码没有错误时，它就更难了。	It’s hard enough to find an error in your code when you’re looking for it; its even harder when you’ve assumed your code is error-free.",
  r"你不会通过计划来完成任何事情。	You won’t get anything done by planning.",
  r"质量绝非偶然；它始终是聪明努力的结果。	Quality is never an accident; it is always the result of intelligent effort.",
  r"标准流程的危险在于人们会错失走重要捷径的机会。	The danger of standard process is that people will miss chances to take important shortcuts.",
  r"我认为我的软件将变得如此无处不在，如此重要，以至于如果它停止工作，就会发生骚乱。	I think my software is going to become so ubiquitous, so essential, that if it stops working, there will be riots.",
  r"计算机是否会思考的问题并不比潜艇是否会游泳的问题更有趣。	The question of whether a computer can think is no more interesting than the question of whether a submarine can swim.",
  r"对于公司及其客户而言，以客户为中心的软件和数字产品设计方法的回报是巨大而持久的。	The payoff of a customer-centric approach to software and digital product design is substantial and long-lasting for both companies and their customers.",
  r"没有什么比有效地做根本不应该做的事更无用的了。	There is nothing so useless as doing efficiently that which should not be done at all.",
  r"软件最终也必然获得与任何其他学科相同的尊重。	Software eventually and necessarily gained the same respect as any other discipline.",
  r"玛格丽特 H. 汉密尔顿	Margaret H. Hamilton",
  r"没有代码太大、扭曲或复杂到维护不能使它变得更糟的程度。	There is no code so big, twisted, or complex that maintenance can’t make it worse.",
  r"今天伟大的软件往往比明天完美的软件更可取。	Great software today is often preferable to perfect software tomorrow.",
  r"迄今为止，计算机科学家一直致力于开发功能强大的编程语言，使解决计算技术问题成为可能。在设计交互语言方面几乎没有付出任何努力。	Computer scientists have so far worked on developing powerful programming languages that make it possible to solve the technical problems of computation. Little effort has gone toward devising the languages of interaction.",
  r"解决问题要挖根，不要只砍叶。	When solving problems, dig at the roots instead of just hacking at the leaves.",
  r"傻瓜忽略复杂性。实用主义者受苦了。有些人可以避免它。天才将其删除。	Fools ignore complexity. Pragmatists suffer it. Some can avoid it. Geniuses remove it.",
  r"生物科学和计算科学面临的最终共同挑战是理解人脑的机制及其与人类思维的关系。	An ultimate joint challenge for the biological and the computational sciences is the understanding of the mechanisms of the human brain, and its relationship with the human mind.",
  r"渺小的头脑关注非凡的事物，伟大的头脑关注平凡的事物。	Small minds are concerned with the extraordinary, great minds with the ordinary.",
  r"复杂性的一个主要原因是软件供应商不加批判地采用了用户想要的几乎所有功能。	A primary cause of complexity is that software vendors uncritically adopt almost any feature that users want.",
  r"最好的准备方法是编写程序，并研究其他人编写的优秀程序。就我而言，我去了计算机科学中心的垃圾桶，找出了他们的操作系统列表。	The best way to prepare is to write programs, and to study great programs that other people have written. In my case, I went to the garbage cans at the Computer Science Center and fished out listings of their operating system.",
  r"继承当然是一个很好的答案，但谁知道这些问题呢？	Inheritance is surely a good answer but who knows the questions?",
  r"没有整体架构或设计的编程就像只用手电筒探索洞穴：你不知道你去过哪里，你不知道你要去哪里，你也不知道你在哪里是。	Programming without an overall architecture or design in mind is like exploring a cave with only a flashlight: You don’t know where you’ve been, you don’t know where you’re going, and you don’t know quite where you are.",
  r"一种不具备一切的语言实际上比具备一切的语言更容易编程。	A language that doesn’t have everything is actually easier to program in than some that do.",
  r"在编程领域，没有什么比未记录的程序更卑鄙的了。	There is nothing in the programming field more despicable than an undocumented program.",
  r"以两倍的速度产生错误结果的程序是无限慢的。	A program that produces incorrect results twice as fast is infinitely slower.",
  r"您的浏览器不支持音频元素。不要进行弱测试来制造覆盖范围的虚假感觉。长话短说；博士…	Your browser does not support the audio element. Don't make weak tests to create a false sensation of coverage. TL;DR…",
  r"程序员和正常人一样感性，不理性。	Programmers are as emotional and irrational as normal people.",
  r"责怪实施，而不是技术。	Blame the implementation, not the technique.",
  r"一个糟糕的系统每次都会打败一个好人。	A bad system will beat a good person every time.",
  r"敏捷方法的大部分敏捷性来自于团队中隐含的隐性知识，而不是将知识记录在计划中。	Agile methods derive much of their agility by relying on the tacit knowledge embodied in the team, rather than writing the knowledge down in plans.",
  r"家庭计算机革命带来的最好的事情之一可能是对逻辑的真正限制程度的普遍和广泛的理解。	One of the best things to come out of the home computer revolution could be the general and widespread understanding of how severely limited logic really is.",
  r"软件设计的变化最终将意味着“前进一步，后退两步”。这是不可避免的。	Changes in software design will eventually mean “one step forward, two steps back”. It is inevitable.",
  r"越早开始编码，程序花费的时间就越长。	The sooner you start to code, the longer the program will take.",
  r"一个足够好的第一个版本用 170,000 美元比用 0,000 美元需要更长的时间。	A good enough first version will take longer to produce with $170K than it would have with $0K.",
  r"在软件设计中，一切都是关于猜测、尝试，然后从经验中学习。	In software design, it’s all about making a guess, trying it, and then learning from the experience.",
  r"这会让您的一些读者感到惊讶，但我的主要兴趣不是计算机安全。我主要对编写按预期工作的软件感兴趣。	This will surprise some of your readers, but my primary interest is not with computer security. I am primarily interested in writing software that works as intended.",
  r"用 C 或 C++ 编写就像运行链锯，但所有的安全防护装置都被移除了。	Writing in C or C++ is like running a chain saw with all the safety guards removed.",
  r"在引入第三方工具包和库时，请注意保持系统的正交性。明智地选择您的技术。	Be careful to preserve the orthogonality of your system as you introduce third-party toolkits and libraries. Choose your technologies wisely.",
  r"我是 Developaralysis 的受害者：软件行业发展如此之快以至于没有人能够跟上的严重感觉。	I’m a victim of Developaralysis: the crippling sense that the software industry is evolving so fast that no one person can possibly keep up.",
  r"在拓荒者时代，他们用牛拉重物，当一头牛搬不动一根圆木时，他们就不会尝试培育更大的牛。我们不应该尝试更大的计算机，而应该尝试更多的计算机系统。	In pioneer days they used oxen for heavy pulling, and when one ox couldn’t budge a log, they didn’t try to grow a larger ox. We shouldn’t be trying for bigger computers, but for more systems of computers.",
  r"不要修补坏代码——重写它。	Don’t patch bad code — rewrite it.",
  r"当我们急于尝试下一个闪亮的神器工具而放弃当前的工具时，真正有效的新技术的好处就被放弃了。	The benefits of a truly effective new technology are foregone when, in the rush to try out the next shiny whiz-bang tool, we abandon the current one.",
  r"如果你有太多特殊情况，那你就做错了。	If you have too many special cases, you are doing it wrong.",
  r"迭代是人，递归是神	To iterate is human, to recurse divine",
  r"保持好奇心。广泛阅读。尝试新事物。我认为很多人们所说的智慧都归结为好奇心。	Be curious. Read widely. Try new things. I think a lot of what people call intelligence boils down to curiosity.",
  r"我的电脑速度如此之快，它可以在 5 分钟内完成一个无限循环。	My computer’s so fast it finishes an infinite loop in 5 minutes.",
  r"有两种构建软件设计的方法。一种方法是让它变得如此简单，以至于显然没有任何缺陷。另一种方法是让它变得如此复杂以至于没有明显的缺陷。	There are two ways of constructing a software design. One way is to make it so simple that there are obviously no deficiencies. And the other way is to make it so complicated that there are no obvious deficiencies.",
  r"人们喜欢在 Internet 上进行交互，喜欢做一些有趣的事情的群体归属感：这就是一些软件项目的诞生方式。	People enjoy the interaction on the Internet, and the feeling of belonging to a group that does something interesting: that’s how some software projects are born.",
  r"没有什么比在紧迫的期限内工作并仍然花时间清理工作更难的了。	Nothing is harder than working under a tight deadline and still taking the time to clean up as you go.",
  r"如果将 4 种代码味道结合起来会发生什么？	What happens if you combine 4 ",
  r"有时是那些谁也想不到的人，谁做的事谁也想不到。	Sometimes it is the people no one can imagine anything of who do the things no one can imagine.",
  r"直到你明白什么时候不应该使用它，你才算是掌握了一种工具。	You haven’t mastered a tool until you understand when it should not be used.",
  r"-CI 和它的老大哥 CD 要求我们一步一步地进行更改，并在每一步之后都准备好一些东西，而不是在它“完成”之前一直致力于一个功能。这在一些重要方面改变了我们对系统设计的看法。	Instead of working on a feature until it is “finished”, CI and its big brother CD demand of us to make changes in small steps and have something ready for use after every small step. This changes how we think about the design of our system in some important ways.",
  r"不要（太）聪明。我的观点是不鼓励过于聪明的代码，因为“聪明的代码”很难编写、容易出错、更难维​​护，而且通常不会比更简单的替代代码快，因为它很难优化。	Don’t be (too) clever. My point was to discourage overly clever code because “clever code” is hard to write, easy to get wrong, harder to maintain, and often no faster than simpler alternatives because it can be hard to optimize.",
  r"多余的评论只是收集谎言和错误信息的地方。	Redundant comments are just places to collect lies and misinformation.",
  r"-TDD 最有价值的事情之一是它让我们一次专注于一件事。我们要么在写代码，要么在重构；我们从来没有同时做这两件事。	One of the most valuable things about TDD is that it lets us concentrate on one thing at a time. We are either writing code or refactoring; we are never doing both at once.",
  r"反馈对我们的学习能力至关重要。如果没有快速有效的反馈，我们只能猜测。反馈的速度和质量都很重要。如果反馈太晚，它是没有用的。如果它具有误导性或错误性，我们基于其做出的决定也将是错误的	Feedback is essential to our ability to learn. Without fast, effective feedback, we are guessing. Both the speed and the quality of feedback matter. If the feedback is too late, it is useless. If it is misleading or wrong, the decisions that we make on its basis will be wrong, too",
  r"一个人必须处理的最精密和最重要的机制是人体机器。	The most delicate and the most essential piece of mechanism that a man has to deal with is the human machine.",
  r"完全符合糟糕规范的程序是糟糕的程序。	A program which perfectly meets a lousy specification is a lousy program.",
  r"没有缺陷的软件是不存在的。	Defect-free software does not exist.",
  r"对对象的“天真”或“自然”期望代表了一种完整性——Alan Kay 称之为用户错觉——必须得到尊重。	The “naive” or “natural” expectations of objects represent a kind of integrity — what Alan Kay called a user illusion — that must be respected.",
  r"错误通常是子系统之间不良接口的特征，通常是人们在设计子系统时沟通不充分的结果。当发现错误时，倾向于在子系统内处理它，而不是将程序作为一个整体来看待。	Bugs are often characteristic of a bad interface between subsystems, frequently a result of inadequate communication among people when they design the subsystems. When a bug is found, there is a tendency to handle it within the subsystem and not look at the program as a whole.",
  r"除了基本的数学能力，优秀程序员和优秀程序员之间的区别还在于语言能力。	Beyond basic mathematical aptitude, the difference between good programmers and great programmers is verbal ability.",
  r"创建事件时，我们应该将触发器与操作分离。	When creating events, we should decouple the trigger from the action.",
  r"我一直在尝试做的一件事是寻找更简单的规则或支持好或坏设计的规则。我认为最有价值的规则之一是避免重复。“一次且仅一次”是极限编程的短语。	One of the things I’ve been trying to do is look for simpler or rules underpinning good or bad design. I think one of the most valuable rules is avoiding duplication. “Once and only once” is the Extreme Programming phrase.",
  r"软件工作中最重要的因素不是程序员使用的工具和技术，而是程序员自身的素质。	The most important factor in software work is not the tools and techniques used by the programmers but rather the quality of the programmers themselves.",
  r"我们认为采用数据驱动方法的设计实践无法最大化封装，因为它们过快地关注对象的实现。我们提出了一种替代的面向对象设计方法，它采用责任驱动的方法。	We argue that design practices which take a data-driven approach fail to maximize encapsulation because they focus too quickly on the implementation of objects. We propose an alternative object-oriented design method which takes a responsibility-driven approach.",
  r"如果您的方法令人嫉妒并且不信任委托，那么您应该开始这样做。	If your method is jealous and don’t trust in delegation you should start to do it.",
  r"第七天，上帝说：“发船吧！我们稍后会发布补丁。”	On the seventh day, God said, “Ship it! We’ll release patches later.”",
  r"自动化测试是一个安全网，可以保护程序不受其程序员的影响。	Automated testing is a safety net that protects the program from its programmers.",
  r"句法糖导致分号癌。	Syntactic sugar causes cancer of the semicolon.",
  r"引用透明性是一个非常理想的属性：它意味着函数在给定相同输入的情况下始终产生相同的结果，而不管它们在何时何地被调用。	Referential transparency is a very desirable property: it implies that functions consistently yield the same results given the same input, irrespective of where and when they are invoked.",
  r"可以接收很多不同（而不是多态参数）的魔法函数	Magic functions that can receive a lot of different (and not polymorphic arguments)",
  r"质量是进度和成本的盟友，而不是他们的对手。如果我们不得不牺牲质量来满足进度，那是因为我们从一开始就做错了工作。	Quality is the ally of schedule and cost, not their adversary. If we have to sacrifice quality to meet schedule, it’s because we are doing the job wrong from the very beginning.",
  r"缺陷不是免费的。有人制造它们，并因制造它们而获得报酬。	Defects are not free. Somebody makes them, and gets paid for making them.",
  r"人们往往会高估一年内可以完成的事情，而低估五年或十年内可以完成的事情。	People tend to overestimate what can be done in one year and to underestimate what can be done in five or ten years.",
  r".. 罗马帝国衰落的主要原因之一是，缺少零，他们无法指示其 C 程序的成功终止。	.. one of the main causes of the fall of the Roman Empire was that, lacking zero, they had no way to indicate successful termination of their C programs.",
  r"用于开发软件的方法和最佳实践可以成功地应用于生活中的任何挑战。	The methodologies and best practices used to develop software can be applied successfully to any challenge in life.",
  r"软件从来都不是完美的，也不会变得完美。但这是制造垃圾的许可证吗？缺少的成分是我们不愿量化质量。	Software never was perfect and won’t get perfect. But is that a license to create garbage? The missing ingredient is our reluctance to quantify quality.",
  r"软件是艺术性和工程性的完美结合。	Software is a great combination between artistry and engineering.",
  r"你开始挖掘代码。你挖掘的越多，你发现的东西就越多。最终你会把自己挖进一个无法自拔的洞里。为避免自掘坟墓，必须系统地进行重构。	You start digging in the code. The more you dig, the more stuff you turn up. Eventually you dig yourself into a hole you can’t get out of. To avoid digging your own grave, refactoring must be done systematically.",
  r"运气是设计的残余。	Luck is the residue of design.",
  r"程序最重要的属性是它是否实现了用户的意图。	The most important property of a program is whether it accomplishes the intention of its user.",
  r"我们对软件质量问题的了解与他们对 1600 年代黑死病的了解一样多。我们看到了受害者的痛苦，并帮助焚烧了尸体。我们不知道是什么原因造成的；我们真的不知道是否只有一种疾病。我们只是受苦——并不断将我们的污水倒入我们的供水系统。	We know about as much about software quality problems as they knew about the Black Plague in the 1600s. We’ve seen the victims’ agonies and helped burn the corpses. We don’t know what causes it; we don’t really know if there is only one disease. We just suffer — and keep pouring our sewage into our water supply.",
  r"你可能不认为程序员是艺​​术家，但编程是一个极富创造力的职业。这是基于逻辑的创造力。	You might not think that programmers are artists, but programming is an extremely creative profession. It’s logic-based creativity.",
  r"一种不影响您对编程的思考方式的语言不值得了解。	A language that doesn’t affect the way you think about programming, is not worth knowing.",
  r"硬件：计算机系统中可以被踢的部分。	Hardware: the parts of a computer system that can be kicked.",
  r"计算机只是一种乐器，其音乐就是思想。	The computer is simply an instrument whose music is ideas.",
  r"对称性是一个降低复杂度的概念（协程包括子例程）；到处寻找它。	Symmetry is a complexity-reducing concept (co-routines include subroutines); seek it everywhere.",
  r"复制比错误的抽象要便宜得多。	Duplication is far cheaper than the wrong abstraction.",
  r"注意小事；小漏会沉大船。	Watch the little things; a small leak will sink a great ship.",
  r"成功的软件总是会发生变化。	Successful software always gets changed.",
  r"并非所有注意到开源代码中错误的眼睛都属于会为了公共利益报告或修复错误的圣人。	Not all eyes that notice bugs in Open Source code belong to saints who will report or repair them in the interest of the public good.",
  r"我们渴望新的感觉，但很快就会对它们漠不关心。昨日的奇事在今天已司空见惯。	We crave for new sensations but soon become indifferent to them. Wonders of yesterday are today common occurrences.",
  r"聪明的程序员和专业的程序员之间的一个区别是，专业的程序员明白清晰才是王道。专业人士永远善用他们的权力，编写其他人可以理解的代码。	One difference between a smart programmer and a professional programmer is that the professional understands that clarity is king. Professionals use their powers for good and write code that others can understand.",
  r"如果一个名字已经被使用，我们总是可以在它前面加上'the'。	If a name is already used, we can always prefix it with ‘the’.",
  r"任何设计系统（广义定义）的组织都会产生一个设计，其结构是组织通信结构的副本。	Any organization that designs a system (defined broadly) will produce a design whose structure is a copy of the organization’s communication structure.",
  r"我们正在进入一个数据可能比软件更重要的新世界。	We’re entering a new world in which data may be more important than software.",
  r"您可能学到的最灾难性的事情是您的第一门编程语言。	The most disastrous thing that you can ever learn is your first programming language.",
  r"当你真正坐下来写一些代码时，你会学到一些你从用建模术语思考它们时没有得到的东西……那里有一个反馈过程，你只能通过执行一些事情并看到什么有效才能真正得到。	When you actually sit down to write some code, you learn things that you didn’t get from thinking about them in modeling terms…there is a feedback process there that you can only really get at from executing some things and seeing what works.",
  r"首先，解决问题。然后，编写代码。	First, solve the problem. Then, write the code.",
  r"兼容意味着故意重复别人的错误。	Compatibility means deliberately repeating other people’s mistakes.",
  r"有时周一赖在床上是值得的，而不是用一周剩下的时间来调试周一的代码。	Sometimes it pays to stay in bed on Monday, rather than spending the rest of the week debugging Monday’s code.",
  r"分离的 Scrum Master 的 Scrum 想法对 Scrum 来说是好的，但不适合大多数项目。良好的发展不仅需要说话者，还需要行动者。	The Scrum idea of a separated Scrum Master is good for Scrum, but not appropriate for most projects. Good development requires not just talkers but doers.",
  r"它更多的是关于足够好而不是关于对或错。	It´s more about good enough than it is about right or wrong.",
  r"在人工智能上度过一年，足以让人相信上帝。	A year spent in artificial intelligence is enough to make one believe in God.",
  r"聪明的数据结构和愚蠢的代码比相反的方式要好得多。	Smart data structures and dumb code works a lot better than the other way around.",
  r"没有数据的人只是另一个有意见的人	A person without data is just another person with an opinion",
  r"当事实是您拥有一个复杂的系统并且有时需要一段时间才能让所有组件和平共处时，很容易喊出“错误”。	It’s easy to cry “bug” when the truth is that you’ve got a complex system and sometimes it takes a while to get all the components to co-exist peacefully.",
  r"静态类型之于可靠的编程就像拼写检查器之于优秀的作家。	Static typing is to reliable programming what a spelling checker is to a good writer.",
  r"除了硬实时环境之外，快速软件的秘诀是首先编写可调软件，然后调整它以获得足够的速度。	The secret to fast software, in all but hard real-time contexts, is to write tunable software first and then tune it for sufficient speed.",
  r"乐观是编程的职业危害：反馈就是治疗。	Optimism is an occupational hazard of programming: feedback is the treatment.",
  r"始终编​​写代码，好像最终维护您的代码的人将是一个知道您住在哪里的暴力精神病患者。	Always code as if the guy who ends up maintaining your code will be a violent psychopath who knows where you live.",
  r"我们是 xUnit 的忠实粉丝。但是我们不太关心程序员。	We are big fans of xUnit. But we don’t care much for the programmers.",
  r"任何傻瓜都可以编写计算机可以理解的代码。优秀的程序员编写人类可以理解的代码。	Any fool can write code that a computer can understand. Good programmers write code that humans can understand.",
  r"好的编程就是好的写作。	Good programming is good writing.",
  r"程序员的麻烦在于，你永远无法知道程序员在做什么，直到为时已晚。	The trouble with programmers is that you can never tell what a programmer is doing until it’s too late.",
  r"软件的核心是它为用户解决领域相关问题的能力。所有其他功能，尽管它们可能很重要，但都支持这个基本目的	The heart of software is its ability to solve domain-related problems for its user. All other features, vital though they may be, support this basic purpose",
  r"想想我修改代码的经历，我发现我花在阅读现有代码上的时间比写新代码的时间要多得多。因此，如果我想让我的代码便宜，我应该让它易于阅读。	Thinking about my experience of modifying code, I see that I spend much more time reading the existing code than I do writing new code. If I want to make my code cheap, therefore, I should make it easy to read.",
  r"您不拥有对象。	You don’t own objects.",
  r"如果你把一团糟自动化，你就会得到一个自动化的烂摊子。	If you automate a mess, you get an automated mess.",
  r"绝对没有理由让计算机像人一样愚蠢。	There is absolutely no reason to make computers as stupid as people are.",
  r"编程是一种最好通过实践和示例而不是书本获得的技能。	Programming is a skill best acquired by practice and example rather than from books.",
  r"程序本来是供人阅读的，只是偶然地供计算机执行。	Programs are meant to be read by humans and only incidentally for computers to execute.",
  r"人类在第 10 行之后会感到无聊。	Humans get bored beyond line 10.",
  r"你会破产，因为你相信规则的例外会制定新的规则。	You will fall to ruin because you believe that exceptions to the rule make new rules.",
  r"有很多不同的例外是非常好的。您的代码是声明式的且健壮的。或不？	It is very nice to have lots of different exceptions. Your code is declarative and robust. Or not?",
  r"花在阅读（代码）和写作上的时间比例远远超过 10 比 1 ……（因此）读起来容易，写起来也容易。	The ratio of time spent reading (code) versus writing is well over 10 to 1 … (therefore) making it easy to read makes it easier to write.",
  r"别担心设计，如果你倾听你的代码，一个好的设计就会出现……听听技术人员的意见。如果他们抱怨难以做出改变，那么认真对待这些抱怨并给他们时间来解决问题。	Don’t worry about design, if you listen to your code a good design will appear…Listen to the technical people. If they are complaining about the difficulty of making changes, then take such complaints seriously and give them time to fix things.",
  r"人们认为计算机科学是天才的艺术，但实际情况恰恰相反，只是很多人在做事情，就像一堵小石头墙。	People think that computer science is the art of geniuses but the actual reality is the opposite, just many people doing things that build on each other, like a wall of mini stones.",
  r"经验有用吗？不！如果我们做错事就不会。	Does experience help? NO! Not if we are doing the wrong things.",
  r"代码应该非常有表现力以避免大多数评论。会有一些例外，但我们应该将评论视为“表达失败”，直到被证明是错误的。	Code should be remarkably expressive to avoid most of the comments. There’ll be a few exceptions, but we should see comments as an ‘failure of expression’ until proven wrong.",
  r"如果解释你正在做的事情需要不止一句话，这几乎总是表明你正在做的事情太复杂了。	If it takes more than a sentence to explain what you are doing, it’s almost always a sign that what you are doing is too complicated.",
  r"不要执行超过请求。	Do not perform more than requested.",
  r"采取合理的步骤来测试、记录和以其他方式引起对每个模块和例程中所做假设的注意。	Take reasonable steps to test, document, and otherwise draw attention to the assumptions made in every module and routine.",
  r"最有效的调试工具仍然是仔细思考，加上明智地放置打印语句。	The most effective debugging tool is still careful thought, coupled with judiciously placed print statements.",
  r"-Wrap Method 的主要缺点是它可能导致名称不佳。在前面的示例中，我们重命名了支付方法 dispatchPay() 只是因为我们需要为原始方法中的代码取一个不同的名称。	The primary disadvantage of Wrap Method is that it can lead to poor names. In the previous example, we renamed the pay method dispatchPay() just because we needed a different name for code in the original method.",
  r"-sort、doSort、basicSort、doBasicSort、primitiveSort、superBasicPrimitiveSort，谁做真正的工作？	sort, doSort, basicSort, doBasicSort, primitiveSort, superBasicPrimitiveSort, who does the real work?",
  r"我们遵循的启发式方法是，每当我们觉得需要评论某些内容时，我们就会编写一个方法。	A heuristic we follow is that whenever we feel the need to comment something, we write a method instead.",
  r"我们不是名词，我们是动词。我不是一个东西——一个演员，一个作家——我是一个做事的人——我写作，我表演——我永远不知道我接下来要做什么。我认为如果你把自己当成一个名词，你可能会被监禁。	We are not nouns, we are verbs. I am not a thing — an actor, a writer — I am a person who does things — I write, I act — and I never know what I’m going to do next. I think you can be imprisoned if you think of yourself as a noun.",
  r"调试时，新手插入纠正代码；专家删除有缺陷的代码。	When debugging, novices insert corrective code; experts remove defective code.",
  r"在编程中，如果有人告诉您“您太复杂了”，他们要么落后您 10 步，要么领先您 10 步。	In programming, if someone tells you “you’re overcomplicating it,” they’re either 10 steps behind you or 10 steps ahead of you.",
  r"语言设计者不是知识分子。他们不像你希望的那样对思考感兴趣。他们只是想完成一种语言并开始使用它。	Language designers are not intellectuals. They’re not as interested in thinking as you might hope. They just want to get a language done and start using it.",
  r"这就是我写作的原因，因为除非回顾，否则生活永远不会成功。你无法控制生活，至少你可以控制你的版本。	That’s why I write, because life never works except in retrospect. You can’t control life, at least you can control your version.",
  r"-sort、sortOld、sort20210117、workingSort，拥有它们真是太好了。万一	sort, sortOld, sort20210117, workingSort, It is great to have them all. Just in case",
  r"当编程语言的程序需要关注无关紧要的内容时，它就是低级的。	A programming language is low level when its programs require attention to the irrelevant.",
  r"无论你编写干净的代码有多慢，如果你弄得一团糟，你总是会更慢。	No matter how slow you are writing clean code, you will always be slower if you make a mess.",
  r"两个班纠缠在一起的爱情。	Two classes entangled in love.",
  r"用 C 写的最后一件好事是 Franz Schubert 的第九交响曲。	The last good thing written in C was Franz Schubert’s Symphony Number 9.",
  r"最漂亮的代码、最漂亮的功能、最漂亮的程序有时根本就没有。	The most beautiful code, the most beautiful functions, and the most beautiful programs are sometimes not there at all.",
  r"时间戳被广泛使用。他们有一个中央发证机构，不会回去，是吗？	Timestamps are widely used. They have a central issuing authority and do not go back, do they?",
  r"使用 C++ 的问题是……该语言已经存在一种强烈的趋势，要求您在可以做任何事情之前了解一切。	The problem with using C++… is that there’s already a strong tendency in the language to require you to know everything before you can do anything.",
  r"我做过软件工程师、小说家、记者和经理——管理开发人员无疑是我做过的最棘手的事情。	I’ve been a software engineer, a novelist, a journalist, and a manager — and managing developers is easily the trickiest thing I’ve ever done.",
  r"我们用来表达想法的语言对我们的思维过程有很大的影响。	The language in which we express our ideas has a strong influence on our thought processes.",
  r"优化系统的一部分必然会破坏整个系统。	That which optimizes one part of the system necessarily undermines the system as a whole.",
  r"有两种写代码的方法：写简单的代码，明显没有bug，或者写复杂的代码，没有明显的bug。	There are two ways to write code: write code so simple there are obviously no bugs in it, or write code so complex that there are no obvious bugs in it.",
  r"将算法处理为一系列嵌套回调并不聪明。	Processing an algorithm as a sequence of nested callbacks is not clever.",
  r"事实上，软件工程的困境不是由于缺乏工具或适当的管理，而是主要是由于缺乏足够的技术能力。	Indeed, the woes of Software Engineering are not due to lack of tools, or proper management, but largely due to lack of sufficient technical competence.",
  r"大多数开发人员讨厌测试。他们倾向于轻柔地测试，下意识地知道代码会在哪里出错并避开薄弱环节。务实的程序员是不同的。我们现在被驱使去寻找我们的错误，这样我们就不必忍受别人以后发现我们的错误的耻辱。	Most developers hate testing. They tend to test gently, subconsciously knowing where the code will break and avoiding the weak spots. Pragmatic Programmers are different. We are driven to find our bugs now, so we don’t have to endure the shame of others finding our bugs later.",
  r"我们必须停止为程序员优化，开始为用户优化。	We have to stop optimizing for programmers and start optimizing for users.",
  r"另一种过早的优化模式	Yet another premature optimization pattern",
  r"错误处理很重要，但如果它混淆了逻辑，那就错了。	Error handling is important, but if it obscures logic, it’s wrong.",
  r"我雇用终结者是因为我是一个很好的开始者和一个糟糕的终结者。	I hired finishers because I’m a good starter and a poor finisher.",
  r"如果您厌倦了编写循环，请休息一下，稍后再继续。	If you get tired of writing for loops, take a break and continue later.",
  r"我们在学校学过循环。但是枚举器和迭代器是下一代。	We learned loops back in school. But enumerators and iterators are the next generation.",
  r"标准的好处是有很多可供选择。	The nice thing about standards is that there are so many to choose from.",
  r"从事独立项目很容易。除非你在几个月后回到它。与许多其他开发人员合作……	Working on a solo project is easy. Unless you go back to it after some months. Working with many other developers…",
  r"删除的代码是调试代码。	Deleted code is debugged code.",
  r"一个好的程序员是在穿过单行道之前总是向两边看的人。	A good programmer is someone who always looks both ways before crossing a one-way street.",
  r"程序越干净、越好，它运行的速度就越快。如果没有，将很容易让它变快。	The cleaner and nicer the program, the faster it’s going to run. And if it doesn’t, it’ll be easy to make it fast.",
  r"最好的程序员只编写简单的程序。	The best programmers write only easy programs.",
  r"第一次就做对并不重要。最后一次把它做好是至关重要的。	It’s not at all important to get it right the first time. It’s vitally important to get it right the last time.",
  r"计算机程序员是宇宙的创造者，他是宇宙的立法者。没有剧作家，没有舞台导演，没有皇帝，无论多么强大，都行使过如此绝对的权力来安排舞台或战场。	The computer programmer is a creator of universes for which he alone is the lawgiver. No playwright, no stage director, no emperor, however powerful, has exercised such absolute authority to arrange a stage or field of battle.",
  r"多产的开发人员并不总是写很多代码，相反他们解决了很多问题。这两件事是不一样的。	Prolific developers don’t always write a lot of code, instead they solve a lot of problems. The two things are not the same.",
  r"软件和大教堂大同小异。首先我们建造它们，然后我们祈祷。	Software and cathedrals are much the same. First we build them, then we pray.",
  r"从本质上讲，工程就是用你所拥有的做你想做的事。	In essence, engineering is doing what you want with what you have.",
  r"我喜欢软件，因为如果你能想象，你就能建造它。	I love software, because if you can imagine something, you can build it.",
  r"复制粘贴是设计错误。	Copy and paste is a design error.",
  r"-DRY 是我们的口头禅。老师告诉我们要消除重复。我们需要超越。	DRY is our mantra. Teachers tell us to remove duplication. We need to go beyond.",
  r"如果您有三只宠物狗，请给它们取名。如果您有 10,000 头牛，请不要打扰。如今，为计算机上的每个文件命名的想法是荒谬的。	If you have three pet dogs, give them names. If you have 10,000 head of cattle, don’t bother. Nowadays, the idea of giving a name to every file on your computer is ridiculous.",
  r"如果方法相同，则方法应该可以互换。	Methods should be interchangeable if they do the same.",
  r"最好的气味是很容易发现的，而且大多数时候会把你引向真正有趣的问题。数据类（包含所有数据但没有行为的类）就是很好的例子。你看着他们，问自己这个班级应该有什么行为。	The best smells are something that’s easy to spot and most of time lead you to really interesting problems. Data classes (classes with all data and no behavior) are good examples of this. You look at them and ask yourself what behavior should be in this class.",
  r"-TL;DR：不要创建贫血对象。使用自动工具要少得多。	TL;DR: Do not create anemic objects. Much less with automatic tools.",
  r"编写软件时，就好像我们是唯一必须理解它的人一样，这是可能犯的最大错误和错误假设之一。	Writing software as if we are the only person that ever has to comprehend it is one of the biggest mistakes and false assumptions that can be made.",
  r"异常是区分快乐路径和麻烦路径的好方法。但是我们倾向于使我们的解决方案过于复杂。	Exceptions are a great way of separating happy path versus trouble path. But we tend to over-complicate our solutions.",
  r"具有错误策略的缓存是内存泄漏的另一个名称。	A cache with a bad policy is another name for a memory leak.",
  r"公司应该像网络安全公司应该制造自己的阿司匹林一样经常制造自己的企业系统。	Companies should make their own enterprise systems as often as network security companies should manufacture their own aspirin.",
  r"-DRY——不要重复自己——每条知识在系统中都必须有一个单一的、明确的、权威的表示。	DRY — Don’t Repeat Yourself — Every piece of knowledge must have a single, unambiguous, athoritative representation within a system.",
  r"简单是效率的灵魂。	Simplicity is the soul of efficiency.",
  r"在控制面板中改变系统行为是客户的梦想。以及软件工程师的噩梦。	Changing system behavior in a control board is the customer’s dream. And the software engineer’s nightmare.",
  r"每次写评论都要龇牙咧嘴，感觉自己表达能力的失败	Every time you write a comment, you should grimace and feel the failure of your ability of expression",
  r"原型的价值在于它给你的教育，而不是代码本身。	The value of a prototype is in the education it gives you, not in the code itself.",
  r"得到东西是普遍和安全的。但这是一个非常糟糕的做法。	Getting things is widespread and safe. But it is a very bad practice.",
  r"有些人在遇到问题时会想“我知道，我会使用正则表达式”。现在他们有两个问题。	Some people, when confronted with a problem, think “I know, I’ll use regular expressions.” Now they have two problems.",
  r"编写害羞的代码——不向其他模块透露任何不必要的东西并且不依赖于其他模块的实现的模块。	Write shy code — modules that don’t reveal anything unnecessary to other modules and that don’t rely on other modules’ implementations.",
  r"使程序看起来简单的并不是语言。是程序员让语言显得简单。	It is not the language that makes programs appear simple. It is the programmer that make the language appear simple.",
  r"如果您必须花精力查看一段代码并弄清楚它在做什么，那么您应该将它提取到一个函数中，并以什么命名该函数。	If you have to spend effort looking at a fragment of code and figuring out what it’s doing, then you should extract it into a function and name the function after the what.",
  r"代码有很多注释。注释与实现耦合并且几乎没有维护。	Code has lots of comments. Comments are coupled to implementation and hardly maintained.",
  r"调试的难度是编写代码的两倍。因此，如果您尽可能聪明地编写代码，那么根据定义，您还不够聪明，无法调试它。	Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it.",
  r"没有需求或设计，编程就是向空文本文件添加错误的艺术。	Without requirements or design, programming is the art of adding bugs to an empty text file.",
  r"计算机是一台愚蠢的机器，却有能力做非常聪明的事情，而计算机程序员是聪明的人，却有能力做非常愚蠢的事情。简而言之，他们是绝配。	A computer is a stupid machine with the ability to do incredibly smart things, while computer programmers are smart people with the ability to do incredibly stupid things. They are, in short, a perfect match.",
  r"测试应该耦合到代码的行为并与代码的结构分离	Tests should be coupled to the behavior of code and decoupled from the structure of code",
  r"当你可以花 6 个小时来自动化它时，永远不要花 6 分钟手工做某事。	Never spend 6 minutes doing something by hand when you can spend 6 hours failing to automate it.",
  r"说得对，说得清楚，说得简洁，说得快。以该顺序。	Make it correct, make it clear, make it concise, make it fast. In that order.",
  r"编程不是零和游戏。向其他程序员教授一些东西并不会把它从你身上夺走。	Programming is not a zero-sum game. Teaching something to a fellow programmer doesn’t take it away from you.",
  r"使程序看起来简单的并不是语言。是程序员让语言显得简单！	It is not the language that makes programs appear simple. It is the programmer that make the language appear simple!",
  r"布尔值应该只是 True 和 False	Booleans should be just True and false",
  r"编程可以很有趣，密码学也可以；但是它们不应合并。	Programming can be fun, so can cryptography; however they should not be combined.",
  r"代码难读。没有语义的名字很棘手。有时使用语言的偶然复杂性。	Code difficult to read. Tricky with names without semantic. Sometimes using language’s accidental complexity.",
  r"业余软件工程师总是在寻找魔法。	The amateur software engineer is always in search of magic.",
  r"测试是我们的安全网。如果我们不相信他们的诚信，我们将处于极大的危险之中。	Tests are our safety nets. If we don’t trust on their integrity we will be in great danger.",
  r"您自己的任何代码如果六个月或更长时间没有查看，也可能是由其他人编写的。	Any code of your own that you haven’t looked at for six or more months might as well have been written by someone else.",
  r"不要注释不好的代码——重写它。	Don’t comment bad code — rewrite it.",
  r"名字到底是什么？— 第二部分：康复	What exactly is a name? — Part II: Rehab",
  r"我们都同意：好名字永远是最重要的。让我们找到他们。	We all agree: a good name is always the most important thing. Let’s find them.",
  r"代码就像幽默。当你不得不解释它时，这很糟糕。	Code is like humor. When you have to explain it, it’s bad.",
  r"当我第一次接触技术时，我并不真正理解什么是开源。一旦我开始编写软件，我就意识到这将是多么重要。	When I first got into technology I didn’t really understand what open source was. Once I started writing software, I realized how important this would be.",
  r"真相只能在一个地方找到：代码。	Truth can only be found in one place: the code.",
  r"如果你说“我告诉过你”，那么你就是失败的人。因为你知道，但没能阻止火车失事。	If you say “I told you so”, you are the one who has failed. Because you knew, but did not manage to stop the train wreck.",
  r"阅读代码比编写代码更难。	It’s harder to read code than to write it.",
  r"不是运营商是我们的朋友。不是不是运营商不是我们的朋友	Not operator is our friend. Not not operator is not our friend",
  r"软件的复杂性来自试图让一件事做两件事。	So much complexity in software comes from trying to make one thing do two things.",
  r"一个类定义了具有很多属性的对象。	A class defines objects with lots of attributes.",
  r"有一天，我女儿进来了，越过我的肩膀看着一些 Perl 4 代码，然后说：“那是什么，发誓？”	One day my daughter came in, looked over my shoulder at some Perl 4 code, and said, “What is that, swearing?”",
  r"一个长的描述性名称比一个简短的神秘名称更好。长描述性名称优于长描述性注释。-	A long descriptive name is better than a short enigmatic name. A long descriptive name is better than a long descriptive comment. -",
  r"缩写非常重要，这样我们看起来很聪明，可以节省记忆和思维空间	Abbreviating is very important so that we look smart and save memory and mind space",
  r"谈话很便宜。给我看代码。	Talk is cheap. Show me the code.",
  r"遗留代码是未经测试的代码。	Legacy code is code without tests.",
  r"如何解耦遗留系统	How to Decouple a Legacy System",
  r"改进遗留代码的练习	An exercise improving legacy code",
  r"软件测试不仅确保没有错误，而且确保价值的存在。	Software testing is not only ensuring absence of bugs but also ensuring presence of value.",
  r"更改规范以适应程序比相反更容易。	It is easier to change the specification to fit the program than vice versa.",
  r"当心上述代码中的错误；我只是证明了它是正确的，没有尝试过。	Beware of bugs in the above code; I have only proved it correct, not tried it.",
  r"停止称他们为“错误”	Stop Calling them ‘Bugs’",
  r"让我们以正确的方式命名事物	Let’s name things the right way",
  r"无论您的计划如何，生产环境都是最终的测试环境。	Regardless of your plans, production is the ultimate testing environment.",
  r"一个人的蹩脚软件是另一个人的全职工作。	One man’s crappy software is another man’s full time job.",
  r"编译器和警告灯可提供帮助。不要忽视他们。	Compilers and warnings lights are there for help. Don’t ignore them.",
  r"好的软件，比如 wine，需要时间。	Good software, like wine, takes time.",
  r"注意零。如果有零，有人会除以它。	Pay attention to zeros. If there is a zero, someone will divide by it.",
  r"有人会说他们有一个经过验证的程序，而且它只是因为根据某些验证器符合其规范而被验证。但是验证器可能有错误。规范中可能有错误。	Somebody will say they have a program that’s verified and it’s only verified because it met its specification according to some verifier. But the verifier might have bugs in it. The specifications might have bugs in them.",
  r"-Beta 测试是测试实践薄弱和与客户沟通不畅的症状。	Beta testing is a symptom of weak testing practices and poor communication with customers.",
  r"发现意外比确认已知更重要。	Discovering the unexpected is more important than confirming the known.",
  r"将 Internet 上的代码粘贴到生产代码中就像在街上找到的口香糖一样。	Pasting code from the internet into production code is like chewing gum found in the street.",
  r"软件开发最重要的一个方面是清楚你要构建什么。	The most important single aspect of software development is to be clear about what you are trying to build.",
  r"如果一个 Perl 程序在你的老板解雇你之前就完成了工作，那么它就是正确的。	A Perl program is correct if it gets the job done before your boss fires you.",
  r"-RegEx 是一个很棒的工具，我们应该谨慎使用它们，而不是看起来很聪明。	RegEx are a wonderful tool, we should to use them carefully and not to look smart.",
  r"如果调试是去除软件错误的过程，那么编程一定是把它们放进去的过程。	If debugging is the process of removing software bugs, then programming must be the process of putting them in.",
  r"第一节编程课：控制结构。高级开发人员课程：避免使用它们。	First programming lesson: Control structures. Senior developer lesson: avoid them.",
  r"打造出色产品的关键是首先打造出色的团队。对我来说，伟大的团队不受角色的束缚，但他们受到前进的推动。	The key to building a great product is building a great team first. To me, great teams aren’t bound by roles, but they’re driven by moving forward.",
  r"精确的语言不是问题。清晰的语言是问题所在。	Precise language is not the problem. Clear language is the problem.",
  r"农药悖论。你用来防止或发现错误的每一种方法都会留下一些更微妙的错误，这些方法对这些错误无效。	The pesticide paradox. Every method you use to prevent or find bugs leaves a residue of subtler bugs against which those methods are ineffective.",
  r"在测试行为时模拟是一个很好的帮助。与许多其他工具一样，我们正在滥用它们。	Mocking is a great aid when testing behavior. Like with many other tools, we are abusing them.",
  r"我试着主要考虑先决条件，并检查构造函数中的内容和函数的开头。	I try to think mostly in terms of preconditions, and checking things in the constructor and the beginning of a function.",
  r"与大多数其他学科一样，学习编程艺术包括首先学习规则，然后学习何时打破规则。	Learning the art of programming, like most other disciplines, consists of first learning the rules and then learning when to break them.",
  r"开发人员测试是实现问责制的重要一步。它为开发人员提供了一种方式来展示他们生产的软件的质量。	Developer testing is an important step towards accountability. It gives developers a way to demonstrate the quality of the software they produce.",
  r"培训师或顾问的作用是赋予客户权力，而不是让自己变得不可或缺。	The role of a trainer or consultant is to empower the customer, not to make himself indispensable.",
  r"正确性显然是首要品质。如果一个系统没有做它应该做的事情，那么关于它的其他一切都无关紧要。	Correctness is clearly the prime quality. If a system does not do what it is supposed to do, then everything else about it matters little.",
  r"-Const 声明某些东西是常量。能变异吗？	Const declares something to be constant. Can it mutate?",
  r"质量是免费的，但只对愿意为此付出高昂代价的人开放。	Quality is free, but only to those who are willing to pay heavily for it.",
  r"没有什么比一套测试更能使系统灵活的了——	Nothing makes a system more flexible than a suite of tests -",
  r"对象工作正常并实现业务目标。但是我们需要测试它们。让我们打破他们。	Objects work fine and fulfill business objectives. But we need to test them. Let’s break them.",
  r"通过测试，我们可以快速且可验证地更改代码的行为。	With tests, we can change the behavior of our code quickly and verifiably.",
  r"没有它们，我们真的不知道我们的代码是变得更好还是更糟。”	Without them, we really don’t know if our code is getting better or worse.”",
  r"如何压缩遗留系统上的测试驱动开发	How to Squeeze Test Driven Development on Legacy Systems",
  r"我们都喜欢 TDD 我们知道它的好处，我们已经阅读了一千个关于如何使用它构建系统的教程......	We all love T.D.D. We know its benefits, we have read a thousand tutorials on how to build a system using this…",
  r"有两种方法可以编写无错误的程序；只有第三个有效。	There are two ways to write error-free programs; only the third one works.",
  r"通常，软件系统只有在实际应用中被使用并反复失败后才能正常工作。	As a rule, software systems do not work well until they have been used, and have failed repeatedly, in real applications.",
  r"随着测试变得更加具体，代码变得更加通用。	As the Tests get more Specific, the Code gets more Generic.",
  r"重构	Refactoring",
  r"每当我必须考虑理解代码的作用时，我都会问自己是否可以重构代码以使这种理解更加明显。	Whenever I have to think to understand what the code is doing, I ask myself if I can refactor the code to make that understanding more immediately apparent.",
  r"国家癌症研究所在Unsplash上拍摄的照片	Photo by National Cancer Institute on Unsplash",
  r"毫无疑问，面向对象设计与传统的结构化设计方法有着根本的不同：​​它需要不同的分解思维方式，并且它产生的软件架构在很大程度上处于结构化设计文化的领域之外。	Let there be no doubt that object-oriented design is fundamentally different than traditional structured design approaches: it requires different ways of thinking about decomposition, and it produces software architectures that are largely outside the realm of the structured design culture.",
  r"我发明了“面向对象”这个术语，而 C++ 并不是我的初衷	I invented the term ‘object oriented’, and C++ was not what I had in mind",
  r"计算机善于遵循指令，但不善于读懂你的想法	Computers are good at following instructions, but not at reading your mind唐纳德高德纳	Donald Knuth",
  r"与您使用的参数保持一致。代码是散文。	Be consistent with the parameters you use. Code is prose.",
];
